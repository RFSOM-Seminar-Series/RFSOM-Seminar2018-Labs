-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_TracebackUnit.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_TracebackUnit
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Receiver HDL/Viterbi Decode/Viterbi Decoder/Traceback/TracebackUnit
-- Hierarchy Level: 5
-- 
-- Traceback Decoding Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_TracebackUnit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dec_in                            :   IN    std_logic_vector(0 TO 63);  -- ufix1 [64]
        idx_in                            :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        tb_reset                          :   IN    std_logic;  -- ufix1
        dec_out                           :   OUT   std_logic_vector(0 TO 63);  -- ufix1 [64]
        idx_out                           :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
        );
END CombinedT_ip_src_TracebackUnit;


ARCHITECTURE rtl OF CombinedT_ip_src_TracebackUnit IS

  -- Signals
  SIGNAL idx_in_unsigned                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL slicedidx                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL thread                           : std_logic;  -- ufix1
  SIGNAL idx_out_tmp                      : unsigned(5 DOWNTO 0);  -- ufix6

BEGIN
  decshiftRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dec_out <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF tb_reset = '1' THEN
          dec_out <= (OTHERS => '0');
        ELSE 
          dec_out <= dec_in;
        END IF;
      END IF;
    END IF;
  END PROCESS decshiftRegister_process;


  idx_in_unsigned <= unsigned(idx_in);

  slicedidx <= idx_in_unsigned(4 DOWNTO 0);

  -- Decode the previous state based on current state and the decision branch
  
  thread <= dec_in(0) WHEN idx_in_unsigned = to_unsigned(16#00#, 6) ELSE
      dec_in(1) WHEN idx_in_unsigned = to_unsigned(16#01#, 6) ELSE
      dec_in(2) WHEN idx_in_unsigned = to_unsigned(16#02#, 6) ELSE
      dec_in(3) WHEN idx_in_unsigned = to_unsigned(16#03#, 6) ELSE
      dec_in(4) WHEN idx_in_unsigned = to_unsigned(16#04#, 6) ELSE
      dec_in(5) WHEN idx_in_unsigned = to_unsigned(16#05#, 6) ELSE
      dec_in(6) WHEN idx_in_unsigned = to_unsigned(16#06#, 6) ELSE
      dec_in(7) WHEN idx_in_unsigned = to_unsigned(16#07#, 6) ELSE
      dec_in(8) WHEN idx_in_unsigned = to_unsigned(16#08#, 6) ELSE
      dec_in(9) WHEN idx_in_unsigned = to_unsigned(16#09#, 6) ELSE
      dec_in(10) WHEN idx_in_unsigned = to_unsigned(16#0A#, 6) ELSE
      dec_in(11) WHEN idx_in_unsigned = to_unsigned(16#0B#, 6) ELSE
      dec_in(12) WHEN idx_in_unsigned = to_unsigned(16#0C#, 6) ELSE
      dec_in(13) WHEN idx_in_unsigned = to_unsigned(16#0D#, 6) ELSE
      dec_in(14) WHEN idx_in_unsigned = to_unsigned(16#0E#, 6) ELSE
      dec_in(15) WHEN idx_in_unsigned = to_unsigned(16#0F#, 6) ELSE
      dec_in(16) WHEN idx_in_unsigned = to_unsigned(16#10#, 6) ELSE
      dec_in(17) WHEN idx_in_unsigned = to_unsigned(16#11#, 6) ELSE
      dec_in(18) WHEN idx_in_unsigned = to_unsigned(16#12#, 6) ELSE
      dec_in(19) WHEN idx_in_unsigned = to_unsigned(16#13#, 6) ELSE
      dec_in(20) WHEN idx_in_unsigned = to_unsigned(16#14#, 6) ELSE
      dec_in(21) WHEN idx_in_unsigned = to_unsigned(16#15#, 6) ELSE
      dec_in(22) WHEN idx_in_unsigned = to_unsigned(16#16#, 6) ELSE
      dec_in(23) WHEN idx_in_unsigned = to_unsigned(16#17#, 6) ELSE
      dec_in(24) WHEN idx_in_unsigned = to_unsigned(16#18#, 6) ELSE
      dec_in(25) WHEN idx_in_unsigned = to_unsigned(16#19#, 6) ELSE
      dec_in(26) WHEN idx_in_unsigned = to_unsigned(16#1A#, 6) ELSE
      dec_in(27) WHEN idx_in_unsigned = to_unsigned(16#1B#, 6) ELSE
      dec_in(28) WHEN idx_in_unsigned = to_unsigned(16#1C#, 6) ELSE
      dec_in(29) WHEN idx_in_unsigned = to_unsigned(16#1D#, 6) ELSE
      dec_in(30) WHEN idx_in_unsigned = to_unsigned(16#1E#, 6) ELSE
      dec_in(31) WHEN idx_in_unsigned = to_unsigned(16#1F#, 6) ELSE
      dec_in(32) WHEN idx_in_unsigned = to_unsigned(16#20#, 6) ELSE
      dec_in(33) WHEN idx_in_unsigned = to_unsigned(16#21#, 6) ELSE
      dec_in(34) WHEN idx_in_unsigned = to_unsigned(16#22#, 6) ELSE
      dec_in(35) WHEN idx_in_unsigned = to_unsigned(16#23#, 6) ELSE
      dec_in(36) WHEN idx_in_unsigned = to_unsigned(16#24#, 6) ELSE
      dec_in(37) WHEN idx_in_unsigned = to_unsigned(16#25#, 6) ELSE
      dec_in(38) WHEN idx_in_unsigned = to_unsigned(16#26#, 6) ELSE
      dec_in(39) WHEN idx_in_unsigned = to_unsigned(16#27#, 6) ELSE
      dec_in(40) WHEN idx_in_unsigned = to_unsigned(16#28#, 6) ELSE
      dec_in(41) WHEN idx_in_unsigned = to_unsigned(16#29#, 6) ELSE
      dec_in(42) WHEN idx_in_unsigned = to_unsigned(16#2A#, 6) ELSE
      dec_in(43) WHEN idx_in_unsigned = to_unsigned(16#2B#, 6) ELSE
      dec_in(44) WHEN idx_in_unsigned = to_unsigned(16#2C#, 6) ELSE
      dec_in(45) WHEN idx_in_unsigned = to_unsigned(16#2D#, 6) ELSE
      dec_in(46) WHEN idx_in_unsigned = to_unsigned(16#2E#, 6) ELSE
      dec_in(47) WHEN idx_in_unsigned = to_unsigned(16#2F#, 6) ELSE
      dec_in(48) WHEN idx_in_unsigned = to_unsigned(16#30#, 6) ELSE
      dec_in(49) WHEN idx_in_unsigned = to_unsigned(16#31#, 6) ELSE
      dec_in(50) WHEN idx_in_unsigned = to_unsigned(16#32#, 6) ELSE
      dec_in(51) WHEN idx_in_unsigned = to_unsigned(16#33#, 6) ELSE
      dec_in(52) WHEN idx_in_unsigned = to_unsigned(16#34#, 6) ELSE
      dec_in(53) WHEN idx_in_unsigned = to_unsigned(16#35#, 6) ELSE
      dec_in(54) WHEN idx_in_unsigned = to_unsigned(16#36#, 6) ELSE
      dec_in(55) WHEN idx_in_unsigned = to_unsigned(16#37#, 6) ELSE
      dec_in(56) WHEN idx_in_unsigned = to_unsigned(16#38#, 6) ELSE
      dec_in(57) WHEN idx_in_unsigned = to_unsigned(16#39#, 6) ELSE
      dec_in(58) WHEN idx_in_unsigned = to_unsigned(16#3A#, 6) ELSE
      dec_in(59) WHEN idx_in_unsigned = to_unsigned(16#3B#, 6) ELSE
      dec_in(60) WHEN idx_in_unsigned = to_unsigned(16#3C#, 6) ELSE
      dec_in(61) WHEN idx_in_unsigned = to_unsigned(16#3D#, 6) ELSE
      dec_in(62) WHEN idx_in_unsigned = to_unsigned(16#3E#, 6) ELSE
      dec_in(63);

  idx_out_tmp <= slicedidx & thread;

  idx_out <= std_logic_vector(idx_out_tmp);

END rtl;

