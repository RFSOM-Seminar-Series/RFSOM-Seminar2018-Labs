-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_CRC_Check_and_DMA_Pack.vhd
-- Created: 2018-02-01 18:12:05
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_CRC_Check_and_DMA_Pack
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Receiver HDL/CRC Check and DMA Pack
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_CRC_Check_and_DMA_Pack IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        validIn                           :   IN    std_logic;
        bits                              :   IN    std_logic;
        endCRC                            :   IN    std_logic;
        startData                         :   IN    std_logic;
        payloadLen                        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        byteOut                           :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        validOut                          :   OUT   std_logic;
        sync                              :   OUT   std_logic;
        payloadLenOut                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        crcBus_err                        :   OUT   std_logic;
        crcBus_valid                      :   OUT   std_logic;
        crcBus_end                        :   OUT   std_logic
        );
END CombinedT_ip_src_CRC_Check_and_DMA_Pack;


ARCHITECTURE rtl OF CombinedT_ip_src_CRC_Check_and_DMA_Pack IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_CRC_Check_ES
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Valid                           :   IN    std_logic;
          Bits                            :   IN    std_logic;
          endCRC                          :   IN    std_logic;
          StartData                       :   IN    std_logic;
          payloadLen                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          dataOut                         :   OUT   std_logic;  -- ufix1
          startOut                        :   OUT   std_logic;
          endOut                          :   OUT   std_logic;
          validOut                        :   OUT   std_logic;
          err                             :   OUT   std_logic;
          payloadLenOut                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_DMA_Interface
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          bitIn                           :   IN    std_logic;  -- ufix1
          startIn                         :   IN    std_logic;
          endIn                           :   IN    std_logic;
          validIn                         :   IN    std_logic;
          err                             :   IN    std_logic;
          payloadLen                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          byteOut                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          validOut                        :   OUT   std_logic;
          sync                            :   OUT   std_logic;
          payloadLenOut                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_CRC_Check_ES
    USE ENTITY work.CombinedT_ip_src_CRC_Check_ES(rtl);

  FOR ALL : CombinedT_ip_src_DMA_Interface
    USE ENTITY work.CombinedT_ip_src_DMA_Interface(rtl);

  -- Signals
  SIGNAL CRC_Check_ES_out1                : std_logic;  -- ufix1
  SIGNAL CRC_Check_ES_out2                : std_logic;
  SIGNAL CRC_Check_ES_out3                : std_logic;
  SIGNAL CRC_Check_ES_out4                : std_logic;
  SIGNAL CRC_Check_ES_out5                : std_logic;
  SIGNAL CRC_Check_ES_out6                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Pipeline_Delay_out1              : std_logic;  -- ufix1
  SIGNAL Pipeline_Delay1_out1             : std_logic;
  SIGNAL end_rsvd                         : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL err                              : std_logic;
  SIGNAL CRC_Check_ES_out6_unsigned       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Pipeline_Delay5_out1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL byteOut_tmp                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL startOut                         : std_logic;
  SIGNAL DMA_Interface_out4               : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_CRC_Check_ES : CombinedT_ip_src_CRC_Check_ES
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Valid => validIn,
              Bits => bits,
              endCRC => endCRC,
              StartData => startData,
              payloadLen => payloadLen,  -- uint16
              dataOut => CRC_Check_ES_out1,  -- ufix1
              startOut => CRC_Check_ES_out2,
              endOut => CRC_Check_ES_out3,
              validOut => CRC_Check_ES_out4,
              err => CRC_Check_ES_out5,
              payloadLenOut => CRC_Check_ES_out6  -- uint16
              );

  u_DMA_Interface : CombinedT_ip_src_DMA_Interface
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              bitIn => Pipeline_Delay_out1,  -- ufix1
              startIn => Pipeline_Delay1_out1,
              endIn => end_rsvd,
              validIn => valid,
              err => err,
              payloadLen => std_logic_vector(Pipeline_Delay5_out1),  -- uint16
              byteOut => byteOut_tmp,  -- ufix64
              validOut => validOut,
              sync => startOut,
              payloadLenOut => DMA_Interface_out4  -- uint16
              );

  Pipeline_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay_out1 <= CRC_Check_ES_out1;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay_process;


  Pipeline_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay1_out1 <= CRC_Check_ES_out2;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay1_process;


  Pipeline_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      end_rsvd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        end_rsvd <= CRC_Check_ES_out3;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay2_process;


  Pipeline_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        valid <= CRC_Check_ES_out4;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay3_process;


  Pipeline_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      err <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        err <= CRC_Check_ES_out5;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay4_process;


  CRC_Check_ES_out6_unsigned <= unsigned(CRC_Check_ES_out6);

  Pipeline_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay5_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay5_out1 <= CRC_Check_ES_out6_unsigned;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay5_process;


  byteOut <= byteOut_tmp;

  sync <= startOut;

  payloadLenOut <= DMA_Interface_out4;

  crcBus_err <= err;

  crcBus_valid <= valid;

  crcBus_end <= end_rsvd;

END rtl;

