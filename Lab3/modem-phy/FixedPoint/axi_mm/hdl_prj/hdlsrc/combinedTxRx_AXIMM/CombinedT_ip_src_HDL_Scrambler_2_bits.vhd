-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_HDL_Scrambler_2_bits.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_HDL_Scrambler_2_bits
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Transmitter HDL/Packet Generation/Payload/HDL Scrambler 2 bits
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_HDL_Scrambler_2_bits IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        bitsIn                            :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
        reset_1                           :   IN    std_logic;
        bitsOut                           :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
        );
END CombinedT_ip_src_HDL_Scrambler_2_bits;


ARCHITECTURE rtl OF CombinedT_ip_src_HDL_Scrambler_2_bits IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Buffer_Manage
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          bit1                            :   IN    std_logic;
          bit2                            :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          outBuffer                       :   OUT   std_logic_vector(0 TO 6)  -- boolean [7]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Buffer_Manage
    USE ENTITY work.CombinedT_ip_src_Buffer_Manage(rtl);

  -- Signals
  SIGNAL bitsIn_1                         : std_logic;
  SIGNAL bitsIn_0                         : std_logic;
  SIGNAL outBuffer                        : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL outBuffer_6                      : std_logic;
  SIGNAL outBuffer_4                      : std_logic;
  SIGNAL outBuffer_2                      : std_logic;
  SIGNAL outBuffer_5                      : std_logic;
  SIGNAL outBuffer_3                      : std_logic;
  SIGNAL outBuffer_1                      : std_logic;
  SIGNAL state_xor1_out1                  : std_logic;
  SIGNAL state_xor3_out1                  : std_logic;
  SIGNAL state_xor4_out1                  : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL outBuffer_0                      : std_logic;
  SIGNAL state_xor2_out1                  : std_logic;
  SIGNAL Mux_out1                         : std_logic_vector(0 TO 1);  -- boolean [2]

BEGIN
  u_Buffer_Manage : CombinedT_ip_src_Buffer_Manage
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              bit1 => Delay_out1,
              bit2 => Delay1_out1,
              reset_1 => reset_1,
              outBuffer => outBuffer  -- boolean [7]
              );

  bitsIn_1 <= bitsIn(1);

  bitsIn_0 <= bitsIn(0);

  outBuffer_6 <= outBuffer(6);

  outBuffer_4 <= outBuffer(4);

  outBuffer_2 <= outBuffer(2);

  outBuffer_5 <= outBuffer(5);

  outBuffer_3 <= outBuffer(3);

  outBuffer_1 <= outBuffer(1);

  state_xor3_out1 <= state_xor1_out1 XOR (outBuffer_5 XOR (outBuffer_1 XOR outBuffer_3));

  state_xor4_out1 <= state_xor3_out1 XOR bitsIn_1;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay1_out1 <= state_xor4_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_out1 <= state_xor1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  outBuffer_0 <= outBuffer(0);

  state_xor2_out1 <= outBuffer_6 XOR (outBuffer_4 XOR (outBuffer_0 XOR outBuffer_2));

  state_xor1_out1 <= state_xor2_out1 XOR bitsIn_0;

  Mux_out1(0) <= state_xor1_out1;
  Mux_out1(1) <= state_xor4_out1;



  bitsOut <= Mux_out1;

END rtl;

