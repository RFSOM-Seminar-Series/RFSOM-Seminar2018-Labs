-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_Combined_TX_and_RX.vhd
-- Created: 2018-02-01 18:12:07
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-06
-- Target subsystem base rate: 1e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ToRadioR                      ce_out        1e-06
-- ToRadioI                      ce_out        1e-06
-- ToRadioValid                  ce_out        1e-06
-- FromIPR                       ce_out        1e-06
-- FromIPI                       ce_out        1e-06
-- FromIPvalid                   ce_out        1e-06
-- packetCount                   ce_out        1e-06
-- selectedError                 ce_out        1e-06
-- packetLen                     ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Combined_TX_and_RX
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Combined_TX_and_RX IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ValidInTx                         :   IN    std_logic;
        rInTx                             :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        iInTx                             :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        FromRadioR                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        FromRadioI                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        FromRadioValidIn                  :   IN    std_logic;
        LoopBW                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        EQmu                              :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        SelectScope                       :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        SelectError                       :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        ce_out                            :   OUT   std_logic;
        ToRadioR                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ToRadioI                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ToRadioValid                      :   OUT   std_logic;
        FromIPR                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        FromIPI                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        FromIPvalid                       :   OUT   std_logic;
        packetCount                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        selectedError                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        packetLen                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END CombinedT_ip_src_Combined_TX_and_RX;


ARCHITECTURE rtl OF CombinedT_ip_src_Combined_TX_and_RX IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Combined_TX_and_RX_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_DMA_Model_Driver
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          driver                          :   IN    std_logic;
          enable                          :   IN    std_logic;
          payload                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Transmitter_HDL
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          bytesIn                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          validIn                         :   IN    std_logic;
          real_rsvd                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          imag                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic;
          Need_Data                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Receiver_HDL
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          re                              :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Im                              :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Enable                          :   IN    std_logic;
          FRLoopBW                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          EQmu                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Scope_Select                    :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          DebugSelector                   :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          bytesOut                        :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          validOut                        :   OUT   std_logic;
          sync                            :   OUT   std_logic;
          payloadLenOut                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          dataRe                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          dataIm                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          validIQ                         :   OUT   std_logic;
          crcErr                          :   OUT   std_logic;
          validCRC                        :   OUT   std_logic;
          endFlag                         :   OUT   std_logic;
          DebugSelection                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Combined_TX_and_RX_tc
    USE ENTITY work.CombinedT_ip_src_Combined_TX_and_RX_tc(rtl);

  FOR ALL : CombinedT_ip_src_DMA_Model_Driver
    USE ENTITY work.CombinedT_ip_src_DMA_Model_Driver(rtl);

  FOR ALL : CombinedT_ip_src_Transmitter_HDL
    USE ENTITY work.CombinedT_ip_src_Transmitter_HDL(rtl);

  FOR ALL : CombinedT_ip_src_Receiver_HDL
    USE ENTITY work.CombinedT_ip_src_Receiver_HDL(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Upsample_zero                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Upsample1_zero                   : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL Upsample1_muxout                 : std_logic;
  SIGNAL Upsample1_bypass_reg             : std_logic;  -- ufix1
  SIGNAL Upsample1_bypassout              : std_logic;
  SIGNAL Transmitter_HDL_out4             : std_logic;
  SIGNAL Downsample1_out1                 : std_logic;
  SIGNAL Downsample1_out1_1               : std_logic;
  SIGNAL payload                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL payload_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Upsample_muxout                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Upsample_bypass_reg              : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Upsample_bypassout               : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Transmitter_HDL_out1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Transmitter_HDL_out2             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Transmitter_HDL_out3             : std_logic;
  SIGNAL Transmitter_HDL_out1_signed      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_reg                   : vector_of_signed16(0 TO 25);  -- sfix16 [26]
  SIGNAL Transmitter_HDL_out1_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Transmitter_HDL_out2_signed      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch1_reg                  : vector_of_signed16(0 TO 25);  -- sfix16 [26]
  SIGNAL Transmitter_HDL_out2_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 25);  -- ufix1 [26]
  SIGNAL Transmitter_HDL_out3_1           : std_logic;
  SIGNAL Delay1_ctrl_const_out            : std_logic;
  SIGNAL Delay1_ctrl_delay_out            : std_logic;
  SIGNAL Delay1_Initial_Val_out           : signed(15 DOWNTO 0);  -- int16
  SIGNAL LoopBW_signed                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay1_out                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay2_ctrl_const_out            : std_logic;
  SIGNAL Delay2_ctrl_delay_out            : std_logic;
  SIGNAL Delay2_Initial_Val_out           : signed(15 DOWNTO 0);  -- int16
  SIGNAL EQmu_signed                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay2_out                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay3_ctrl_const_out            : std_logic;
  SIGNAL Delay3_ctrl_delay_out            : std_logic;
  SIGNAL Delay3_Initial_Val_out           : signed(7 DOWNTO 0);  -- int8
  SIGNAL SelectScope_signed               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay3_out                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay3_out1                      : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay4_ctrl_const_out            : std_logic;
  SIGNAL Delay4_ctrl_delay_out            : std_logic;
  SIGNAL Delay4_Initial_Val_out           : signed(7 DOWNTO 0);  -- int8
  SIGNAL SelectError_signed               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay4_out                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay4_out1                      : signed(7 DOWNTO 0);  -- int8
  SIGNAL Receiver_HDL_out1                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Receiver_HDL_out2                : std_logic;
  SIGNAL Receiver_HDL_out3                : std_logic;
  SIGNAL Receiver_HDL_out4                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Receiver_HDL_out5                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Receiver_HDL_out6                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Receiver_HDL_out7                : std_logic;
  SIGNAL Receiver_HDL_out8                : std_logic;
  SIGNAL Receiver_HDL_out9                : std_logic;
  SIGNAL Receiver_HDL_out10               : std_logic;
  SIGNAL Receiver_HDL_out11               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Receiver_HDL_out5_signed         : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL delayMatch3_reg                  : vector_of_signed16(0 TO 19);  -- sfix16 [20]
  SIGNAL Receiver_HDL_out5_1              : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Receiver_HDL_out6_signed         : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL delayMatch4_reg                  : vector_of_signed16(0 TO 19);  -- sfix16 [20]
  SIGNAL Receiver_HDL_out6_1              : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL delayMatch5_reg                  : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL Receiver_HDL_out7_1              : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Receiver_HDL_out11_unsigned      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch6_reg                  : vector_of_unsigned32(0 TO 19);  -- ufix32 [20]
  SIGNAL Receiver_HDL_out11_1             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Receiver_HDL_out4_unsigned       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL delayMatch7_reg                  : vector_of_unsigned16(0 TO 19);  -- ufix16 [20]
  SIGNAL Receiver_HDL_out4_1              : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  -- Receiver
  -- 
  -- Transmitter
  -- 
  -- Keep On

  u_Combined_TX_and_RX_tc : CombinedT_ip_src_Combined_TX_and_RX_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  u_DMA_Model_Driver : CombinedT_ip_src_DMA_Model_Driver
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              driver => Constant_out1,
              enable => Downsample1_out1_1,
              payload => payload,  -- ufix64
              valid => valid
              );

  u_Transmitter_HDL : CombinedT_ip_src_Transmitter_HDL
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_4_0 => enb_1_4_0,
              enb_1_1_1 => enb_1_1_1,
              enb_1_4_1 => enb_1_4_1,
              bytesIn => std_logic_vector(Upsample_bypassout),  -- ufix64
              validIn => Upsample1_bypassout,
              real_rsvd => Transmitter_HDL_out1,  -- sfix16_En14
              imag => Transmitter_HDL_out2,  -- sfix16_En14
              validOut => Transmitter_HDL_out3,
              Need_Data => Transmitter_HDL_out4
              );

  u_Receiver_HDL : CombinedT_ip_src_Receiver_HDL
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              re => FromRadioR,  -- int16
              Im => FromRadioI,  -- int16
              Enable => FromRadioValidIn,
              FRLoopBW => std_logic_vector(Delay1_out1),  -- int16
              EQmu => std_logic_vector(Delay2_out1),  -- int16
              Scope_Select => std_logic_vector(Delay3_out1),  -- int8
              DebugSelector => std_logic_vector(Delay4_out1),  -- int8
              bytesOut => Receiver_HDL_out1,  -- ufix64
              validOut => Receiver_HDL_out2,
              sync => Receiver_HDL_out3,
              payloadLenOut => Receiver_HDL_out4,  -- uint16
              dataRe => Receiver_HDL_out5,  -- sfix16_En13
              dataIm => Receiver_HDL_out6,  -- sfix16_En13
              validIQ => Receiver_HDL_out7,
              crcErr => Receiver_HDL_out8,
              validCRC => Receiver_HDL_out9,
              endFlag => Receiver_HDL_out10,
              DebugSelection => Receiver_HDL_out11  -- uint32
              );

  Constant_out1 <= '1';

  -- Upsample: Upsample by 4, Sample offset 0 
  Upsample_zero <= to_unsigned(0, 64);

  -- Upsample1: Upsample by 4, Sample offset 0 
  Upsample1_zero <= '0';

  
  Upsample1_muxout <= valid WHEN enb_1_4_1 = '1' ELSE
      Upsample1_zero;

  -- Upsample bypass register
  Upsample1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample1_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample1_bypass_reg <= Upsample1_muxout;
      END IF;
    END IF;
  END PROCESS Upsample1_bypass_process;

  
  Upsample1_bypassout <= Upsample1_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample1_bypass_reg;

  -- Downsample by 4 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample1_out1 <= Transmitter_HDL_out4;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Downsample1_out1_1 <= Downsample1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  payload_unsigned <= unsigned(payload);

  
  Upsample_muxout <= payload_unsigned WHEN enb_1_4_1 = '1' ELSE
      Upsample_zero;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample_bypass_reg <= to_unsigned(0, 64);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample_bypass_reg <= Upsample_muxout;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout <= Upsample_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg;

  Transmitter_HDL_out1_signed <= signed(Transmitter_HDL_out1);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= Transmitter_HDL_out1_signed;
        delayMatch_reg(1 TO 25) <= delayMatch_reg(0 TO 24);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Transmitter_HDL_out1_1 <= delayMatch_reg(25);

  ToRadioR <= std_logic_vector(Transmitter_HDL_out1_1);

  Transmitter_HDL_out2_signed <= signed(Transmitter_HDL_out2);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Transmitter_HDL_out2_signed;
        delayMatch1_reg(1 TO 25) <= delayMatch1_reg(0 TO 24);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Transmitter_HDL_out2_1 <= delayMatch1_reg(25);

  ToRadioI <= std_logic_vector(Transmitter_HDL_out2_1);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= Transmitter_HDL_out3;
        delayMatch2_reg(1 TO 25) <= delayMatch2_reg(0 TO 24);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Transmitter_HDL_out3_1 <= delayMatch2_reg(25);

  Delay1_ctrl_const_out <= '1';

  Delay1_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_ctrl_delay_out <= Delay1_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay1_ctrl_delay_process;


  Delay1_Initial_Val_out <= to_signed(16#0028#, 16);

  LoopBW_signed <= signed(LoopBW);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out <= LoopBW_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Delay1_out1 <= Delay1_Initial_Val_out WHEN Delay1_ctrl_delay_out = '0' ELSE
      Delay1_out;

  Delay2_ctrl_const_out <= '1';

  Delay2_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_ctrl_delay_out <= Delay2_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay2_ctrl_delay_process;


  Delay2_Initial_Val_out <= to_signed(16#00C8#, 16);

  EQmu_signed <= signed(EQmu);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out <= EQmu_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Delay2_out1 <= Delay2_Initial_Val_out WHEN Delay2_ctrl_delay_out = '0' ELSE
      Delay2_out;

  Delay3_ctrl_const_out <= '1';

  Delay3_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_ctrl_delay_out <= Delay3_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay3_ctrl_delay_process;


  Delay3_Initial_Val_out <= to_signed(16#01#, 8);

  SelectScope_signed <= signed(SelectScope);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out <= SelectScope_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Delay3_out1 <= Delay3_Initial_Val_out WHEN Delay3_ctrl_delay_out = '0' ELSE
      Delay3_out;

  Delay4_ctrl_const_out <= '1';

  Delay4_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_ctrl_delay_out <= Delay4_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay4_ctrl_delay_process;


  Delay4_Initial_Val_out <= to_signed(16#01#, 8);

  SelectError_signed <= signed(SelectError);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out <= SelectError_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Delay4_out1 <= Delay4_Initial_Val_out WHEN Delay4_ctrl_delay_out = '0' ELSE
      Delay4_out;

  Receiver_HDL_out5_signed <= signed(Receiver_HDL_out5);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch3_reg(0) <= Receiver_HDL_out5_signed;
        delayMatch3_reg(1 TO 19) <= delayMatch3_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Receiver_HDL_out5_1 <= delayMatch3_reg(19);

  FromIPR <= std_logic_vector(Receiver_HDL_out5_1);

  Receiver_HDL_out6_signed <= signed(Receiver_HDL_out6);

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch4_reg(0) <= Receiver_HDL_out6_signed;
        delayMatch4_reg(1 TO 19) <= delayMatch4_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Receiver_HDL_out6_1 <= delayMatch4_reg(19);

  FromIPI <= std_logic_vector(Receiver_HDL_out6_1);

  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch5_reg(0) <= Receiver_HDL_out7;
        delayMatch5_reg(1 TO 19) <= delayMatch5_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Receiver_HDL_out7_1 <= delayMatch5_reg(19);

  Logical_Operator3_out1 <= Receiver_HDL_out9 AND Receiver_HDL_out10;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4294967295
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Logical_Operator3_out1 = '1' THEN
        HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  packetCount <= std_logic_vector(HDL_Counter1_out1);

  Receiver_HDL_out11_unsigned <= unsigned(Receiver_HDL_out11);

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch6_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch6_reg(0) <= Receiver_HDL_out11_unsigned;
        delayMatch6_reg(1 TO 19) <= delayMatch6_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Receiver_HDL_out11_1 <= delayMatch6_reg(19);

  selectedError <= std_logic_vector(Receiver_HDL_out11_1);

  Receiver_HDL_out4_unsigned <= unsigned(Receiver_HDL_out4);

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch7_reg(0) <= Receiver_HDL_out4_unsigned;
        delayMatch7_reg(1 TO 19) <= delayMatch7_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Receiver_HDL_out4_1 <= delayMatch7_reg(19);

  packetLen <= std_logic_vector(Receiver_HDL_out4_1);

  ce_out <= enb_1_1_1;








  ToRadioValid <= Transmitter_HDL_out3_1;

  FromIPvalid <= Receiver_HDL_out7_1;

END rtl;

