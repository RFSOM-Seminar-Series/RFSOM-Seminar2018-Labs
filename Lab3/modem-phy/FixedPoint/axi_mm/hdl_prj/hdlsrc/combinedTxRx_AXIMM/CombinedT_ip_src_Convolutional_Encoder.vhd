-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_Convolutional_Encoder.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Convolutional_Encoder
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Transmitter HDL/Packet Generation/Payload/Convolutional Encoder
-- Hierarchy Level: 4
-- 
-- Convolutional Encoder Block
-- 
-- poly2trellis(7, [171 133])
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_Convolutional_Encoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        Convolutional_Encoder_in          :   IN    std_logic;
        Convolutional_Encoder_reset       :   IN    std_logic;
        Convolutional_Encoder_out         :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
        );
END CombinedT_ip_src_Convolutional_Encoder;


ARCHITECTURE rtl OF CombinedT_ip_src_Convolutional_Encoder IS

  -- Signals
  SIGNAL shift1_reg                       : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL sreg1out                         : std_logic_vector(0 TO 6);  -- boolean [7]
  SIGNAL sreg1out_0                       : std_logic;
  SIGNAL sreg1out_1                       : std_logic;
  SIGNAL sreg1out_2                       : std_logic;
  SIGNAL sreg1out_3                       : std_logic;
  SIGNAL sreg1out_6                       : std_logic;
  SIGNAL encoded_entry1                   : std_logic;
  SIGNAL sreg1out_5                       : std_logic;
  SIGNAL encoded_entry2                   : std_logic;

BEGIN
  -- Shift Register for Constraint Length 7
  shift1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      shift1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        IF Convolutional_Encoder_reset = '1' THEN
          shift1_reg <= (OTHERS => '0');
        ELSE 
          shift1_reg(0) <= Convolutional_Encoder_in;
          shift1_reg(1 TO 5) <= shift1_reg(0 TO 4);
        END IF;
      END IF;
    END IF;
  END PROCESS shift1_process;

  sreg1out(0) <= Convolutional_Encoder_in;
  sreg1out(1 TO 6) <= shift1_reg(0 TO 5);

  sreg1out_0 <= sreg1out(0);

  sreg1out_1 <= sreg1out(1);

  sreg1out_2 <= sreg1out(2);

  sreg1out_3 <= sreg1out(3);

  sreg1out_6 <= sreg1out(6);

  -- Output Polynomial: [171]
  encoded_entry1 <= sreg1out_6 XOR (sreg1out_3 XOR (sreg1out_2 XOR (sreg1out_0 XOR sreg1out_1)));

  sreg1out_5 <= sreg1out(5);

  -- Output Polynomial: [133]
  encoded_entry2 <= sreg1out_6 XOR (sreg1out_5 XOR (sreg1out_3 XOR (sreg1out_0 XOR sreg1out_2)));

  Convolutional_Encoder_out(0) <= encoded_entry1;
  Convolutional_Encoder_out(1) <= encoded_entry2;

END rtl;

