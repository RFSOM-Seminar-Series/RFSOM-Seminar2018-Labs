-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_Packet_Generation.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Packet_Generation
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Transmitter HDL/Packet Generation
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_Packet_Generation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        enb_1_4_1                         :   IN    std_logic;
        bits                              :   IN    std_logic;
        payloadSize                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        start                             :   IN    std_logic;
        trueData                          :   OUT   std_logic;
        symbols_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        symbols_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        EOF                               :   OUT   std_logic
        );
END CombinedT_ip_src_Packet_Generation;


ARCHITECTURE rtl OF CombinedT_ip_src_Packet_Generation IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Tx_Controller
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          payloadBit                      :   IN    std_logic;
          payloadSize                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          count                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          start                           :   IN    std_logic;
          modeOut                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          headerData                      :   OUT   std_logic;
          data                            :   OUT   std_logic;
          dataStart                       :   OUT   std_logic;
          dataEnd                         :   OUT   std_logic;
          preambleReset                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Payload
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          data                            :   IN    std_logic;
          start                           :   IN    std_logic;
          done                            :   IN    std_logic;
          mode                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          bits                            :   OUT   std_logic_vector(0 TO 1);  -- boolean [2]
          end_rsvd                        :   OUT   std_logic;
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Preamble
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Random_Data
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          In1                             :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_QPSK_Modulator_Baseband1
    PORT( in0                             :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          out0_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          out0_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Tx_Controller
    USE ENTITY work.CombinedT_ip_src_Tx_Controller(rtl);

  FOR ALL : CombinedT_ip_src_Payload
    USE ENTITY work.CombinedT_ip_src_Payload(rtl);

  FOR ALL : CombinedT_ip_src_Preamble
    USE ENTITY work.CombinedT_ip_src_Preamble(rtl);

  FOR ALL : CombinedT_ip_src_Random_Data
    USE ENTITY work.CombinedT_ip_src_Random_Data(rtl);

  FOR ALL : CombinedT_ip_src_QPSK_Modulator_Baseband1
    USE ENTITY work.CombinedT_ip_src_QPSK_Modulator_Baseband1(rtl);

  -- Signals
  SIGNAL Delay_For_Preamble_For_Preamble_reg : std_logic_vector(0 TO 420);  -- ufix1 [421]
  SIGNAL Delay_For_Preamble_For_Preamble_out1 : std_logic;
  SIGNAL Delay_For_Reset2_out1            : std_logic;
  SIGNAL Frame_Indexer_out1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay_For_Reset1_out1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL modeOut                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL headerData                       : std_logic;
  SIGNAL data                             : std_logic;
  SIGNAL dataStart                        : std_logic;
  SIGNAL dataEnd                          : std_logic;
  SIGNAL preambleReset                    : std_logic;
  SIGNAL modeOut_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Enable_Mod_and_Filter_out1       : std_logic;
  SIGNAL Payload_out1                     : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL Payload_out2                     : std_logic;
  SIGNAL Payload_out3                     : std_logic;
  SIGNAL Multiport_Switch1_out1           : std_logic;
  SIGNAL Preamble_out1                    : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL Duplicate_Header_Bits_out1       : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL Random_Data_out1                 : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL Multiport_Switch_out1            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL QPSK_Modulator_Baseband1_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSK_Modulator_Baseband1_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  -- Modes
  -- 	1: Preamble
  -- 	2: Header
  -- 	3: Payload
  -- 	4: Random Data

  u_Tx_Controller : CombinedT_ip_src_Tx_Controller
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              payloadBit => Delay_For_Reset2_out1,
              payloadSize => payloadSize,  -- uint16
              count => std_logic_vector(Delay_For_Reset1_out1),  -- uint32
              start => start,
              modeOut => modeOut,  -- uint8
              headerData => headerData,
              data => data,
              dataStart => dataStart,
              dataEnd => dataEnd,
              preambleReset => preambleReset
              );

  u_Payload : CombinedT_ip_src_Payload
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              data => data,
              start => dataStart,
              done => dataEnd,
              mode => modeOut,  -- uint8
              bits => Payload_out1,  -- boolean [2]
              end_rsvd => Payload_out2,
              valid => Payload_out3
              );

  u_Preamble : CombinedT_ip_src_Preamble
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1,
              reset_1 => preambleReset,
              Out1 => Preamble_out1  -- boolean [2]
              );

  u_Random_Data : CombinedT_ip_src_Random_Data
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              In1 => dataEnd,
              Out1 => Random_Data_out1  -- boolean [2]
              );

  u_QPSK_Modulator_Baseband1 : CombinedT_ip_src_QPSK_Modulator_Baseband1
    PORT MAP( in0 => Multiport_Switch_out1,  -- boolean [2]
              out0_re => QPSK_Modulator_Baseband1_out1_re,  -- sfix16_En15
              out0_im => QPSK_Modulator_Baseband1_out1_im  -- sfix16_En15
              );

  Delay_For_Preamble_For_Preamble_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_For_Preamble_For_Preamble_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_For_Preamble_For_Preamble_reg(0) <= bits;
        Delay_For_Preamble_For_Preamble_reg(1 TO 420) <= Delay_For_Preamble_For_Preamble_reg(0 TO 419);
      END IF;
    END IF;
  END PROCESS Delay_For_Preamble_For_Preamble_process;

  Delay_For_Preamble_For_Preamble_out1 <= Delay_For_Preamble_For_Preamble_reg(420);

  Delay_For_Reset2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_For_Reset2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_For_Reset2_out1 <= Delay_For_Preamble_For_Preamble_out1;
      END IF;
    END IF;
  END PROCESS Delay_For_Reset2_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65990
  Frame_Indexer_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Frame_Indexer_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        IF start = '1' THEN 
          Frame_Indexer_out1 <= to_unsigned(0, 32);
        ELSIF Frame_Indexer_out1 >= to_unsigned(65990, 32) THEN 
          Frame_Indexer_out1 <= to_unsigned(0, 32);
        ELSE 
          Frame_Indexer_out1 <= Frame_Indexer_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS Frame_Indexer_process;


  Delay_For_Reset1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_For_Reset1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_For_Reset1_out1 <= Frame_Indexer_out1;
      END IF;
    END IF;
  END PROCESS Delay_For_Reset1_process;


  modeOut_unsigned <= unsigned(modeOut);

  
  Enable_Mod_and_Filter_out1 <= '1' WHEN modeOut_unsigned < to_unsigned(16#04#, 8) ELSE
      '0';

  
  Multiport_Switch1_out1 <= Enable_Mod_and_Filter_out1 WHEN modeOut_unsigned = to_unsigned(16#01#, 8) ELSE
      Enable_Mod_and_Filter_out1 WHEN modeOut_unsigned = to_unsigned(16#02#, 8) ELSE
      Payload_out3 WHEN modeOut_unsigned = to_unsigned(16#03#, 8) ELSE
      Enable_Mod_and_Filter_out1;

  Duplicate_Header_Bits_out1(0) <= headerData;
  Duplicate_Header_Bits_out1(1) <= headerData;

  Multiport_Switch_output : PROCESS (modeOut_unsigned, Preamble_out1, Duplicate_Header_Bits_out1, Payload_out1,
       Random_Data_out1)
  BEGIN
    IF modeOut_unsigned = to_unsigned(16#01#, 8) THEN 
      Multiport_Switch_out1 <= Preamble_out1;
    ELSIF modeOut_unsigned = to_unsigned(16#02#, 8) THEN 
      Multiport_Switch_out1 <= Duplicate_Header_Bits_out1;
    ELSIF modeOut_unsigned = to_unsigned(16#03#, 8) THEN 
      Multiport_Switch_out1 <= Payload_out1;
    ELSE 
      Multiport_Switch_out1 <= Random_Data_out1;
    END IF;
  END PROCESS Multiport_Switch_output;



  trueData <= Multiport_Switch1_out1;

  symbols_re <= QPSK_Modulator_Baseband1_out1_re;

  symbols_im <= QPSK_Modulator_Baseband1_out1_im;

  EOF <= Payload_out2;

END rtl;

