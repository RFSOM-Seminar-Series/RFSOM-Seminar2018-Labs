-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_DMA_Model_Driver.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_DMA_Model_Driver
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/DMA Model Driver
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_DMA_Model_Driver IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        driver                            :   IN    std_logic;
        enable                            :   IN    std_logic;
        payload                           :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        valid                             :   OUT   std_logic
        );
END CombinedT_ip_src_DMA_Model_Driver;


ARCHITECTURE rtl OF CombinedT_ip_src_DMA_Model_Driver IS

  -- Signals
  SIGNAL payload_tmp                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL indx                             : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL indx_not_empty                   : std_logic;
  SIGNAL mode                             : signed(7 DOWNTO 0);  -- int8
  SIGNAL pSize                            : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL indx_next                        : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL indx_not_empty_next              : std_logic;
  SIGNAL mode_next                        : signed(7 DOWNTO 0);  -- int8
  SIGNAL pSize_next                       : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  DMA_Model_Driver_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      indx_not_empty <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        indx <= indx_next;
        indx_not_empty <= indx_not_empty_next;
        mode <= mode_next;
        pSize <= pSize_next;
      END IF;
    END IF;
  END PROCESS DMA_Model_Driver_process;

  DMA_Model_Driver_output : PROCESS (driver, enable, indx, indx_not_empty, mode, pSize)
    VARIABLE indx_temp : unsigned(63 DOWNTO 0);
    VARIABLE mode_temp : signed(7 DOWNTO 0);
    VARIABLE pSize_temp : unsigned(63 DOWNTO 0);
    VARIABLE add_temp : unsigned(65 DOWNTO 0);
  BEGIN
    indx_temp := indx;
    mode_temp := mode;
    pSize_temp := pSize;
    indx_not_empty_next <= indx_not_empty;
    IF ( NOT indx_not_empty) = '1' THEN 
      pSize_temp := to_unsigned(200, 64);
      -- Size in bytes (Must be multiple of 32 bits) cannot exceed uint16 max
      indx_temp := to_unsigned(200, 64);
      indx_not_empty_next <= '1';
      mode_temp := to_signed(16#00#, 8);
    END IF;
    IF (enable AND driver) = '1' THEN 
      valid <= '1';
      CASE mode_temp IS
        WHEN "00000000" =>
          -- Fresh packet start
          pSize_temp := to_unsigned(200, 64);
          payload_tmp <= to_unsigned(200, 64);
          --Upper bits
          mode_temp := to_signed(16#01#, 8);
          indx_temp := to_unsigned(0, 64);
          --new = true;
          --fprintf('(TX) Sending new packet with length: %u\n',uint64(pSize));
        WHEN OTHERS => 
          --             new = false;
          add_temp := resize(indx_temp, 66) + to_unsigned(8, 66);
          IF add_temp(65 DOWNTO 64) /= "00" THEN 
            indx_temp := X"FFFFFFFFFFFFFFFF";
          ELSE 
            indx_temp := add_temp(63 DOWNTO 0);
          END IF;
          IF indx_temp = to_unsigned(8, 64) THEN 
            payload_tmp <= to_unsigned(1, 64);
            --                 payload = fi(uint64(12297829382473034410),0,64,0);%sum(2.^[0:2:14])); % Alternating ones and zeros
          ELSIF indx_temp = pSize_temp THEN 
            payload_tmp <= unsigned'(X"FFFFFFFFFFFFFFFF");
            -- All ones
            --                  payload = fi(uint64(12297829382473034410),0,64,0);%sum(2.^[0:2:14])); % Alternating ones and zeros
          ELSE 
            --payload = fi(uint64(randi([0 12297829382473034410])),0,64,0);%sum(2.^[0:2:14])); % Alternating ones and zeros
            payload_tmp <= unsigned'(X"AAAAAAAAAAAAAAAA");
            --sum(2.^[0:2:14])); % Alternating ones and zeros
          END IF;
          IF indx_temp = pSize_temp THEN 
            -- reached end of frame
            mode_temp := to_signed(16#00#, 8);
          END IF;
      END CASE;
    ELSE 
      valid <= '0';
      payload_tmp <= to_unsigned(0, 64);
      --     new = false;
    END IF;
    indx_next <= indx_temp;
    mode_next <= mode_temp;
    pSize_next <= pSize_temp;
  END PROCESS DMA_Model_Driver_output;


  payload <= std_logic_vector(payload_tmp);

END rtl;

