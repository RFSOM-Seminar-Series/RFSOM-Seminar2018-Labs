-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_Imag_Error.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Imag_Error
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Receiver HDL/Frame Recover/Gardner Timing Recovery/Gardner 
-- TED Blocks/Imag Erro
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_Imag_Error IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        strobe_sum                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable_out2                       :   IN    std_logic;
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En20
        );
END CombinedT_ip_src_Imag_Error;


ARCHITECTURE rtl OF CombinedT_ip_src_Imag_Error IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_TED_Buffer_Update1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          new_data                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          strobe_sum                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Enable_out2                     :   IN    std_logic;
          Middle_Indx                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          oldest                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_TED_Buffer_Update1
    USE ENTITY work.CombinedT_ip_src_TED_Buffer_Update1(rtl);

  -- Signals
  SIGNAL data_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL TED_Buffer_Update1_out1          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL TED_Buffer_Update1_out2          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL TED_Buffer_Update1_out1_signed   : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL TED_Buffer_Update1_out2_signed   : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Sub_out1                         : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En20

BEGIN
  u_TED_Buffer_Update1 : CombinedT_ip_src_TED_Buffer_Update1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              new_data => std_logic_vector(Delay_out1),  -- sfix16_En10
              strobe_sum => strobe_sum,  -- uint8
              Enable_out2 => Enable_out2,
              Middle_Indx => TED_Buffer_Update1_out1,  -- sfix16_En10
              oldest => TED_Buffer_Update1_out2  -- sfix16_En10
              );

  data_signed <= signed(data);

  enb_gated <= Enable_out2 AND enb;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay_out1 <= data_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  TED_Buffer_Update1_out1_signed <= signed(TED_Buffer_Update1_out1);

  TED_Buffer_Update1_out2_signed <= signed(TED_Buffer_Update1_out2);

  Sub_out1 <= TED_Buffer_Update1_out2_signed - data_signed;

  Product1_out1 <= TED_Buffer_Update1_out1_signed * Sub_out1;

  Out1 <= std_logic_vector(Product1_out1);

END rtl;

