-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_Receiver_HDL.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Receiver_HDL
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Receiver HDL
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Receiver_HDL IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        re                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Im                                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Enable                            :   IN    std_logic;
        FRLoopBW                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        EQmu                              :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Scope_Select                      :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        DebugSelector                     :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        bytesOut                          :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        validOut                          :   OUT   std_logic;
        sync                              :   OUT   std_logic;
        payloadLenOut                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        dataRe                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        dataIm                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        validIQ                           :   OUT   std_logic;
        crcErr                            :   OUT   std_logic;
        validCRC                          :   OUT   std_logic;
        endFlag                           :   OUT   std_logic;
        DebugSelection                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END CombinedT_ip_src_Receiver_HDL;


ARCHITECTURE rtl OF CombinedT_ip_src_Receiver_HDL IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Frame_Recover
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          iqIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          iqIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          validIn                         :   IN    std_logic;
          FRLoopBW                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          EQmu                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          ErrorSelector                   :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          validOut                        :   OUT   std_logic;
          frameStart                      :   OUT   std_logic;
          crcEnd                          :   OUT   std_logic;
          bitsOut                         :   OUT   std_logic_vector(0 TO 1);  -- boolean [2]
          packetLen                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          scopes_After_SRRC_signal1_re    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_SRRC_signal1_im    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_SRRC_signal2       :   OUT   std_logic;
          scopes_After_Timing_signal1_re  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_Timing_signal1_im  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_Timing_signal2     :   OUT   std_logic;
          scopes_After_Frequency_signal1_re :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_Frequency_signal1_im :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_Frequency_signal2  :   OUT   std_logic;
          scopes_After_EQ_signal1_re      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_EQ_signal1_im      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_After_EQ_signal2         :   OUT   std_logic;
          scopes_From_Radio_signal1_re    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_From_Radio_signal1_im    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scopes_From_Radio_signal2       :   OUT   std_logic;
          SelectedError                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Viterbi_Decode
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          crcEnd                          :   IN    std_logic;
          Bits                            :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          packetLenIn                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          validOut                        :   OUT   std_logic;
          Decoded_Bits                    :   OUT   std_logic;
          crcEndOut                       :   OUT   std_logic;
          frameStart                      :   OUT   std_logic;
          packetLenOut                    :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_CRC_Check_and_DMA_Pack
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          bits                            :   IN    std_logic;
          endCRC                          :   IN    std_logic;
          startData                       :   IN    std_logic;
          payloadLen                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          byteOut                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          validOut                        :   OUT   std_logic;
          sync                            :   OUT   std_logic;
          payloadLenOut                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          crcBus_err                      :   OUT   std_logic;
          crcBus_valid                    :   OUT   std_logic;
          crcBus_end                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Frame_Recover
    USE ENTITY work.CombinedT_ip_src_Frame_Recover(rtl);

  FOR ALL : CombinedT_ip_src_Viterbi_Decode
    USE ENTITY work.CombinedT_ip_src_Viterbi_Decode(rtl);

  FOR ALL : CombinedT_ip_src_CRC_Check_and_DMA_Pack
    USE ENTITY work.CombinedT_ip_src_CRC_Check_and_DMA_Pack(rtl);

  -- Signals
  SIGNAL Frame_Recover_out1               : std_logic;
  SIGNAL Frame_Recover_out2               : std_logic;
  SIGNAL crcStart                         : std_logic;
  SIGNAL Frame_Recover_out4               : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL packetLenBitsOut                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_SRRC_signal1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_SRRC_signal1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_SRRC_signal2 : std_logic;
  SIGNAL Frame_Recover_out6_After_Timing_signal1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_Timing_signal1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_Timing_signal2 : std_logic;
  SIGNAL Frame_Recover_out6_After_Frequency_signal1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_Frequency_signal1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_Frequency_signal2 : std_logic;
  SIGNAL Frame_Recover_out6_After_EQ_signal1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_EQ_signal1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_After_EQ_signal2 : std_logic;
  SIGNAL Frame_Recover_out6_From_Radio_signal1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_From_Radio_signal1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Frame_Recover_out6_From_Radio_signal2 : std_logic;
  SIGNAL Frame_Recover_out7               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pipeline_Delay_out1              : std_logic;
  SIGNAL Pipeline_Delay1_out1             : std_logic;
  SIGNAL Pipeline_Delay2_out1             : std_logic;
  SIGNAL packetLenBitsOut_unsigned        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Pipeline_Delay3_out1             : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL Pipeline_Delay4_out1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Viterbi_Decode_out1              : std_logic;
  SIGNAL Viterbi_Decode_out2              : std_logic;
  SIGNAL Viterbi_Decode_out3              : std_logic;
  SIGNAL Viterbi_Decode_out4              : std_logic;
  SIGNAL Viterbi_Decode_out5              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Pipeline_Delay5_out1             : std_logic;
  SIGNAL Pipeline_Delay6_out1             : std_logic;
  SIGNAL Pipeline_Delay7_out1             : std_logic;
  SIGNAL Viterbi_Decode_out5_unsigned     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Pipeline_Delay8_out1             : std_logic;
  SIGNAL Pipeline_Delay9_out1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL byteOut                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL startOut                         : std_logic;
  SIGNAL CRC_Check_and_DMA_Pack_out4      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL CRC_Check_and_DMA_Pack_out5_err  : std_logic;
  SIGNAL CRC_Check_and_DMA_Pack_out5_valid : std_logic;
  SIGNAL CRC_Check_and_DMA_Pack_out5_end  : std_logic;
  SIGNAL Scope_Select_signed              : signed(7 DOWNTO 0);  -- int8
  SIGNAL reduced_reg                      : vector_of_signed8(0 TO 5);  -- sfix8 [6]
  SIGNAL Scope_Select_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL k0                               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Multiport_Switch_In1_zp          : signed(7 DOWNTO 0);  -- int8
  SIGNAL Frame_Recover_out6_After_SRRC_signal1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_SRRC_signal1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_Timing_signal1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_Timing_signal1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_Frequency_signal1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_Frequency_signal1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_EQ_signal1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_After_EQ_signal1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_From_Radio_signal1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Frame_Recover_out6_From_Radio_signal1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL signal1_re                       : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL signal1_im                       : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL signal1_re_1                     : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL signal1_im_1                     : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL SelectorR                        : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL SelectorI                        : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL k0_1                             : signed(7 DOWNTO 0);  -- int8
  SIGNAL Multiport_Switch_In1_zp_1        : signed(7 DOWNTO 0);  -- int8
  SIGNAL signal2                          : std_logic;
  SIGNAL signal2_1                        : std_logic;
  SIGNAL err                              : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL end_rsvd                         : std_logic;

BEGIN
  u_Frame_Recover : CombinedT_ip_src_Frame_Recover
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              iqIn_re => re,  -- int16
              iqIn_im => Im,  -- int16
              validIn => Enable,
              FRLoopBW => FRLoopBW,  -- int16
              EQmu => EQmu,  -- int16
              ErrorSelector => DebugSelector,  -- int8
              validOut => Frame_Recover_out1,
              frameStart => Frame_Recover_out2,
              crcEnd => crcStart,
              bitsOut => Frame_Recover_out4,  -- boolean [2]
              packetLen => packetLenBitsOut,  -- uint16
              scopes_After_SRRC_signal1_re => Frame_Recover_out6_After_SRRC_signal1_re,  -- sfix16_En13
              scopes_After_SRRC_signal1_im => Frame_Recover_out6_After_SRRC_signal1_im,  -- sfix16_En13
              scopes_After_SRRC_signal2 => Frame_Recover_out6_After_SRRC_signal2,
              scopes_After_Timing_signal1_re => Frame_Recover_out6_After_Timing_signal1_re,  -- sfix16_En13
              scopes_After_Timing_signal1_im => Frame_Recover_out6_After_Timing_signal1_im,  -- sfix16_En13
              scopes_After_Timing_signal2 => Frame_Recover_out6_After_Timing_signal2,
              scopes_After_Frequency_signal1_re => Frame_Recover_out6_After_Frequency_signal1_re,  -- sfix16_En13
              scopes_After_Frequency_signal1_im => Frame_Recover_out6_After_Frequency_signal1_im,  -- sfix16_En13
              scopes_After_Frequency_signal2 => Frame_Recover_out6_After_Frequency_signal2,
              scopes_After_EQ_signal1_re => Frame_Recover_out6_After_EQ_signal1_re,  -- sfix16_En13
              scopes_After_EQ_signal1_im => Frame_Recover_out6_After_EQ_signal1_im,  -- sfix16_En13
              scopes_After_EQ_signal2 => Frame_Recover_out6_After_EQ_signal2,
              scopes_From_Radio_signal1_re => Frame_Recover_out6_From_Radio_signal1_re,  -- sfix16_En13
              scopes_From_Radio_signal1_im => Frame_Recover_out6_From_Radio_signal1_im,  -- sfix16_En13
              scopes_From_Radio_signal2 => Frame_Recover_out6_From_Radio_signal2,
              SelectedError => Frame_Recover_out7  -- uint32
              );

  u_Viterbi_Decode : CombinedT_ip_src_Viterbi_Decode
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validIn => Pipeline_Delay_out1,
              reset_1 => Pipeline_Delay1_out1,
              crcEnd => Pipeline_Delay2_out1,
              Bits => Pipeline_Delay3_out1,  -- boolean [2]
              packetLenIn => std_logic_vector(Pipeline_Delay4_out1),  -- uint16
              validOut => Viterbi_Decode_out1,
              Decoded_Bits => Viterbi_Decode_out2,
              crcEndOut => Viterbi_Decode_out3,
              frameStart => Viterbi_Decode_out4,
              packetLenOut => Viterbi_Decode_out5  -- uint16
              );

  u_CRC_Check_and_DMA_Pack : CombinedT_ip_src_CRC_Check_and_DMA_Pack
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validIn => Pipeline_Delay5_out1,
              bits => Pipeline_Delay6_out1,
              endCRC => Pipeline_Delay7_out1,
              startData => Pipeline_Delay8_out1,
              payloadLen => std_logic_vector(Pipeline_Delay9_out1),  -- uint16
              byteOut => byteOut,  -- ufix64
              validOut => validOut,
              sync => startOut,
              payloadLenOut => CRC_Check_and_DMA_Pack_out4,  -- uint16
              crcBus_err => CRC_Check_and_DMA_Pack_out5_err,
              crcBus_valid => CRC_Check_and_DMA_Pack_out5_valid,
              crcBus_end => CRC_Check_and_DMA_Pack_out5_end
              );

  Pipeline_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay_out1 <= Frame_Recover_out1;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay_process;


  Pipeline_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay1_out1 <= Frame_Recover_out2;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay1_process;


  Pipeline_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay2_out1 <= crcStart;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay2_process;


  packetLenBitsOut_unsigned <= unsigned(packetLenBitsOut);

  Pipeline_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay3_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay3_out1 <= Frame_Recover_out4;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay3_process;


  Pipeline_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay4_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay4_out1 <= packetLenBitsOut_unsigned;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay4_process;


  Pipeline_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay5_out1 <= Viterbi_Decode_out1;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay5_process;


  Pipeline_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay6_out1 <= Viterbi_Decode_out2;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay6_process;


  Pipeline_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay7_out1 <= Viterbi_Decode_out3;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay7_process;


  Viterbi_Decode_out5_unsigned <= unsigned(Viterbi_Decode_out5);

  Pipeline_Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay8_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay8_out1 <= Viterbi_Decode_out4;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay8_process;


  Pipeline_Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay9_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay9_out1 <= Viterbi_Decode_out5_unsigned;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay9_process;


  Scope_Select_signed <= signed(Scope_Select);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => to_signed(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg(0) <= Scope_Select_signed;
        reduced_reg(1 TO 5) <= reduced_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Scope_Select_1 <= reduced_reg(5);

  
  switch_compare_1 <= '1' WHEN Scope_Select_1 >= to_signed(16#01#, 8) ELSE
      '0';

  k0 <= to_signed(16#01#, 8);

  
  Multiport_Switch_In1_zp <= k0 WHEN switch_compare_1 = '0' ELSE
      Scope_Select_1;

  Frame_Recover_out6_After_SRRC_signal1_re_signed <= signed(Frame_Recover_out6_After_SRRC_signal1_re);

  Frame_Recover_out6_After_SRRC_signal1_im_signed <= signed(Frame_Recover_out6_After_SRRC_signal1_im);

  Frame_Recover_out6_After_Timing_signal1_re_signed <= signed(Frame_Recover_out6_After_Timing_signal1_re);

  Frame_Recover_out6_After_Timing_signal1_im_signed <= signed(Frame_Recover_out6_After_Timing_signal1_im);

  Frame_Recover_out6_After_Frequency_signal1_re_signed <= signed(Frame_Recover_out6_After_Frequency_signal1_re);

  Frame_Recover_out6_After_Frequency_signal1_im_signed <= signed(Frame_Recover_out6_After_Frequency_signal1_im);

  Frame_Recover_out6_After_EQ_signal1_re_signed <= signed(Frame_Recover_out6_After_EQ_signal1_re);

  Frame_Recover_out6_After_EQ_signal1_im_signed <= signed(Frame_Recover_out6_After_EQ_signal1_im);

  Frame_Recover_out6_From_Radio_signal1_re_signed <= signed(Frame_Recover_out6_From_Radio_signal1_re);

  Frame_Recover_out6_From_Radio_signal1_im_signed <= signed(Frame_Recover_out6_From_Radio_signal1_im);

  
  signal1_re <= Frame_Recover_out6_After_SRRC_signal1_re_signed WHEN Multiport_Switch_In1_zp = to_signed(16#01#, 8) ELSE
      Frame_Recover_out6_After_Timing_signal1_re_signed WHEN Multiport_Switch_In1_zp = to_signed(16#02#, 8) ELSE
      Frame_Recover_out6_After_Frequency_signal1_re_signed WHEN Multiport_Switch_In1_zp = to_signed(16#03#, 8) ELSE
      Frame_Recover_out6_After_EQ_signal1_re_signed WHEN Multiport_Switch_In1_zp = to_signed(16#04#, 8) ELSE
      Frame_Recover_out6_From_Radio_signal1_re_signed;
  
  signal1_im <= Frame_Recover_out6_After_SRRC_signal1_im_signed WHEN Multiport_Switch_In1_zp = to_signed(16#01#, 8) ELSE
      Frame_Recover_out6_After_Timing_signal1_im_signed WHEN Multiport_Switch_In1_zp = to_signed(16#02#, 8) ELSE
      Frame_Recover_out6_After_Frequency_signal1_im_signed WHEN Multiport_Switch_In1_zp = to_signed(16#03#, 8) ELSE
      Frame_Recover_out6_After_EQ_signal1_im_signed WHEN Multiport_Switch_In1_zp = to_signed(16#04#, 8) ELSE
      Frame_Recover_out6_From_Radio_signal1_im_signed;

  signal1_re_1 <= signal1_re;

  SelectorR <= signal1_re_1;

  dataRe <= std_logic_vector(SelectorR);

  signal1_im_1 <= signal1_im;

  SelectorI <= signal1_im_1;

  dataIm <= std_logic_vector(SelectorI);

  
  switch_compare_1_1 <= '1' WHEN Scope_Select_1 >= to_signed(16#01#, 8) ELSE
      '0';

  k0_1 <= to_signed(16#01#, 8);

  
  Multiport_Switch_In1_zp_1 <= k0_1 WHEN switch_compare_1_1 = '0' ELSE
      Scope_Select_1;

  
  signal2 <= Frame_Recover_out6_After_SRRC_signal2 WHEN Multiport_Switch_In1_zp_1 = to_signed(16#01#, 8) ELSE
      Frame_Recover_out6_After_Timing_signal2 WHEN Multiport_Switch_In1_zp_1 = to_signed(16#02#, 8) ELSE
      Frame_Recover_out6_After_Frequency_signal2 WHEN Multiport_Switch_In1_zp_1 = to_signed(16#03#, 8) ELSE
      Frame_Recover_out6_After_EQ_signal2 WHEN Multiport_Switch_In1_zp_1 = to_signed(16#04#, 8) ELSE
      Frame_Recover_out6_From_Radio_signal2;

  signal2_1 <= signal2;

  err <= CRC_Check_and_DMA_Pack_out5_err;

  valid <= CRC_Check_and_DMA_Pack_out5_valid;

  end_rsvd <= CRC_Check_and_DMA_Pack_out5_end;

  bytesOut <= byteOut;

  sync <= startOut;

  payloadLenOut <= CRC_Check_and_DMA_Pack_out4;

  validIQ <= signal2_1;

  crcErr <= err;

  validCRC <= valid;

  endFlag <= end_rsvd;

  DebugSelection <= Frame_Recover_out7;

END rtl;

