-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_AXIMM\CombinedT_ip_src_Phase_Shift_FP.vhd
-- Created: 2018-02-01 18:12:06
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Phase_Shift_FP
-- Source Path: combinedTxRx_AXIMM/Combined TX and RX/Receiver HDL/Frame Recover/Frequency Recovery/Phase Shift FP
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_Phase_Shift_FP IS
  PORT( In1_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        In1_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        Phi                               :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En20
        Out1_re                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        Out1_im                           :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En13
        );
END CombinedT_ip_src_Phase_Shift_FP;


ARCHITECTURE rtl OF CombinedT_ip_src_Phase_Shift_FP IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Cosine_HDL_Optimized
    PORT( u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          x_re                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          x_im                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En20
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Cosine_HDL_Optimized
    USE ENTITY work.CombinedT_ip_src_Cosine_HDL_Optimized(rtl);

  -- Signals
  SIGNAL In1_re_signed                    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL In1_im_signed                    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Phi_signed                       : signed(24 DOWNTO 0);  -- sfix25_En20
  SIGNAL Gain_mul_temp                    : signed(49 DOWNTO 0);  -- sfix50_En40
  SIGNAL Gain_out1                        : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Cosine_HDL_Optimized_out1_re     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Cosine_HDL_Optimized_out1_im     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Cosine_HDL_Optimized_out1_re_signed : signed(31 DOWNTO 0);  -- sfix32_En20
  SIGNAL Cosine_HDL_Optimized_out1_im_signed : signed(31 DOWNTO 0);  -- sfix32_En20
  SIGNAL Product_mul_temp                 : signed(47 DOWNTO 0);  -- sfix48_En30
  SIGNAL Product_Re_AC                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Product2_mul_temp                : signed(47 DOWNTO 0);  -- sfix48_En30
  SIGNAL Product_Re_BD                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Product_AC_minus_BD_sub_cast     : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL Product_AC_minus_BD_sub_cast_1   : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL Product_AC_minus_BD_sub_temp     : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL mulOutput                        : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Product1_mul_temp                : signed(47 DOWNTO 0);  -- sfix48_En30
  SIGNAL Product_Im_AD                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Product3_mul_temp                : signed(47 DOWNTO 0);  -- sfix48_En30
  SIGNAL Product_Im_BC                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Product_AD_plus_BC_add_cast      : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL Product_AD_plus_BC_add_cast_1    : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL Product_AD_plus_BC_add_temp      : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL mulOutput_1                      : signed(15 DOWNTO 0);  -- sfix16_En13

BEGIN
  -- Sign Comes from original
  -- loop filter design

  u_Cosine_HDL_Optimized : CombinedT_ip_src_Cosine_HDL_Optimized
    PORT MAP( u => std_logic_vector(Gain_out1),  -- sfix16_En12
              x_re => Cosine_HDL_Optimized_out1_re,  -- sfix32_En20
              x_im => Cosine_HDL_Optimized_out1_im  -- sfix32_En20
              );

  In1_re_signed <= signed(In1_re);

  Phi_signed <= signed(Phi);

  Gain_mul_temp <= to_signed(-16#0028BE6#, 25) * Phi_signed;
  
  Gain_out1 <= X"7FFF" WHEN (Gain_mul_temp(49) = '0') AND (Gain_mul_temp(48 DOWNTO 43) /= "000000") ELSE
      X"8000" WHEN (Gain_mul_temp(49) = '1') AND (Gain_mul_temp(48 DOWNTO 43) /= "111111") ELSE
      Gain_mul_temp(43 DOWNTO 28);

  Cosine_HDL_Optimized_out1_re_signed <= signed(Cosine_HDL_Optimized_out1_re);

  Product_mul_temp <= In1_re_signed * Cosine_HDL_Optimized_out1_re_signed;
  
  Product_Re_AC <= X"7FFF" WHEN (Product_mul_temp(47) = '0') AND (Product_mul_temp(46 DOWNTO 32) /= "000000000000000") ELSE
      X"8000" WHEN (Product_mul_temp(47) = '1') AND (Product_mul_temp(46 DOWNTO 32) /= "111111111111111") ELSE
      Product_mul_temp(32 DOWNTO 17);

  In1_im_signed <= signed(In1_im);

  Cosine_HDL_Optimized_out1_im_signed <= signed(Cosine_HDL_Optimized_out1_im);

  Product2_mul_temp <= In1_im_signed * Cosine_HDL_Optimized_out1_im_signed;
  
  Product_Re_BD <= X"7FFF" WHEN (Product2_mul_temp(47) = '0') AND (Product2_mul_temp(46 DOWNTO 32) /= "000000000000000") ELSE
      X"8000" WHEN (Product2_mul_temp(47) = '1') AND (Product2_mul_temp(46 DOWNTO 32) /= "111111111111111") ELSE
      Product2_mul_temp(32 DOWNTO 17);

  Product_AC_minus_BD_sub_cast <= resize(Product_Re_AC, 17);
  Product_AC_minus_BD_sub_cast_1 <= resize(Product_Re_BD, 17);
  Product_AC_minus_BD_sub_temp <= Product_AC_minus_BD_sub_cast - Product_AC_minus_BD_sub_cast_1;
  
  mulOutput <= X"7FFF" WHEN (Product_AC_minus_BD_sub_temp(16) = '0') AND (Product_AC_minus_BD_sub_temp(15) /= '0') ELSE
      X"8000" WHEN (Product_AC_minus_BD_sub_temp(16) = '1') AND (Product_AC_minus_BD_sub_temp(15) /= '1') ELSE
      Product_AC_minus_BD_sub_temp(15 DOWNTO 0);

  Out1_re <= std_logic_vector(mulOutput);

  Product1_mul_temp <= In1_re_signed * Cosine_HDL_Optimized_out1_im_signed;
  
  Product_Im_AD <= X"7FFF" WHEN (Product1_mul_temp(47) = '0') AND (Product1_mul_temp(46 DOWNTO 32) /= "000000000000000") ELSE
      X"8000" WHEN (Product1_mul_temp(47) = '1') AND (Product1_mul_temp(46 DOWNTO 32) /= "111111111111111") ELSE
      Product1_mul_temp(32 DOWNTO 17);

  Product3_mul_temp <= In1_im_signed * Cosine_HDL_Optimized_out1_re_signed;
  
  Product_Im_BC <= X"7FFF" WHEN (Product3_mul_temp(47) = '0') AND (Product3_mul_temp(46 DOWNTO 32) /= "000000000000000") ELSE
      X"8000" WHEN (Product3_mul_temp(47) = '1') AND (Product3_mul_temp(46 DOWNTO 32) /= "111111111111111") ELSE
      Product3_mul_temp(32 DOWNTO 17);

  Product_AD_plus_BC_add_cast <= resize(Product_Im_AD, 17);
  Product_AD_plus_BC_add_cast_1 <= resize(Product_Im_BC, 17);
  Product_AD_plus_BC_add_temp <= Product_AD_plus_BC_add_cast + Product_AD_plus_BC_add_cast_1;
  
  mulOutput_1 <= X"7FFF" WHEN (Product_AD_plus_BC_add_temp(16) = '0') AND (Product_AD_plus_BC_add_temp(15) /= '0') ELSE
      X"8000" WHEN (Product_AD_plus_BC_add_temp(16) = '1') AND (Product_AD_plus_BC_add_temp(15) /= '1') ELSE
      Product_AD_plus_BC_add_temp(15 DOWNTO 0);

  Out1_im <= std_logic_vector(mulOutput_1);

END rtl;

