-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_StandardIQ\CombinedT_ip_src_Random_Data.vhd
-- Created: 2018-02-01 11:49:53
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Random_Data
-- Source Path: combinedTxRx_StandardIQ/Combined TX and RX/Transmitter HDL/Packet Generation/Random Data
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Random_Data IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        In1                               :   IN    std_logic;
        Out1                              :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
        );
END CombinedT_ip_src_Random_Data;


ARCHITECTURE rtl OF CombinedT_ip_src_Random_Data IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Unpack
    PORT( In1                             :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Out1                            :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Unpack
    USE ENTITY work.CombinedT_ip_src_Unpack(rtl);

  -- Constants
  CONSTANT C_PNGEN_REG_INIT_VAL           : unsigned(9 DOWNTO 0) := 
    "0010010011";  -- ufix10

  -- Signals
  SIGNAL Random_Data_Gen1_out1            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Unpack_out1                      : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL pn_reg                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL pn_out                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL pn_xorout                        : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL pn_newvalue                      : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL pn_value_shifted                 : vector_of_unsigned9(0 TO 1);  -- ufix9_E1 [2]

BEGIN
  u_Unpack : CombinedT_ip_src_Unpack
    PORT MAP( In1 => std_logic_vector(Random_Data_Gen1_out1),  -- ufix2
              Out1 => Unpack_out1  -- boolean [2]
              );

  pn_newvalue(0) <= C_PNGEN_REG_INIT_VAL WHEN ( In1 = '1' ) ELSE
                    pn_reg;

--**stage 1
  pn_xorout(0) <= pn_newvalue(0)(0) XOR pn_newvalue(0)(7);

  pn_value_shifted(0) <= pn_newvalue(0)(9 DOWNTO 1);

  pn_newvalue(1) <= pn_xorout(0) & pn_value_shifted(0);

  pn_out(1) <= pn_newvalue(0)(0);

--**stage 2
  pn_xorout(1) <= pn_newvalue(1)(0) XOR pn_newvalue(1)(7);

  pn_value_shifted(1) <= pn_newvalue(1)(9 DOWNTO 1);

  pn_newvalue(2) <= pn_xorout(1) & pn_value_shifted(1);

  pn_out(0) <= pn_newvalue(1)(0);

  PN_generation_temp_process4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pn_reg <= to_unsigned(147, 10);
    ELSIF clk'event AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        pn_reg <= pn_newvalue(2);
      END IF;
    END IF; 
  END PROCESS PN_generation_temp_process4;

  Random_Data_Gen1_out1 <= pn_out;


  Out1 <= Unpack_out1;

END rtl;

