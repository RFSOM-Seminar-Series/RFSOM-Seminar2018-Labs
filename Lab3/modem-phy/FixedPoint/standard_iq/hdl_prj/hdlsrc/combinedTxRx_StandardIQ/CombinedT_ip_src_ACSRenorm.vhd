-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_StandardIQ\CombinedT_ip_src_ACSRenorm.vhd
-- Created: 2018-02-01 11:49:53
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_ACSRenorm
-- Source Path: combinedTxRx_StandardIQ/Combined TX and RX/Receiver HDL/Viterbi Decode/Viterbi Decoder/ACS/ACSRenorm
-- Hierarchy Level: 5
-- 
-- Calculates the minimum state metric value
-- Compares the minimum value to the threshold parameter
-- If the minimum value is greater than or equal to the threshold value, 
-- returns the step parameter; otherwise returns zero
-- 
-- State Metric Renormalization
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_ACSRenorm IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        stMet                             :   IN    vector_of_std_logic_vector5(0 TO 63);  -- ufix5 [64]
        normval                           :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
        idx                               :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
        );
END CombinedT_ip_src_ACSRenorm;


ARCHITECTURE rtl OF CombinedT_ip_src_ACSRenorm IS

  -- Constants
  CONSTANT nc                             : vector_of_unsigned5(0 TO 63) := 
    (to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#00#, 5));  -- ufix5 [64]
  CONSTANT nc_2                           : vector_of_unsigned5(0 TO 63) := 
    (to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#00#, 5));  -- ufix5 [64]

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL stMet_unsigned                   : vector_of_unsigned5(0 TO 63);  -- ufix5 [64]
  SIGNAL dstMet                           : vector_of_unsigned5(0 TO 63);  -- ufix5 [64]
  SIGNAL stMet_reorder                    : vector_of_unsigned5(0 TO 63);  -- ufix5 [64]
  SIGNAL dstMet_reorder                   : vector_of_unsigned5(0 TO 63);  -- ufix5 [64]
  SIGNAL const_idx                        : vector_of_unsigned6(0 TO 63);  -- ufix6 [64]
  SIGNAL MinimumTree_treestage1_isless    : std_logic_vector(0 TO 31);  -- boolean [32]
  SIGNAL MinimumTree_stage1_val           : vector_of_unsigned5(0 TO 31);  -- ufix5 [32]
  SIGNAL MinimumTree_stage1_idx           : vector_of_unsigned6(0 TO 31);  -- ufix6 [32]
  SIGNAL MinimumTree_stage1_val_reg       : vector_of_unsigned5(0 TO 31);  -- ufix5 [32]
  SIGNAL MinimumTree_stage1_idx_reg       : vector_of_unsigned6(0 TO 31);  -- ufix6 [32]
  SIGNAL MinimumTree_treestage2_isless    : std_logic_vector(0 TO 15);  -- boolean [16]
  SIGNAL MinimumTree_stage2_val           : vector_of_unsigned5(0 TO 15);  -- ufix5 [16]
  SIGNAL MinimumTree_stage2_idx           : vector_of_unsigned6(0 TO 15);  -- ufix6 [16]
  SIGNAL MinimumTree_stage2_val_reg       : vector_of_unsigned5(0 TO 15);  -- ufix5 [16]
  SIGNAL MinimumTree_stage2_idx_reg       : vector_of_unsigned6(0 TO 15);  -- ufix6 [16]
  SIGNAL MinimumTree_treestage3_isless    : std_logic_vector(0 TO 7);  -- boolean [8]
  SIGNAL MinimumTree_stage3_val           : vector_of_unsigned5(0 TO 7);  -- ufix5 [8]
  SIGNAL MinimumTree_stage3_idx           : vector_of_unsigned6(0 TO 7);  -- ufix6 [8]
  SIGNAL MinimumTree_stage3_val_reg       : vector_of_unsigned5(0 TO 7);  -- ufix5 [8]
  SIGNAL MinimumTree_stage3_idx_reg       : vector_of_unsigned6(0 TO 7);  -- ufix6 [8]
  SIGNAL MinimumTree_treestage4_isless    : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL MinimumTree_stage4_val           : vector_of_unsigned5(0 TO 3);  -- ufix5 [4]
  SIGNAL MinimumTree_stage4_idx           : vector_of_unsigned6(0 TO 3);  -- ufix6 [4]
  SIGNAL MinimumTree_stage4_val_reg       : vector_of_unsigned5(0 TO 3);  -- ufix5 [4]
  SIGNAL MinimumTree_stage4_idx_reg       : vector_of_unsigned6(0 TO 3);  -- ufix6 [4]
  SIGNAL MinimumTree_treestage5_isless    : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL MinimumTree_stage5_val           : vector_of_unsigned5(0 TO 1);  -- ufix5 [2]
  SIGNAL MinimumTree_stage5_idx           : vector_of_unsigned6(0 TO 1);  -- ufix6 [2]
  SIGNAL MinimumTree_stage5_val_reg       : vector_of_unsigned5(0 TO 1);  -- ufix5 [2]
  SIGNAL MinimumTree_stage5_idx_reg       : vector_of_unsigned6(0 TO 1);  -- ufix6 [2]
  SIGNAL MinimumTree_treestage6_isless    : std_logic;
  SIGNAL MinimumTree_stage6_val           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL MinimumTree_stage6_idx           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL MinimumTree_stage6_val_reg       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL sel                              : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL conststep                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL constzero                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL normval_tmp                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL idxmax                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL MinimumTree_stage6_idx_reg       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL idx_tmp                          : unsigned(5 DOWNTO 0);  -- ufix6

BEGIN
  outputgen: FOR k IN 0 TO 63 GENERATE
    stMet_unsigned(k) <= unsigned(stMet(k));
  END GENERATE;

  -- Add input register for state metric
  stMetRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dstMet <= nc;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dstMet <= stMet_unsigned;
      END IF;
    END IF;
  END PROCESS stMetRegister_process;


  -- Reorder state metric to match the minimum idx search
  stMet_reorder(0) <= dstMet(63);
  stMet_reorder(1) <= dstMet(62);
  stMet_reorder(2) <= dstMet(61);
  stMet_reorder(3) <= dstMet(60);
  stMet_reorder(4) <= dstMet(59);
  stMet_reorder(5) <= dstMet(58);
  stMet_reorder(6) <= dstMet(57);
  stMet_reorder(7) <= dstMet(56);
  stMet_reorder(8) <= dstMet(55);
  stMet_reorder(9) <= dstMet(54);
  stMet_reorder(10) <= dstMet(53);
  stMet_reorder(11) <= dstMet(52);
  stMet_reorder(12) <= dstMet(51);
  stMet_reorder(13) <= dstMet(50);
  stMet_reorder(14) <= dstMet(49);
  stMet_reorder(15) <= dstMet(48);
  stMet_reorder(16) <= dstMet(47);
  stMet_reorder(17) <= dstMet(46);
  stMet_reorder(18) <= dstMet(45);
  stMet_reorder(19) <= dstMet(44);
  stMet_reorder(20) <= dstMet(43);
  stMet_reorder(21) <= dstMet(42);
  stMet_reorder(22) <= dstMet(41);
  stMet_reorder(23) <= dstMet(40);
  stMet_reorder(24) <= dstMet(39);
  stMet_reorder(25) <= dstMet(38);
  stMet_reorder(26) <= dstMet(37);
  stMet_reorder(27) <= dstMet(36);
  stMet_reorder(28) <= dstMet(35);
  stMet_reorder(29) <= dstMet(34);
  stMet_reorder(30) <= dstMet(33);
  stMet_reorder(31) <= dstMet(32);
  stMet_reorder(32) <= dstMet(31);
  stMet_reorder(33) <= dstMet(30);
  stMet_reorder(34) <= dstMet(29);
  stMet_reorder(35) <= dstMet(28);
  stMet_reorder(36) <= dstMet(27);
  stMet_reorder(37) <= dstMet(26);
  stMet_reorder(38) <= dstMet(25);
  stMet_reorder(39) <= dstMet(24);
  stMet_reorder(40) <= dstMet(23);
  stMet_reorder(41) <= dstMet(22);
  stMet_reorder(42) <= dstMet(21);
  stMet_reorder(43) <= dstMet(20);
  stMet_reorder(44) <= dstMet(19);
  stMet_reorder(45) <= dstMet(18);
  stMet_reorder(46) <= dstMet(17);
  stMet_reorder(47) <= dstMet(16);
  stMet_reorder(48) <= dstMet(15);
  stMet_reorder(49) <= dstMet(14);
  stMet_reorder(50) <= dstMet(13);
  stMet_reorder(51) <= dstMet(12);
  stMet_reorder(52) <= dstMet(11);
  stMet_reorder(53) <= dstMet(10);
  stMet_reorder(54) <= dstMet(9);
  stMet_reorder(55) <= dstMet(8);
  stMet_reorder(56) <= dstMet(7);
  stMet_reorder(57) <= dstMet(6);
  stMet_reorder(58) <= dstMet(5);
  stMet_reorder(59) <= dstMet(4);
  stMet_reorder(60) <= dstMet(3);
  stMet_reorder(61) <= dstMet(2);
  stMet_reorder(62) <= dstMet(1);
  stMet_reorder(63) <= dstMet(0);

  MininputRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dstMet_reorder <= nc_2;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dstMet_reorder <= stMet_reorder;
      END IF;
    END IF;
  END PROCESS MininputRegister_process;


  const_idx(0) <= to_unsigned(16#00#, 6);
  const_idx(1) <= to_unsigned(16#01#, 6);
  const_idx(2) <= to_unsigned(16#02#, 6);
  const_idx(3) <= to_unsigned(16#03#, 6);
  const_idx(4) <= to_unsigned(16#04#, 6);
  const_idx(5) <= to_unsigned(16#05#, 6);
  const_idx(6) <= to_unsigned(16#06#, 6);
  const_idx(7) <= to_unsigned(16#07#, 6);
  const_idx(8) <= to_unsigned(16#08#, 6);
  const_idx(9) <= to_unsigned(16#09#, 6);
  const_idx(10) <= to_unsigned(16#0A#, 6);
  const_idx(11) <= to_unsigned(16#0B#, 6);
  const_idx(12) <= to_unsigned(16#0C#, 6);
  const_idx(13) <= to_unsigned(16#0D#, 6);
  const_idx(14) <= to_unsigned(16#0E#, 6);
  const_idx(15) <= to_unsigned(16#0F#, 6);
  const_idx(16) <= to_unsigned(16#10#, 6);
  const_idx(17) <= to_unsigned(16#11#, 6);
  const_idx(18) <= to_unsigned(16#12#, 6);
  const_idx(19) <= to_unsigned(16#13#, 6);
  const_idx(20) <= to_unsigned(16#14#, 6);
  const_idx(21) <= to_unsigned(16#15#, 6);
  const_idx(22) <= to_unsigned(16#16#, 6);
  const_idx(23) <= to_unsigned(16#17#, 6);
  const_idx(24) <= to_unsigned(16#18#, 6);
  const_idx(25) <= to_unsigned(16#19#, 6);
  const_idx(26) <= to_unsigned(16#1A#, 6);
  const_idx(27) <= to_unsigned(16#1B#, 6);
  const_idx(28) <= to_unsigned(16#1C#, 6);
  const_idx(29) <= to_unsigned(16#1D#, 6);
  const_idx(30) <= to_unsigned(16#1E#, 6);
  const_idx(31) <= to_unsigned(16#1F#, 6);
  const_idx(32) <= to_unsigned(16#20#, 6);
  const_idx(33) <= to_unsigned(16#21#, 6);
  const_idx(34) <= to_unsigned(16#22#, 6);
  const_idx(35) <= to_unsigned(16#23#, 6);
  const_idx(36) <= to_unsigned(16#24#, 6);
  const_idx(37) <= to_unsigned(16#25#, 6);
  const_idx(38) <= to_unsigned(16#26#, 6);
  const_idx(39) <= to_unsigned(16#27#, 6);
  const_idx(40) <= to_unsigned(16#28#, 6);
  const_idx(41) <= to_unsigned(16#29#, 6);
  const_idx(42) <= to_unsigned(16#2A#, 6);
  const_idx(43) <= to_unsigned(16#2B#, 6);
  const_idx(44) <= to_unsigned(16#2C#, 6);
  const_idx(45) <= to_unsigned(16#2D#, 6);
  const_idx(46) <= to_unsigned(16#2E#, 6);
  const_idx(47) <= to_unsigned(16#2F#, 6);
  const_idx(48) <= to_unsigned(16#30#, 6);
  const_idx(49) <= to_unsigned(16#31#, 6);
  const_idx(50) <= to_unsigned(16#32#, 6);
  const_idx(51) <= to_unsigned(16#33#, 6);
  const_idx(52) <= to_unsigned(16#34#, 6);
  const_idx(53) <= to_unsigned(16#35#, 6);
  const_idx(54) <= to_unsigned(16#36#, 6);
  const_idx(55) <= to_unsigned(16#37#, 6);
  const_idx(56) <= to_unsigned(16#38#, 6);
  const_idx(57) <= to_unsigned(16#39#, 6);
  const_idx(58) <= to_unsigned(16#3A#, 6);
  const_idx(59) <= to_unsigned(16#3B#, 6);
  const_idx(60) <= to_unsigned(16#3C#, 6);
  const_idx(61) <= to_unsigned(16#3D#, 6);
  const_idx(62) <= to_unsigned(16#3E#, 6);
  const_idx(63) <= to_unsigned(16#3F#, 6);

  ---- Tree min implementation ----
  ---- Tree min stage 1 ----
  
  MinimumTree_treestage1_isless(0) <= '1' WHEN dstMet_reorder(0) <= dstMet_reorder(1) ELSE
      '0';
  
  MinimumTree_stage1_val(0) <= dstMet_reorder(0) WHEN MinimumTree_treestage1_isless(0) = '1' ELSE
      dstMet_reorder(1);
  
  MinimumTree_stage1_idx(0) <= const_idx(0) WHEN MinimumTree_treestage1_isless(0) = '1' ELSE
      const_idx(1);
  
  MinimumTree_treestage1_isless(1) <= '1' WHEN dstMet_reorder(2) <= dstMet_reorder(3) ELSE
      '0';
  
  MinimumTree_stage1_val(1) <= dstMet_reorder(2) WHEN MinimumTree_treestage1_isless(1) = '1' ELSE
      dstMet_reorder(3);
  
  MinimumTree_stage1_idx(1) <= const_idx(2) WHEN MinimumTree_treestage1_isless(1) = '1' ELSE
      const_idx(3);
  
  MinimumTree_treestage1_isless(2) <= '1' WHEN dstMet_reorder(4) <= dstMet_reorder(5) ELSE
      '0';
  
  MinimumTree_stage1_val(2) <= dstMet_reorder(4) WHEN MinimumTree_treestage1_isless(2) = '1' ELSE
      dstMet_reorder(5);
  
  MinimumTree_stage1_idx(2) <= const_idx(4) WHEN MinimumTree_treestage1_isless(2) = '1' ELSE
      const_idx(5);
  
  MinimumTree_treestage1_isless(3) <= '1' WHEN dstMet_reorder(6) <= dstMet_reorder(7) ELSE
      '0';
  
  MinimumTree_stage1_val(3) <= dstMet_reorder(6) WHEN MinimumTree_treestage1_isless(3) = '1' ELSE
      dstMet_reorder(7);
  
  MinimumTree_stage1_idx(3) <= const_idx(6) WHEN MinimumTree_treestage1_isless(3) = '1' ELSE
      const_idx(7);
  
  MinimumTree_treestage1_isless(4) <= '1' WHEN dstMet_reorder(8) <= dstMet_reorder(9) ELSE
      '0';
  
  MinimumTree_stage1_val(4) <= dstMet_reorder(8) WHEN MinimumTree_treestage1_isless(4) = '1' ELSE
      dstMet_reorder(9);
  
  MinimumTree_stage1_idx(4) <= const_idx(8) WHEN MinimumTree_treestage1_isless(4) = '1' ELSE
      const_idx(9);
  
  MinimumTree_treestage1_isless(5) <= '1' WHEN dstMet_reorder(10) <= dstMet_reorder(11) ELSE
      '0';
  
  MinimumTree_stage1_val(5) <= dstMet_reorder(10) WHEN MinimumTree_treestage1_isless(5) = '1' ELSE
      dstMet_reorder(11);
  
  MinimumTree_stage1_idx(5) <= const_idx(10) WHEN MinimumTree_treestage1_isless(5) = '1' ELSE
      const_idx(11);
  
  MinimumTree_treestage1_isless(6) <= '1' WHEN dstMet_reorder(12) <= dstMet_reorder(13) ELSE
      '0';
  
  MinimumTree_stage1_val(6) <= dstMet_reorder(12) WHEN MinimumTree_treestage1_isless(6) = '1' ELSE
      dstMet_reorder(13);
  
  MinimumTree_stage1_idx(6) <= const_idx(12) WHEN MinimumTree_treestage1_isless(6) = '1' ELSE
      const_idx(13);
  
  MinimumTree_treestage1_isless(7) <= '1' WHEN dstMet_reorder(14) <= dstMet_reorder(15) ELSE
      '0';
  
  MinimumTree_stage1_val(7) <= dstMet_reorder(14) WHEN MinimumTree_treestage1_isless(7) = '1' ELSE
      dstMet_reorder(15);
  
  MinimumTree_stage1_idx(7) <= const_idx(14) WHEN MinimumTree_treestage1_isless(7) = '1' ELSE
      const_idx(15);
  
  MinimumTree_treestage1_isless(8) <= '1' WHEN dstMet_reorder(16) <= dstMet_reorder(17) ELSE
      '0';
  
  MinimumTree_stage1_val(8) <= dstMet_reorder(16) WHEN MinimumTree_treestage1_isless(8) = '1' ELSE
      dstMet_reorder(17);
  
  MinimumTree_stage1_idx(8) <= const_idx(16) WHEN MinimumTree_treestage1_isless(8) = '1' ELSE
      const_idx(17);
  
  MinimumTree_treestage1_isless(9) <= '1' WHEN dstMet_reorder(18) <= dstMet_reorder(19) ELSE
      '0';
  
  MinimumTree_stage1_val(9) <= dstMet_reorder(18) WHEN MinimumTree_treestage1_isless(9) = '1' ELSE
      dstMet_reorder(19);
  
  MinimumTree_stage1_idx(9) <= const_idx(18) WHEN MinimumTree_treestage1_isless(9) = '1' ELSE
      const_idx(19);
  
  MinimumTree_treestage1_isless(10) <= '1' WHEN dstMet_reorder(20) <= dstMet_reorder(21) ELSE
      '0';
  
  MinimumTree_stage1_val(10) <= dstMet_reorder(20) WHEN MinimumTree_treestage1_isless(10) = '1' ELSE
      dstMet_reorder(21);
  
  MinimumTree_stage1_idx(10) <= const_idx(20) WHEN MinimumTree_treestage1_isless(10) = '1' ELSE
      const_idx(21);
  
  MinimumTree_treestage1_isless(11) <= '1' WHEN dstMet_reorder(22) <= dstMet_reorder(23) ELSE
      '0';
  
  MinimumTree_stage1_val(11) <= dstMet_reorder(22) WHEN MinimumTree_treestage1_isless(11) = '1' ELSE
      dstMet_reorder(23);
  
  MinimumTree_stage1_idx(11) <= const_idx(22) WHEN MinimumTree_treestage1_isless(11) = '1' ELSE
      const_idx(23);
  
  MinimumTree_treestage1_isless(12) <= '1' WHEN dstMet_reorder(24) <= dstMet_reorder(25) ELSE
      '0';
  
  MinimumTree_stage1_val(12) <= dstMet_reorder(24) WHEN MinimumTree_treestage1_isless(12) = '1' ELSE
      dstMet_reorder(25);
  
  MinimumTree_stage1_idx(12) <= const_idx(24) WHEN MinimumTree_treestage1_isless(12) = '1' ELSE
      const_idx(25);
  
  MinimumTree_treestage1_isless(13) <= '1' WHEN dstMet_reorder(26) <= dstMet_reorder(27) ELSE
      '0';
  
  MinimumTree_stage1_val(13) <= dstMet_reorder(26) WHEN MinimumTree_treestage1_isless(13) = '1' ELSE
      dstMet_reorder(27);
  
  MinimumTree_stage1_idx(13) <= const_idx(26) WHEN MinimumTree_treestage1_isless(13) = '1' ELSE
      const_idx(27);
  
  MinimumTree_treestage1_isless(14) <= '1' WHEN dstMet_reorder(28) <= dstMet_reorder(29) ELSE
      '0';
  
  MinimumTree_stage1_val(14) <= dstMet_reorder(28) WHEN MinimumTree_treestage1_isless(14) = '1' ELSE
      dstMet_reorder(29);
  
  MinimumTree_stage1_idx(14) <= const_idx(28) WHEN MinimumTree_treestage1_isless(14) = '1' ELSE
      const_idx(29);
  
  MinimumTree_treestage1_isless(15) <= '1' WHEN dstMet_reorder(30) <= dstMet_reorder(31) ELSE
      '0';
  
  MinimumTree_stage1_val(15) <= dstMet_reorder(30) WHEN MinimumTree_treestage1_isless(15) = '1' ELSE
      dstMet_reorder(31);
  
  MinimumTree_stage1_idx(15) <= const_idx(30) WHEN MinimumTree_treestage1_isless(15) = '1' ELSE
      const_idx(31);
  
  MinimumTree_treestage1_isless(16) <= '1' WHEN dstMet_reorder(32) <= dstMet_reorder(33) ELSE
      '0';
  
  MinimumTree_stage1_val(16) <= dstMet_reorder(32) WHEN MinimumTree_treestage1_isless(16) = '1' ELSE
      dstMet_reorder(33);
  
  MinimumTree_stage1_idx(16) <= const_idx(32) WHEN MinimumTree_treestage1_isless(16) = '1' ELSE
      const_idx(33);
  
  MinimumTree_treestage1_isless(17) <= '1' WHEN dstMet_reorder(34) <= dstMet_reorder(35) ELSE
      '0';
  
  MinimumTree_stage1_val(17) <= dstMet_reorder(34) WHEN MinimumTree_treestage1_isless(17) = '1' ELSE
      dstMet_reorder(35);
  
  MinimumTree_stage1_idx(17) <= const_idx(34) WHEN MinimumTree_treestage1_isless(17) = '1' ELSE
      const_idx(35);
  
  MinimumTree_treestage1_isless(18) <= '1' WHEN dstMet_reorder(36) <= dstMet_reorder(37) ELSE
      '0';
  
  MinimumTree_stage1_val(18) <= dstMet_reorder(36) WHEN MinimumTree_treestage1_isless(18) = '1' ELSE
      dstMet_reorder(37);
  
  MinimumTree_stage1_idx(18) <= const_idx(36) WHEN MinimumTree_treestage1_isless(18) = '1' ELSE
      const_idx(37);
  
  MinimumTree_treestage1_isless(19) <= '1' WHEN dstMet_reorder(38) <= dstMet_reorder(39) ELSE
      '0';
  
  MinimumTree_stage1_val(19) <= dstMet_reorder(38) WHEN MinimumTree_treestage1_isless(19) = '1' ELSE
      dstMet_reorder(39);
  
  MinimumTree_stage1_idx(19) <= const_idx(38) WHEN MinimumTree_treestage1_isless(19) = '1' ELSE
      const_idx(39);
  
  MinimumTree_treestage1_isless(20) <= '1' WHEN dstMet_reorder(40) <= dstMet_reorder(41) ELSE
      '0';
  
  MinimumTree_stage1_val(20) <= dstMet_reorder(40) WHEN MinimumTree_treestage1_isless(20) = '1' ELSE
      dstMet_reorder(41);
  
  MinimumTree_stage1_idx(20) <= const_idx(40) WHEN MinimumTree_treestage1_isless(20) = '1' ELSE
      const_idx(41);
  
  MinimumTree_treestage1_isless(21) <= '1' WHEN dstMet_reorder(42) <= dstMet_reorder(43) ELSE
      '0';
  
  MinimumTree_stage1_val(21) <= dstMet_reorder(42) WHEN MinimumTree_treestage1_isless(21) = '1' ELSE
      dstMet_reorder(43);
  
  MinimumTree_stage1_idx(21) <= const_idx(42) WHEN MinimumTree_treestage1_isless(21) = '1' ELSE
      const_idx(43);
  
  MinimumTree_treestage1_isless(22) <= '1' WHEN dstMet_reorder(44) <= dstMet_reorder(45) ELSE
      '0';
  
  MinimumTree_stage1_val(22) <= dstMet_reorder(44) WHEN MinimumTree_treestage1_isless(22) = '1' ELSE
      dstMet_reorder(45);
  
  MinimumTree_stage1_idx(22) <= const_idx(44) WHEN MinimumTree_treestage1_isless(22) = '1' ELSE
      const_idx(45);
  
  MinimumTree_treestage1_isless(23) <= '1' WHEN dstMet_reorder(46) <= dstMet_reorder(47) ELSE
      '0';
  
  MinimumTree_stage1_val(23) <= dstMet_reorder(46) WHEN MinimumTree_treestage1_isless(23) = '1' ELSE
      dstMet_reorder(47);
  
  MinimumTree_stage1_idx(23) <= const_idx(46) WHEN MinimumTree_treestage1_isless(23) = '1' ELSE
      const_idx(47);
  
  MinimumTree_treestage1_isless(24) <= '1' WHEN dstMet_reorder(48) <= dstMet_reorder(49) ELSE
      '0';
  
  MinimumTree_stage1_val(24) <= dstMet_reorder(48) WHEN MinimumTree_treestage1_isless(24) = '1' ELSE
      dstMet_reorder(49);
  
  MinimumTree_stage1_idx(24) <= const_idx(48) WHEN MinimumTree_treestage1_isless(24) = '1' ELSE
      const_idx(49);
  
  MinimumTree_treestage1_isless(25) <= '1' WHEN dstMet_reorder(50) <= dstMet_reorder(51) ELSE
      '0';
  
  MinimumTree_stage1_val(25) <= dstMet_reorder(50) WHEN MinimumTree_treestage1_isless(25) = '1' ELSE
      dstMet_reorder(51);
  
  MinimumTree_stage1_idx(25) <= const_idx(50) WHEN MinimumTree_treestage1_isless(25) = '1' ELSE
      const_idx(51);
  
  MinimumTree_treestage1_isless(26) <= '1' WHEN dstMet_reorder(52) <= dstMet_reorder(53) ELSE
      '0';
  
  MinimumTree_stage1_val(26) <= dstMet_reorder(52) WHEN MinimumTree_treestage1_isless(26) = '1' ELSE
      dstMet_reorder(53);
  
  MinimumTree_stage1_idx(26) <= const_idx(52) WHEN MinimumTree_treestage1_isless(26) = '1' ELSE
      const_idx(53);
  
  MinimumTree_treestage1_isless(27) <= '1' WHEN dstMet_reorder(54) <= dstMet_reorder(55) ELSE
      '0';
  
  MinimumTree_stage1_val(27) <= dstMet_reorder(54) WHEN MinimumTree_treestage1_isless(27) = '1' ELSE
      dstMet_reorder(55);
  
  MinimumTree_stage1_idx(27) <= const_idx(54) WHEN MinimumTree_treestage1_isless(27) = '1' ELSE
      const_idx(55);
  
  MinimumTree_treestage1_isless(28) <= '1' WHEN dstMet_reorder(56) <= dstMet_reorder(57) ELSE
      '0';
  
  MinimumTree_stage1_val(28) <= dstMet_reorder(56) WHEN MinimumTree_treestage1_isless(28) = '1' ELSE
      dstMet_reorder(57);
  
  MinimumTree_stage1_idx(28) <= const_idx(56) WHEN MinimumTree_treestage1_isless(28) = '1' ELSE
      const_idx(57);
  
  MinimumTree_treestage1_isless(29) <= '1' WHEN dstMet_reorder(58) <= dstMet_reorder(59) ELSE
      '0';
  
  MinimumTree_stage1_val(29) <= dstMet_reorder(58) WHEN MinimumTree_treestage1_isless(29) = '1' ELSE
      dstMet_reorder(59);
  
  MinimumTree_stage1_idx(29) <= const_idx(58) WHEN MinimumTree_treestage1_isless(29) = '1' ELSE
      const_idx(59);
  
  MinimumTree_treestage1_isless(30) <= '1' WHEN dstMet_reorder(60) <= dstMet_reorder(61) ELSE
      '0';
  
  MinimumTree_stage1_val(30) <= dstMet_reorder(60) WHEN MinimumTree_treestage1_isless(30) = '1' ELSE
      dstMet_reorder(61);
  
  MinimumTree_stage1_idx(30) <= const_idx(60) WHEN MinimumTree_treestage1_isless(30) = '1' ELSE
      const_idx(61);
  
  MinimumTree_treestage1_isless(31) <= '1' WHEN dstMet_reorder(62) <= dstMet_reorder(63) ELSE
      '0';
  
  MinimumTree_stage1_val(31) <= dstMet_reorder(62) WHEN MinimumTree_treestage1_isless(31) = '1' ELSE
      dstMet_reorder(63);
  
  MinimumTree_stage1_idx(31) <= const_idx(62) WHEN MinimumTree_treestage1_isless(31) = '1' ELSE
      const_idx(63);

  MinimumTree_stage1_val_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage1_val_reg <= (OTHERS => to_unsigned(16#00#, 5));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage1_val_reg <= MinimumTree_stage1_val;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage1_val_1_process;


  MinimumTree_stage1_idx_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage1_idx_reg <= (OTHERS => to_unsigned(16#00#, 6));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage1_idx_reg <= MinimumTree_stage1_idx;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage1_idx_1_process;


  ---- Tree min stage 2 ----
  
  MinimumTree_treestage2_isless(0) <= '1' WHEN MinimumTree_stage1_val_reg(0) <= MinimumTree_stage1_val_reg(1) ELSE
      '0';
  
  MinimumTree_stage2_val(0) <= MinimumTree_stage1_val_reg(0) WHEN MinimumTree_treestage2_isless(0) = '1' ELSE
      MinimumTree_stage1_val_reg(1);
  
  MinimumTree_stage2_idx(0) <= MinimumTree_stage1_idx_reg(0) WHEN MinimumTree_treestage2_isless(0) = '1' ELSE
      MinimumTree_stage1_idx_reg(1);
  
  MinimumTree_treestage2_isless(1) <= '1' WHEN MinimumTree_stage1_val_reg(2) <= MinimumTree_stage1_val_reg(3) ELSE
      '0';
  
  MinimumTree_stage2_val(1) <= MinimumTree_stage1_val_reg(2) WHEN MinimumTree_treestage2_isless(1) = '1' ELSE
      MinimumTree_stage1_val_reg(3);
  
  MinimumTree_stage2_idx(1) <= MinimumTree_stage1_idx_reg(2) WHEN MinimumTree_treestage2_isless(1) = '1' ELSE
      MinimumTree_stage1_idx_reg(3);
  
  MinimumTree_treestage2_isless(2) <= '1' WHEN MinimumTree_stage1_val_reg(4) <= MinimumTree_stage1_val_reg(5) ELSE
      '0';
  
  MinimumTree_stage2_val(2) <= MinimumTree_stage1_val_reg(4) WHEN MinimumTree_treestage2_isless(2) = '1' ELSE
      MinimumTree_stage1_val_reg(5);
  
  MinimumTree_stage2_idx(2) <= MinimumTree_stage1_idx_reg(4) WHEN MinimumTree_treestage2_isless(2) = '1' ELSE
      MinimumTree_stage1_idx_reg(5);
  
  MinimumTree_treestage2_isless(3) <= '1' WHEN MinimumTree_stage1_val_reg(6) <= MinimumTree_stage1_val_reg(7) ELSE
      '0';
  
  MinimumTree_stage2_val(3) <= MinimumTree_stage1_val_reg(6) WHEN MinimumTree_treestage2_isless(3) = '1' ELSE
      MinimumTree_stage1_val_reg(7);
  
  MinimumTree_stage2_idx(3) <= MinimumTree_stage1_idx_reg(6) WHEN MinimumTree_treestage2_isless(3) = '1' ELSE
      MinimumTree_stage1_idx_reg(7);
  
  MinimumTree_treestage2_isless(4) <= '1' WHEN MinimumTree_stage1_val_reg(8) <= MinimumTree_stage1_val_reg(9) ELSE
      '0';
  
  MinimumTree_stage2_val(4) <= MinimumTree_stage1_val_reg(8) WHEN MinimumTree_treestage2_isless(4) = '1' ELSE
      MinimumTree_stage1_val_reg(9);
  
  MinimumTree_stage2_idx(4) <= MinimumTree_stage1_idx_reg(8) WHEN MinimumTree_treestage2_isless(4) = '1' ELSE
      MinimumTree_stage1_idx_reg(9);
  
  MinimumTree_treestage2_isless(5) <= '1' WHEN MinimumTree_stage1_val_reg(10) <= MinimumTree_stage1_val_reg(11) ELSE
      '0';
  
  MinimumTree_stage2_val(5) <= MinimumTree_stage1_val_reg(10) WHEN MinimumTree_treestage2_isless(5) = '1' ELSE
      MinimumTree_stage1_val_reg(11);
  
  MinimumTree_stage2_idx(5) <= MinimumTree_stage1_idx_reg(10) WHEN MinimumTree_treestage2_isless(5) = '1' ELSE
      MinimumTree_stage1_idx_reg(11);
  
  MinimumTree_treestage2_isless(6) <= '1' WHEN MinimumTree_stage1_val_reg(12) <= MinimumTree_stage1_val_reg(13) ELSE
      '0';
  
  MinimumTree_stage2_val(6) <= MinimumTree_stage1_val_reg(12) WHEN MinimumTree_treestage2_isless(6) = '1' ELSE
      MinimumTree_stage1_val_reg(13);
  
  MinimumTree_stage2_idx(6) <= MinimumTree_stage1_idx_reg(12) WHEN MinimumTree_treestage2_isless(6) = '1' ELSE
      MinimumTree_stage1_idx_reg(13);
  
  MinimumTree_treestage2_isless(7) <= '1' WHEN MinimumTree_stage1_val_reg(14) <= MinimumTree_stage1_val_reg(15) ELSE
      '0';
  
  MinimumTree_stage2_val(7) <= MinimumTree_stage1_val_reg(14) WHEN MinimumTree_treestage2_isless(7) = '1' ELSE
      MinimumTree_stage1_val_reg(15);
  
  MinimumTree_stage2_idx(7) <= MinimumTree_stage1_idx_reg(14) WHEN MinimumTree_treestage2_isless(7) = '1' ELSE
      MinimumTree_stage1_idx_reg(15);
  
  MinimumTree_treestage2_isless(8) <= '1' WHEN MinimumTree_stage1_val_reg(16) <= MinimumTree_stage1_val_reg(17) ELSE
      '0';
  
  MinimumTree_stage2_val(8) <= MinimumTree_stage1_val_reg(16) WHEN MinimumTree_treestage2_isless(8) = '1' ELSE
      MinimumTree_stage1_val_reg(17);
  
  MinimumTree_stage2_idx(8) <= MinimumTree_stage1_idx_reg(16) WHEN MinimumTree_treestage2_isless(8) = '1' ELSE
      MinimumTree_stage1_idx_reg(17);
  
  MinimumTree_treestage2_isless(9) <= '1' WHEN MinimumTree_stage1_val_reg(18) <= MinimumTree_stage1_val_reg(19) ELSE
      '0';
  
  MinimumTree_stage2_val(9) <= MinimumTree_stage1_val_reg(18) WHEN MinimumTree_treestage2_isless(9) = '1' ELSE
      MinimumTree_stage1_val_reg(19);
  
  MinimumTree_stage2_idx(9) <= MinimumTree_stage1_idx_reg(18) WHEN MinimumTree_treestage2_isless(9) = '1' ELSE
      MinimumTree_stage1_idx_reg(19);
  
  MinimumTree_treestage2_isless(10) <= '1' WHEN MinimumTree_stage1_val_reg(20) <= MinimumTree_stage1_val_reg(21) ELSE
      '0';
  
  MinimumTree_stage2_val(10) <= MinimumTree_stage1_val_reg(20) WHEN MinimumTree_treestage2_isless(10) = '1' ELSE
      MinimumTree_stage1_val_reg(21);
  
  MinimumTree_stage2_idx(10) <= MinimumTree_stage1_idx_reg(20) WHEN MinimumTree_treestage2_isless(10) = '1' ELSE
      MinimumTree_stage1_idx_reg(21);
  
  MinimumTree_treestage2_isless(11) <= '1' WHEN MinimumTree_stage1_val_reg(22) <= MinimumTree_stage1_val_reg(23) ELSE
      '0';
  
  MinimumTree_stage2_val(11) <= MinimumTree_stage1_val_reg(22) WHEN MinimumTree_treestage2_isless(11) = '1' ELSE
      MinimumTree_stage1_val_reg(23);
  
  MinimumTree_stage2_idx(11) <= MinimumTree_stage1_idx_reg(22) WHEN MinimumTree_treestage2_isless(11) = '1' ELSE
      MinimumTree_stage1_idx_reg(23);
  
  MinimumTree_treestage2_isless(12) <= '1' WHEN MinimumTree_stage1_val_reg(24) <= MinimumTree_stage1_val_reg(25) ELSE
      '0';
  
  MinimumTree_stage2_val(12) <= MinimumTree_stage1_val_reg(24) WHEN MinimumTree_treestage2_isless(12) = '1' ELSE
      MinimumTree_stage1_val_reg(25);
  
  MinimumTree_stage2_idx(12) <= MinimumTree_stage1_idx_reg(24) WHEN MinimumTree_treestage2_isless(12) = '1' ELSE
      MinimumTree_stage1_idx_reg(25);
  
  MinimumTree_treestage2_isless(13) <= '1' WHEN MinimumTree_stage1_val_reg(26) <= MinimumTree_stage1_val_reg(27) ELSE
      '0';
  
  MinimumTree_stage2_val(13) <= MinimumTree_stage1_val_reg(26) WHEN MinimumTree_treestage2_isless(13) = '1' ELSE
      MinimumTree_stage1_val_reg(27);
  
  MinimumTree_stage2_idx(13) <= MinimumTree_stage1_idx_reg(26) WHEN MinimumTree_treestage2_isless(13) = '1' ELSE
      MinimumTree_stage1_idx_reg(27);
  
  MinimumTree_treestage2_isless(14) <= '1' WHEN MinimumTree_stage1_val_reg(28) <= MinimumTree_stage1_val_reg(29) ELSE
      '0';
  
  MinimumTree_stage2_val(14) <= MinimumTree_stage1_val_reg(28) WHEN MinimumTree_treestage2_isless(14) = '1' ELSE
      MinimumTree_stage1_val_reg(29);
  
  MinimumTree_stage2_idx(14) <= MinimumTree_stage1_idx_reg(28) WHEN MinimumTree_treestage2_isless(14) = '1' ELSE
      MinimumTree_stage1_idx_reg(29);
  
  MinimumTree_treestage2_isless(15) <= '1' WHEN MinimumTree_stage1_val_reg(30) <= MinimumTree_stage1_val_reg(31) ELSE
      '0';
  
  MinimumTree_stage2_val(15) <= MinimumTree_stage1_val_reg(30) WHEN MinimumTree_treestage2_isless(15) = '1' ELSE
      MinimumTree_stage1_val_reg(31);
  
  MinimumTree_stage2_idx(15) <= MinimumTree_stage1_idx_reg(30) WHEN MinimumTree_treestage2_isless(15) = '1' ELSE
      MinimumTree_stage1_idx_reg(31);

  MinimumTree_stage2_val_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage2_val_reg <= (OTHERS => to_unsigned(16#00#, 5));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage2_val_reg <= MinimumTree_stage2_val;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage2_val_1_process;


  MinimumTree_stage2_idx_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage2_idx_reg <= (OTHERS => to_unsigned(16#00#, 6));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage2_idx_reg <= MinimumTree_stage2_idx;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage2_idx_1_process;


  ---- Tree min stage 3 ----
  
  MinimumTree_treestage3_isless(0) <= '1' WHEN MinimumTree_stage2_val_reg(0) <= MinimumTree_stage2_val_reg(1) ELSE
      '0';
  
  MinimumTree_stage3_val(0) <= MinimumTree_stage2_val_reg(0) WHEN MinimumTree_treestage3_isless(0) = '1' ELSE
      MinimumTree_stage2_val_reg(1);
  
  MinimumTree_stage3_idx(0) <= MinimumTree_stage2_idx_reg(0) WHEN MinimumTree_treestage3_isless(0) = '1' ELSE
      MinimumTree_stage2_idx_reg(1);
  
  MinimumTree_treestage3_isless(1) <= '1' WHEN MinimumTree_stage2_val_reg(2) <= MinimumTree_stage2_val_reg(3) ELSE
      '0';
  
  MinimumTree_stage3_val(1) <= MinimumTree_stage2_val_reg(2) WHEN MinimumTree_treestage3_isless(1) = '1' ELSE
      MinimumTree_stage2_val_reg(3);
  
  MinimumTree_stage3_idx(1) <= MinimumTree_stage2_idx_reg(2) WHEN MinimumTree_treestage3_isless(1) = '1' ELSE
      MinimumTree_stage2_idx_reg(3);
  
  MinimumTree_treestage3_isless(2) <= '1' WHEN MinimumTree_stage2_val_reg(4) <= MinimumTree_stage2_val_reg(5) ELSE
      '0';
  
  MinimumTree_stage3_val(2) <= MinimumTree_stage2_val_reg(4) WHEN MinimumTree_treestage3_isless(2) = '1' ELSE
      MinimumTree_stage2_val_reg(5);
  
  MinimumTree_stage3_idx(2) <= MinimumTree_stage2_idx_reg(4) WHEN MinimumTree_treestage3_isless(2) = '1' ELSE
      MinimumTree_stage2_idx_reg(5);
  
  MinimumTree_treestage3_isless(3) <= '1' WHEN MinimumTree_stage2_val_reg(6) <= MinimumTree_stage2_val_reg(7) ELSE
      '0';
  
  MinimumTree_stage3_val(3) <= MinimumTree_stage2_val_reg(6) WHEN MinimumTree_treestage3_isless(3) = '1' ELSE
      MinimumTree_stage2_val_reg(7);
  
  MinimumTree_stage3_idx(3) <= MinimumTree_stage2_idx_reg(6) WHEN MinimumTree_treestage3_isless(3) = '1' ELSE
      MinimumTree_stage2_idx_reg(7);
  
  MinimumTree_treestage3_isless(4) <= '1' WHEN MinimumTree_stage2_val_reg(8) <= MinimumTree_stage2_val_reg(9) ELSE
      '0';
  
  MinimumTree_stage3_val(4) <= MinimumTree_stage2_val_reg(8) WHEN MinimumTree_treestage3_isless(4) = '1' ELSE
      MinimumTree_stage2_val_reg(9);
  
  MinimumTree_stage3_idx(4) <= MinimumTree_stage2_idx_reg(8) WHEN MinimumTree_treestage3_isless(4) = '1' ELSE
      MinimumTree_stage2_idx_reg(9);
  
  MinimumTree_treestage3_isless(5) <= '1' WHEN MinimumTree_stage2_val_reg(10) <= MinimumTree_stage2_val_reg(11) ELSE
      '0';
  
  MinimumTree_stage3_val(5) <= MinimumTree_stage2_val_reg(10) WHEN MinimumTree_treestage3_isless(5) = '1' ELSE
      MinimumTree_stage2_val_reg(11);
  
  MinimumTree_stage3_idx(5) <= MinimumTree_stage2_idx_reg(10) WHEN MinimumTree_treestage3_isless(5) = '1' ELSE
      MinimumTree_stage2_idx_reg(11);
  
  MinimumTree_treestage3_isless(6) <= '1' WHEN MinimumTree_stage2_val_reg(12) <= MinimumTree_stage2_val_reg(13) ELSE
      '0';
  
  MinimumTree_stage3_val(6) <= MinimumTree_stage2_val_reg(12) WHEN MinimumTree_treestage3_isless(6) = '1' ELSE
      MinimumTree_stage2_val_reg(13);
  
  MinimumTree_stage3_idx(6) <= MinimumTree_stage2_idx_reg(12) WHEN MinimumTree_treestage3_isless(6) = '1' ELSE
      MinimumTree_stage2_idx_reg(13);
  
  MinimumTree_treestage3_isless(7) <= '1' WHEN MinimumTree_stage2_val_reg(14) <= MinimumTree_stage2_val_reg(15) ELSE
      '0';
  
  MinimumTree_stage3_val(7) <= MinimumTree_stage2_val_reg(14) WHEN MinimumTree_treestage3_isless(7) = '1' ELSE
      MinimumTree_stage2_val_reg(15);
  
  MinimumTree_stage3_idx(7) <= MinimumTree_stage2_idx_reg(14) WHEN MinimumTree_treestage3_isless(7) = '1' ELSE
      MinimumTree_stage2_idx_reg(15);

  MinimumTree_stage3_val_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage3_val_reg <= (OTHERS => to_unsigned(16#00#, 5));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage3_val_reg <= MinimumTree_stage3_val;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage3_val_1_process;


  MinimumTree_stage3_idx_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage3_idx_reg <= (OTHERS => to_unsigned(16#00#, 6));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage3_idx_reg <= MinimumTree_stage3_idx;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage3_idx_1_process;


  ---- Tree min stage 4 ----
  
  MinimumTree_treestage4_isless(0) <= '1' WHEN MinimumTree_stage3_val_reg(0) <= MinimumTree_stage3_val_reg(1) ELSE
      '0';
  
  MinimumTree_stage4_val(0) <= MinimumTree_stage3_val_reg(0) WHEN MinimumTree_treestage4_isless(0) = '1' ELSE
      MinimumTree_stage3_val_reg(1);
  
  MinimumTree_stage4_idx(0) <= MinimumTree_stage3_idx_reg(0) WHEN MinimumTree_treestage4_isless(0) = '1' ELSE
      MinimumTree_stage3_idx_reg(1);
  
  MinimumTree_treestage4_isless(1) <= '1' WHEN MinimumTree_stage3_val_reg(2) <= MinimumTree_stage3_val_reg(3) ELSE
      '0';
  
  MinimumTree_stage4_val(1) <= MinimumTree_stage3_val_reg(2) WHEN MinimumTree_treestage4_isless(1) = '1' ELSE
      MinimumTree_stage3_val_reg(3);
  
  MinimumTree_stage4_idx(1) <= MinimumTree_stage3_idx_reg(2) WHEN MinimumTree_treestage4_isless(1) = '1' ELSE
      MinimumTree_stage3_idx_reg(3);
  
  MinimumTree_treestage4_isless(2) <= '1' WHEN MinimumTree_stage3_val_reg(4) <= MinimumTree_stage3_val_reg(5) ELSE
      '0';
  
  MinimumTree_stage4_val(2) <= MinimumTree_stage3_val_reg(4) WHEN MinimumTree_treestage4_isless(2) = '1' ELSE
      MinimumTree_stage3_val_reg(5);
  
  MinimumTree_stage4_idx(2) <= MinimumTree_stage3_idx_reg(4) WHEN MinimumTree_treestage4_isless(2) = '1' ELSE
      MinimumTree_stage3_idx_reg(5);
  
  MinimumTree_treestage4_isless(3) <= '1' WHEN MinimumTree_stage3_val_reg(6) <= MinimumTree_stage3_val_reg(7) ELSE
      '0';
  
  MinimumTree_stage4_val(3) <= MinimumTree_stage3_val_reg(6) WHEN MinimumTree_treestage4_isless(3) = '1' ELSE
      MinimumTree_stage3_val_reg(7);
  
  MinimumTree_stage4_idx(3) <= MinimumTree_stage3_idx_reg(6) WHEN MinimumTree_treestage4_isless(3) = '1' ELSE
      MinimumTree_stage3_idx_reg(7);

  MinimumTree_stage4_val_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage4_val_reg <= (OTHERS => to_unsigned(16#00#, 5));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage4_val_reg <= MinimumTree_stage4_val;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage4_val_1_process;


  MinimumTree_stage4_idx_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage4_idx_reg <= (OTHERS => to_unsigned(16#00#, 6));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage4_idx_reg <= MinimumTree_stage4_idx;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage4_idx_1_process;


  ---- Tree min stage 5 ----
  
  MinimumTree_treestage5_isless(0) <= '1' WHEN MinimumTree_stage4_val_reg(0) <= MinimumTree_stage4_val_reg(1) ELSE
      '0';
  
  MinimumTree_stage5_val(0) <= MinimumTree_stage4_val_reg(0) WHEN MinimumTree_treestage5_isless(0) = '1' ELSE
      MinimumTree_stage4_val_reg(1);
  
  MinimumTree_stage5_idx(0) <= MinimumTree_stage4_idx_reg(0) WHEN MinimumTree_treestage5_isless(0) = '1' ELSE
      MinimumTree_stage4_idx_reg(1);
  
  MinimumTree_treestage5_isless(1) <= '1' WHEN MinimumTree_stage4_val_reg(2) <= MinimumTree_stage4_val_reg(3) ELSE
      '0';
  
  MinimumTree_stage5_val(1) <= MinimumTree_stage4_val_reg(2) WHEN MinimumTree_treestage5_isless(1) = '1' ELSE
      MinimumTree_stage4_val_reg(3);
  
  MinimumTree_stage5_idx(1) <= MinimumTree_stage4_idx_reg(2) WHEN MinimumTree_treestage5_isless(1) = '1' ELSE
      MinimumTree_stage4_idx_reg(3);

  MinimumTree_stage5_val_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage5_val_reg <= (OTHERS => to_unsigned(16#00#, 5));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage5_val_reg <= MinimumTree_stage5_val;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage5_val_1_process;


  MinimumTree_stage5_idx_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage5_idx_reg <= (OTHERS => to_unsigned(16#00#, 6));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage5_idx_reg <= MinimumTree_stage5_idx;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage5_idx_1_process;


  ---- Tree min stage 6 ----
  MinimumTree_treestage6_isless <= hdlcoder_to_stdlogic(MinimumTree_stage5_val_reg(0) <= MinimumTree_stage5_val_reg(1));
  
  MinimumTree_stage6_val <= MinimumTree_stage5_val_reg(0) WHEN MinimumTree_treestage6_isless = '1' ELSE
      MinimumTree_stage5_val_reg(1);
  
  MinimumTree_stage6_idx <= MinimumTree_stage5_idx_reg(0) WHEN MinimumTree_treestage6_isless = '1' ELSE
      MinimumTree_stage5_idx_reg(1);

  MinimumTree_stage6_val_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage6_val_reg <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage6_val_reg <= MinimumTree_stage6_val;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage6_val_1_process;


  
  sel <= '1' WHEN MinimumTree_stage6_val_reg < to_unsigned(16#09#, 5) ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN sel > '0' ELSE
      '0';

  -- Normalization constant adjustment value
  conststep <= to_unsigned(16#1F#, 5);

  -- Normalization constant zero
  constzero <= to_unsigned(16#00#, 5);

  
  normval_tmp <= conststep WHEN switch_compare_1 = '0' ELSE
      constzero;

  normval <= std_logic_vector(normval_tmp);

  -- Max value of state index
  idxmax <= to_unsigned(16#3F#, 6);

  MinimumTree_stage6_idx_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MinimumTree_stage6_idx_reg <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        MinimumTree_stage6_idx_reg <= MinimumTree_stage6_idx;
      END IF;
    END IF;
  END PROCESS MinimumTree_stage6_idx_1_process;


  idx_tmp <= idxmax - MinimumTree_stage6_idx_reg;

  idx <= std_logic_vector(idx_tmp);

END rtl;

