-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_StandardIQ\CombinedT_ip_src_Viterbi_Decode.vhd
-- Created: 2018-02-01 11:49:53
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Viterbi_Decode
-- Source Path: combinedTxRx_StandardIQ/Combined TX and RX/Receiver HDL/Viterbi Decode
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Viterbi_Decode IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        validIn                           :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        crcEnd                            :   IN    std_logic;
        Bits                              :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
        packetLenIn                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        validOut                          :   OUT   std_logic;
        Decoded_Bits                      :   OUT   std_logic;
        crcEndOut                         :   OUT   std_logic;
        frameStart                        :   OUT   std_logic;
        packetLenOut                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END CombinedT_ip_src_Viterbi_Decode;


ARCHITECTURE rtl OF CombinedT_ip_src_Viterbi_Decode IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Buffer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data                            :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          start                           :   IN    std_logic;
          valid                           :   IN    std_logic;
          crc                             :   IN    std_logic;
          packetLen                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          dataOut                         :   OUT   std_logic_vector(0 TO 1);  -- boolean [2]
          resetOut                        :   OUT   std_logic;
          validOut                        :   OUT   std_logic;
          crcOut                          :   OUT   std_logic;
          packetLenOut                    :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Viterbi_Decoder
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Viterbi_Decoder_in              :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          Viterbi_Decoder_rst             :   IN    std_logic;
          decoded                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Buffer
    USE ENTITY work.CombinedT_ip_src_Buffer(rtl);

  FOR ALL : CombinedT_ip_src_Viterbi_Decoder
    USE ENTITY work.CombinedT_ip_src_Viterbi_Decoder(rtl);

  -- Signals
  SIGNAL Buffer_out1                      : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL viterbiReset                     : std_logic;
  SIGNAL Buffer_out3                      : std_logic;
  SIGNAL crcOut                           : std_logic;
  SIGNAL Buffer_out5                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Viterbi_Lag_reg                  : std_logic_vector(0 TO 33);  -- ufix1 [34]
  SIGNAL Viterbi_Lag_out1                 : std_logic;
  SIGNAL Viterbi_Decoder_out1             : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL Viterbi_Lag_out1_1               : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Viterbi_Lag1_reg                 : std_logic_vector(0 TO 33);  -- ufix1 [34]
  SIGNAL Viterbi_Lag1_out1                : std_logic;
  SIGNAL Align_with_post_reset_data_out1  : std_logic;
  SIGNAL Viterbi_Lag2_reg                 : std_logic_vector(0 TO 33);  -- ufix1 [34]
  SIGNAL Viterbi_Lag2_out1                : std_logic;
  SIGNAL Buffer_out5_unsigned             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Viterbi_Lag3_reg                 : vector_of_unsigned16(0 TO 33);  -- ufix16 [34]
  SIGNAL Viterbi_Lag3_out1                : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  u_Buffer : CombinedT_ip_src_Buffer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              data => Bits,  -- boolean [2]
              start => reset_1,
              valid => validIn,
              crc => crcEnd,
              packetLen => packetLenIn,  -- uint16
              dataOut => Buffer_out1,  -- boolean [2]
              resetOut => viterbiReset,
              validOut => Buffer_out3,
              crcOut => crcOut,
              packetLenOut => Buffer_out5  -- uint16
              );

  u_Viterbi_Decoder : CombinedT_ip_src_Viterbi_Decoder
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Viterbi_Decoder_in => Buffer_out1,  -- boolean [2]
              Viterbi_Decoder_rst => viterbiReset,
              decoded => Viterbi_Decoder_out1
              );

  Viterbi_Lag_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Viterbi_Lag_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Viterbi_Lag_reg(0) <= Buffer_out3;
        Viterbi_Lag_reg(1 TO 33) <= Viterbi_Lag_reg(0 TO 32);
      END IF;
    END IF;
  END PROCESS Viterbi_Lag_process;

  Viterbi_Lag_out1 <= Viterbi_Lag_reg(33);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= Viterbi_Lag_out1;
        delayMatch_reg(1 TO 19) <= delayMatch_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Viterbi_Lag_out1_1 <= delayMatch_reg(19);

  Logical_Operator_out1 <= Viterbi_Decoder_out1 AND Viterbi_Lag_out1_1;

  Viterbi_Lag1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Viterbi_Lag1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Viterbi_Lag1_reg(0) <= crcOut;
        Viterbi_Lag1_reg(1 TO 33) <= Viterbi_Lag1_reg(0 TO 32);
      END IF;
    END IF;
  END PROCESS Viterbi_Lag1_process;

  Viterbi_Lag1_out1 <= Viterbi_Lag1_reg(33);

  Align_with_post_reset_data_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Align_with_post_reset_data_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Align_with_post_reset_data_out1 <= viterbiReset;
      END IF;
    END IF;
  END PROCESS Align_with_post_reset_data_process;


  Viterbi_Lag2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Viterbi_Lag2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Viterbi_Lag2_reg(0) <= Align_with_post_reset_data_out1;
        Viterbi_Lag2_reg(1 TO 33) <= Viterbi_Lag2_reg(0 TO 32);
      END IF;
    END IF;
  END PROCESS Viterbi_Lag2_process;

  Viterbi_Lag2_out1 <= Viterbi_Lag2_reg(33);

  Buffer_out5_unsigned <= unsigned(Buffer_out5);

  Viterbi_Lag3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Viterbi_Lag3_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Viterbi_Lag3_reg(0) <= Buffer_out5_unsigned;
        Viterbi_Lag3_reg(1 TO 33) <= Viterbi_Lag3_reg(0 TO 32);
      END IF;
    END IF;
  END PROCESS Viterbi_Lag3_process;

  Viterbi_Lag3_out1 <= Viterbi_Lag3_reg(33);

  packetLenOut <= std_logic_vector(Viterbi_Lag3_out1);

  validOut <= Viterbi_Lag_out1;

  Decoded_Bits <= Logical_Operator_out1;

  crcEndOut <= Viterbi_Lag1_out1;

  frameStart <= Viterbi_Lag2_out1;

END rtl;

