-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_StandardIQ\CombinedT_ip_src_DMA_Interface.vhd
-- Created: 2018-02-01 11:49:52
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_DMA_Interface
-- Source Path: combinedTxRx_StandardIQ/Combined TX and RX/Receiver HDL/CRC Check and DMA Pack/DMA Interface
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_DMA_Interface IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        bitIn                             :   IN    std_logic;  -- ufix1
        startIn                           :   IN    std_logic;
        endIn                             :   IN    std_logic;
        validIn                           :   IN    std_logic;
        err                               :   IN    std_logic;
        payloadLen                        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        byteOut                           :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        validOut                          :   OUT   std_logic;
        sync                              :   OUT   std_logic;
        payloadLenOut                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END CombinedT_ip_src_DMA_Interface;


ARCHITECTURE rtl OF CombinedT_ip_src_DMA_Interface IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_Bit_Packer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          bitIn                           :   IN    std_logic;
          startIn                         :   IN    std_logic;
          endIn                           :   IN    std_logic;
          err                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          byteOut                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          validOut                        :   OUT   std_logic;
          startOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Convert_Payload_Length_To_Bytes
    PORT( In1                             :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          packetLengthOut                 :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_Bit_Packer
    USE ENTITY work.CombinedT_ip_src_Bit_Packer(rtl);

  FOR ALL : CombinedT_ip_src_Convert_Payload_Length_To_Bytes
    USE ENTITY work.CombinedT_ip_src_Convert_Payload_Length_To_Bytes(rtl);

  -- Signals
  SIGNAL Data_Type_Conversion_out1        : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_Error_To_Last_Byte_of_Out_out1 : std_logic;
  SIGNAL byteOut_tmp                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL startOut                         : std_logic;
  SIGNAL packetLenOut                     : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_Bit_Packer : CombinedT_ip_src_Bit_Packer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              bitIn => Data_Type_Conversion_out1,
              startIn => startIn,
              endIn => Delay_out1,
              err => Delay_Error_To_Last_Byte_of_Out_out1,
              validIn => validIn,
              byteOut => byteOut_tmp,  -- ufix64
              validOut => validOut,
              startOut => startOut
              );

  u_Convert_Payload_Length_To_Bytes : CombinedT_ip_src_Convert_Payload_Length_To_Bytes
    PORT MAP( In1 => payloadLen,  -- uint16
              packetLengthOut => packetLenOut  -- uint16
              );

  
  Data_Type_Conversion_out1 <= '1' WHEN bitIn /= '0' ELSE
      '0';

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= endIn;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay_Error_To_Last_Byte_of_Out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_Error_To_Last_Byte_of_Out_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_Error_To_Last_Byte_of_Out_out1 <= err;
      END IF;
    END IF;
  END PROCESS Delay_Error_To_Last_Byte_of_Out_process;



  byteOut <= byteOut_tmp;

  sync <= startOut;

  payloadLenOut <= packetLenOut;

END rtl;

