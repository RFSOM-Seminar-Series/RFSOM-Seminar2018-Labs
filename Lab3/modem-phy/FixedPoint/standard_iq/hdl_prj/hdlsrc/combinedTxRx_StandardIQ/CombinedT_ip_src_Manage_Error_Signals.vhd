-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_StandardIQ\CombinedT_ip_src_Manage_Error_Signals.vhd
-- Created: 2018-02-01 11:49:53
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Manage_Error_Signals
-- Source Path: combinedTxRx_StandardIQ/Combined TX and RX/Receiver HDL/Frame Recover/Manage Error Signals
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_Manage_Error_Signals IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        ErrorSelector                     :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        In2                               :   IN    std_logic;
        Peak_Detector                     :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
        FreqPLL_Lock                      :   IN    std_logic;
        Header_Debug_status               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Header_Debug_s1                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Header_Debug_s2                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END CombinedT_ip_src_Manage_Error_Signals;


ARCHITECTURE rtl OF CombinedT_ip_src_Manage_Error_Signals IS

  -- Signals
  SIGNAL ErrorSelector_signed             : signed(7 DOWNTO 0);  -- int8
  SIGNAL ErrorSelector_1                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL k0                               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion1_out1       : signed(31 DOWNTO 0);  -- int32
  SIGNAL ErrorSelector_zp                 : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion1_out1_1     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Data_Type_Conversion1_out1_dtc   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Peak_Detector_0                  : std_logic;
  SIGNAL Peak_Detector_1                  : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Peak_Detector_Counter_out1       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion_out1        : signed(31 DOWNTO 0);  -- int32
  SIGNAL Peak_Detector_Counter_out1_1     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion_out1_1      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Data_Type_Conversion_out1_dtc    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL status                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Header_Failure_Counter_out1      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Multiport_Switch_out1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL s1                               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL s2                               : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  ErrorSelector_signed <= signed(ErrorSelector);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ErrorSelector_1 <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ErrorSelector_1 <= ErrorSelector_signed;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  switch_compare_1 <= '1' WHEN ErrorSelector_1 >= to_signed(16#01#, 8) ELSE
      '0';

  k0 <= to_signed(16#01#, 8);

  Data_Type_Conversion1_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & In2;

  
  ErrorSelector_zp <= k0 WHEN switch_compare_1 = '0' ELSE
      ErrorSelector_1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion1_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Data_Type_Conversion1_out1_dtc <= unsigned(Data_Type_Conversion1_out1_1);

  Peak_Detector_0 <= Peak_Detector(0);

  Peak_Detector_1 <= Peak_Detector(1);

  Logical_Operator_out1 <= Peak_Detector_0 AND Peak_Detector_1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4294967295
  Peak_Detector_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Peak_Detector_Counter_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Logical_Operator_out1 = '1' THEN
        Peak_Detector_Counter_out1 <= Peak_Detector_Counter_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS Peak_Detector_Counter_process;


  Data_Type_Conversion_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & FreqPLL_Lock;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Peak_Detector_Counter_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Peak_Detector_Counter_out1_1 <= Peak_Detector_Counter_out1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  Data_Type_Conversion_out1_dtc <= unsigned(Data_Type_Conversion_out1_1);

  status <= unsigned(Header_Debug_status);

  
  Compare_To_Constant_out1 <= '1' WHEN status = to_unsigned(16#02#, 8) ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4294967295
  Header_Failure_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Header_Failure_Counter_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Compare_To_Constant_out1 = '1' THEN
        Header_Failure_Counter_out1 <= Header_Failure_Counter_out1 + to_unsigned(1, 32);
      END IF;
    END IF;
  END PROCESS Header_Failure_Counter_process;


  
  Multiport_Switch_out1 <= Data_Type_Conversion1_out1_dtc WHEN ErrorSelector_zp = to_signed(16#01#, 8) ELSE
      Peak_Detector_Counter_out1_1 WHEN ErrorSelector_zp = to_signed(16#02#, 8) ELSE
      Data_Type_Conversion_out1_dtc WHEN ErrorSelector_zp = to_signed(16#03#, 8) ELSE
      Header_Failure_Counter_out1;

  Out1 <= std_logic_vector(Multiport_Switch_out1);

END rtl;

