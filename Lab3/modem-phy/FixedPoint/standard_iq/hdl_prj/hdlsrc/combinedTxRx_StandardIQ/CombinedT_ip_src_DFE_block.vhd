-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_StandardIQ\CombinedT_ip_src_DFE_block.vhd
-- Created: 2018-02-01 11:49:52
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_DFE_block
-- Source Path: combinedTxRx_StandardIQ/Combined TX and RX/Receiver HDL/Frame Recover/Equalization and Demodulation/DFE
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CombinedT_ip_src_DFE_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Trigger                           :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        EQmu                              :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Enable_out4                       :   IN    std_logic;
        dataEQed_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataEQed_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        start                             :   OUT   std_logic
        );
END CombinedT_ip_src_DFE_block;


ARCHITECTURE rtl OF CombinedT_ip_src_DFE_block IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_PN_Sequence_Generator_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic;
          Enable_out4                     :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Packeted_To_Unpacked
    PORT( In1                             :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Out1                            :   OUT   std_logic_vector(0 TO 1)  -- ufix1 [2]
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_QPSK_Modulator_Baseband
    PORT( in0                             :   IN    std_logic_vector(0 TO 1);  -- ufix1 [2]
          out0_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          out0_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_DFE
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          training_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          training_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          EQmu                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          Enable_out4                     :   IN    std_logic;
          eqOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          eqOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          err_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          err_im                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          start                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_PN_Sequence_Generator_nw
    USE ENTITY work.CombinedT_ip_src_PN_Sequence_Generator_nw(rtl);

  FOR ALL : CombinedT_ip_src_Packeted_To_Unpacked
    USE ENTITY work.CombinedT_ip_src_Packeted_To_Unpacked(rtl);

  FOR ALL : CombinedT_ip_src_QPSK_Modulator_Baseband
    USE ENTITY work.CombinedT_ip_src_QPSK_Modulator_Baseband(rtl);

  FOR ALL : CombinedT_ip_src_DFE
    USE ENTITY work.CombinedT_ip_src_DFE(rtl);

  -- Signals
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Enable_out4_1                    : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay_data_so_DFE_can_reset_out1_re : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_data_so_DFE_can_reset_out1_im : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL PN_Sequence_Generator_out1       : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Packeted_To_Unpacked_out1        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL QPSK_Modulator_Baseband_out1_re  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSK_Modulator_Baseband_out1_im  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSK_Modulator_Baseband_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL QPSK_Modulator_Baseband_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay_ref_so_DFE_can_reset_out1_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_ref_so_DFE_can_reset_out1_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL DFE_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL DFE_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL DFE_out2_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL DFE_out2_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL DFE_out3                         : std_logic;

BEGIN
  -- refTap=0 to disableEQ
  -- 
  -- Generate training sequence when barker is found

  u_PN_Sequence_Generator : CombinedT_ip_src_PN_Sequence_Generator_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Trigger,
              Enable_out4 => Enable_out4,
              out0 => PN_Sequence_Generator_out1  -- ufix2
              );

  u_Packeted_To_Unpacked : CombinedT_ip_src_Packeted_To_Unpacked
    PORT MAP( In1 => PN_Sequence_Generator_out1,  -- ufix2
              Out1 => Packeted_To_Unpacked_out1  -- ufix1 [2]
              );

  u_QPSK_Modulator_Baseband : CombinedT_ip_src_QPSK_Modulator_Baseband
    PORT MAP( in0 => Packeted_To_Unpacked_out1,  -- ufix1 [2]
              out0_re => QPSK_Modulator_Baseband_out1_re,  -- sfix16_En15
              out0_im => QPSK_Modulator_Baseband_out1_im  -- sfix16_En15
              );

  u_DFE : CombinedT_ip_src_DFE
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              reset_1 => Trigger,
              dataIn_re => std_logic_vector(Delay_data_so_DFE_can_reset_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay_data_so_DFE_can_reset_out1_im),  -- sfix16_En14
              training_re => std_logic_vector(Delay_ref_so_DFE_can_reset_out1_re),  -- sfix16_En15
              training_im => std_logic_vector(Delay_ref_so_DFE_can_reset_out1_im),  -- sfix16_En15
              EQmu => EQmu,  -- int16
              Enable_out4 => Enable_out4,
              eqOut_re => DFE_out1_re,  -- sfix16_En14
              eqOut_im => DFE_out1_im,  -- sfix16_En14
              err_re => DFE_out2_re,  -- sfix16_En15
              err_im => DFE_out2_im,  -- sfix16_En15
              start => DFE_out3
              );

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enable_out4_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Enable_out4_1 <= Enable_out4;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enb_gated <= Enable_out4_1 AND enb;

  Delay_data_so_DFE_can_reset_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_data_so_DFE_can_reset_out1_re <= to_signed(16#0000#, 16);
      Delay_data_so_DFE_can_reset_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay_data_so_DFE_can_reset_out1_re <= data_re_signed;
        Delay_data_so_DFE_can_reset_out1_im <= data_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_data_so_DFE_can_reset_process;


  QPSK_Modulator_Baseband_out1_re_signed <= signed(QPSK_Modulator_Baseband_out1_re);

  QPSK_Modulator_Baseband_out1_im_signed <= signed(QPSK_Modulator_Baseband_out1_im);

  enb_gated_1 <= Enable_out4 AND enb;

  Delay_ref_so_DFE_can_reset_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_ref_so_DFE_can_reset_out1_re <= to_signed(16#0000#, 16);
      Delay_ref_so_DFE_can_reset_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay_ref_so_DFE_can_reset_out1_re <= QPSK_Modulator_Baseband_out1_re_signed;
        Delay_ref_so_DFE_can_reset_out1_im <= QPSK_Modulator_Baseband_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_ref_so_DFE_can_reset_process;



  dataEQed_re <= DFE_out1_re;

  dataEQed_im <= DFE_out1_im;

  start <= DFE_out3;

END rtl;

