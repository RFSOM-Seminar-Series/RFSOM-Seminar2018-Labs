-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_ExternalMode\CombinedT_ip_src_ACS.vhd
-- Created: 2018-02-01 13:20:10
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_ACS
-- Source Path: combinedTxRx_ExternalMode/Combined TX and RX/Receiver HDL/Viterbi Decode/Viterbi Decoder/ACS
-- Hierarchy Level: 4
-- 
-- ACS: connects the add-compare and select units
-- and performs the state metric normalization
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_ACS IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        acs_in                            :   IN    vector_of_std_logic_vector2(0 TO 3);  -- ufix2 [4]
        acs_rst                           :   IN    std_logic;  -- ufix1
        dec                               :   OUT   std_logic_vector(0 TO 63);  -- ufix1 [64]
        idx                               :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
        );
END CombinedT_ip_src_ACS;


ARCHITECTURE rtl OF CombinedT_ip_src_ACS IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_ACSRenorm
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          stMet                           :   IN    vector_of_std_logic_vector5(0 TO 63);  -- ufix5 [64]
          normval                         :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
          idx                             :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_ACSEngine
    PORT( branchMetric                    :   IN    vector_of_std_logic_vector5(0 TO 3);  -- ufix5 [4]
          stateMetric                     :   IN    vector_of_std_logic_vector5(0 TO 63);  -- ufix5 [64]
          acsDecision                     :   OUT   std_logic_vector(0 TO 63);  -- ufix1 [64]
          nextStateMetric                 :   OUT   vector_of_std_logic_vector5(0 TO 63)  -- ufix5 [64]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_ACSRenorm
    USE ENTITY work.CombinedT_ip_src_ACSRenorm(rtl);

  FOR ALL : CombinedT_ip_src_ACSEngine
    USE ENTITY work.CombinedT_ip_src_ACSEngine(rtl);

  -- Constants
  CONSTANT nc                             : vector_of_unsigned5(0 TO 63) := 
    (to_unsigned(16#00#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5),
     to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#0F#, 5));  -- ufix5 [64]

  -- Signals
  SIGNAL acs_in_unsigned                  : vector_of_unsigned2(0 TO 3);  -- ufix2 [4]
  SIGNAL intdelay_reg                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL acs_rst_delay                    : std_logic;  -- ufix1
  SIGNAL resetgen_FSM_s                   : std_logic;  -- ufix1
  SIGNAL resetgen_FSM_count               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL resetgen_FSM_s_next              : std_logic;  -- ufix1
  SIGNAL resetgen_FSM_count_next          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL FSMout                           : std_logic;  -- ufix1
  SIGNAL normvalRst_1                     : std_logic;  -- ufix1
  SIGNAL syncnt                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL isCntLimit                       : std_logic;  -- ufix1
  SIGNAL synaccu                          : std_logic;  -- ufix1
  SIGNAL dsyncaccu                        : std_logic;  -- ufix1
  SIGNAL stMetregEnb                      : std_logic;
  SIGNAL nstMet                           : vector_of_std_logic_vector5(0 TO 63);  -- ufix5 [64]
  SIGNAL nstMet_unsigned                  : vector_of_unsigned5(0 TO 63);  -- ufix5 [64]
  SIGNAL stMet                            : vector_of_unsigned5(0 TO 63);  -- ufix5 [64]
  SIGNAL stMet_1                          : vector_of_std_logic_vector5(0 TO 63);  -- ufix5 [64]
  SIGNAL normval                          : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL idx_tmp                          : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL normval_unsigned                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dnormval                         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL bMet_normed                      : vector_of_unsigned5(0 TO 3);  -- ufix5 [4]
  SIGNAL bMet_normed_1                    : vector_of_std_logic_vector5(0 TO 3);  -- ufix5 [4]
  SIGNAL acsdec                           : std_logic_vector(0 TO 63);  -- ufix1 [64]
  SIGNAL acsdec_0                         : std_logic;  -- ufix1
  SIGNAL acsdec_1                         : std_logic;  -- ufix1
  SIGNAL acsdec_2                         : std_logic;  -- ufix1
  SIGNAL acsdec_3                         : std_logic;  -- ufix1
  SIGNAL acsdec_4                         : std_logic;  -- ufix1
  SIGNAL acsdec_5                         : std_logic;  -- ufix1
  SIGNAL acsdec_6                         : std_logic;  -- ufix1
  SIGNAL acsdec_7                         : std_logic;  -- ufix1
  SIGNAL acsdec_8                         : std_logic;  -- ufix1
  SIGNAL acsdec_9                         : std_logic;  -- ufix1
  SIGNAL acsdec_10                        : std_logic;  -- ufix1
  SIGNAL acsdec_11                        : std_logic;  -- ufix1
  SIGNAL acsdec_12                        : std_logic;  -- ufix1
  SIGNAL acsdec_13                        : std_logic;  -- ufix1
  SIGNAL acsdec_14                        : std_logic;  -- ufix1
  SIGNAL acsdec_15                        : std_logic;  -- ufix1
  SIGNAL acsdec_16                        : std_logic;  -- ufix1
  SIGNAL acsdec_17                        : std_logic;  -- ufix1
  SIGNAL acsdec_18                        : std_logic;  -- ufix1
  SIGNAL acsdec_19                        : std_logic;  -- ufix1
  SIGNAL acsdec_20                        : std_logic;  -- ufix1
  SIGNAL acsdec_21                        : std_logic;  -- ufix1
  SIGNAL acsdec_22                        : std_logic;  -- ufix1
  SIGNAL acsdec_23                        : std_logic;  -- ufix1
  SIGNAL acsdec_24                        : std_logic;  -- ufix1
  SIGNAL acsdec_25                        : std_logic;  -- ufix1
  SIGNAL acsdec_26                        : std_logic;  -- ufix1
  SIGNAL acsdec_27                        : std_logic;  -- ufix1
  SIGNAL acsdec_28                        : std_logic;  -- ufix1
  SIGNAL acsdec_29                        : std_logic;  -- ufix1
  SIGNAL acsdec_30                        : std_logic;  -- ufix1
  SIGNAL acsdec_31                        : std_logic;  -- ufix1
  SIGNAL acsdec_32                        : std_logic;  -- ufix1
  SIGNAL acsdec_33                        : std_logic;  -- ufix1
  SIGNAL acsdec_34                        : std_logic;  -- ufix1
  SIGNAL acsdec_35                        : std_logic;  -- ufix1
  SIGNAL acsdec_36                        : std_logic;  -- ufix1
  SIGNAL acsdec_37                        : std_logic;  -- ufix1
  SIGNAL acsdec_38                        : std_logic;  -- ufix1
  SIGNAL acsdec_39                        : std_logic;  -- ufix1
  SIGNAL acsdec_40                        : std_logic;  -- ufix1
  SIGNAL acsdec_41                        : std_logic;  -- ufix1
  SIGNAL acsdec_42                        : std_logic;  -- ufix1
  SIGNAL acsdec_43                        : std_logic;  -- ufix1
  SIGNAL acsdec_44                        : std_logic;  -- ufix1
  SIGNAL acsdec_45                        : std_logic;  -- ufix1
  SIGNAL acsdec_46                        : std_logic;  -- ufix1
  SIGNAL acsdec_47                        : std_logic;  -- ufix1
  SIGNAL acsdec_48                        : std_logic;  -- ufix1
  SIGNAL acsdec_49                        : std_logic;  -- ufix1
  SIGNAL acsdec_50                        : std_logic;  -- ufix1
  SIGNAL acsdec_51                        : std_logic;  -- ufix1
  SIGNAL acsdec_52                        : std_logic;  -- ufix1
  SIGNAL acsdec_53                        : std_logic;  -- ufix1
  SIGNAL acsdec_54                        : std_logic;  -- ufix1
  SIGNAL acsdec_55                        : std_logic;  -- ufix1
  SIGNAL acsdec_56                        : std_logic;  -- ufix1
  SIGNAL acsdec_57                        : std_logic;  -- ufix1
  SIGNAL acsdec_58                        : std_logic;  -- ufix1
  SIGNAL acsdec_59                        : std_logic;  -- ufix1
  SIGNAL acsdec_60                        : std_logic;  -- ufix1
  SIGNAL acsdec_61                        : std_logic;  -- ufix1
  SIGNAL acsdec_62                        : std_logic;  -- ufix1
  SIGNAL acsdec_63                        : std_logic;  -- ufix1
  SIGNAL intdelay_out_1                   : std_logic;  -- ufix1
  SIGNAL intdelay_1_reg                   : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_out_2                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_3                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_4                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_5                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_6                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_7                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_8                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_9                   : std_logic;  -- ufix1
  SIGNAL intdelay_out_10                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_11                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_12                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_13                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_14                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_15                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_16                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_17                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_18                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_19                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_20                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_21                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_22                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_23                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_24                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_25                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_26                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_27                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_28                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_29                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_30                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_31                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_32                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_33                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_34                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_35                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_36                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_37                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_38                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_39                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_40                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_41                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_42                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_43                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_44                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_45                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_46                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_47                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_48                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_49                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_50                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_51                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_52                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_53                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_54                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_55                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_56                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_57                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_58                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_59                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_60                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_61                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_62                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_63                  : std_logic;  -- ufix1
  SIGNAL intdelay_out_64                  : std_logic;  -- ufix1
  SIGNAL intdelay_1_reg_1                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_2                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_3                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_4                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_5                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_6                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_7                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_8                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_9                 : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_10                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_11                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_12                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_13                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_14                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_15                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_16                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_17                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_18                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_19                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_20                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_21                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_22                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_23                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_24                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_25                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_26                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_27                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_28                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_29                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_30                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_31                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_32                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_33                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_34                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_35                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_36                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_37                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_38                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_39                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_40                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_41                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_42                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_43                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_44                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_45                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_46                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_47                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_48                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_49                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_50                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_51                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_52                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_53                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_54                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_55                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_56                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_57                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_58                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_59                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_60                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_61                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_62                : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL intdelay_1_reg_63                : std_logic_vector(0 TO 7);  -- ufix1 [8]

BEGIN
  u_ACSrenorm_inst : CombinedT_ip_src_ACSRenorm
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              stMet => nstMet,  -- ufix5 [64]
              normval => normval,  -- ufix5
              idx => idx_tmp  -- ufix6
              );

  -- ACS Unit Instantiation
  u_ACSEngine : CombinedT_ip_src_ACSEngine
    PORT MAP( branchMetric => bMet_normed_1,  -- ufix5 [4]
              stateMetric => stMet_1,  -- ufix5 [64]
              acsDecision => acsdec,  -- ufix1 [64]
              nextStateMetric => nstMet  -- ufix5 [64]
              );

  outputgen3: FOR k IN 0 TO 3 GENERATE
    acs_in_unsigned(k) <= unsigned(acs_in(k));
  END GENERATE;

  -- Delay the reset signal
  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        intdelay_reg(0) <= acs_rst;
        intdelay_reg(1) <= intdelay_reg(0);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  acs_rst_delay <= intdelay_reg(1);

  -- FSM that generates signal to reset NormvalRegister
  resetgen_FSM_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resetgen_FSM_s <= '0';
      resetgen_FSM_count <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resetgen_FSM_s <= resetgen_FSM_s_next;
        resetgen_FSM_count <= resetgen_FSM_count_next;
      END IF;
    END IF;
  END PROCESS resetgen_FSM_process;

  resetgen_FSM_output : PROCESS (resetgen_FSM_s, resetgen_FSM_count, acs_rst_delay)
  BEGIN
    resetgen_FSM_s_next <= resetgen_FSM_s;
    resetgen_FSM_count_next <= resetgen_FSM_count;
    FSMout <= '0';
    CASE resetgen_FSM_s IS
      WHEN '0' =>
        IF acs_rst_delay /= '0' THEN 
          resetgen_FSM_s_next <= '1';
          resetgen_FSM_count_next <= to_unsigned(16#1#, 4);
          FSMout <= '1';
        ELSE 
          resetgen_FSM_count_next <= to_unsigned(16#0#, 4);
        END IF;
      WHEN '1' =>
        IF (acs_rst_delay > '0') OR (resetgen_FSM_count < to_unsigned(16#8#, 4)) THEN 
          resetgen_FSM_count_next <= resetgen_FSM_count + to_unsigned(16#1#, 4);
          FSMout <= '1';
        ELSE 
          resetgen_FSM_s_next <= '0';
        END IF;
      WHEN OTHERS => 
        NULL;
    END CASE;
  END PROCESS resetgen_FSM_output;


  normvalRst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      normvalRst_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        normvalRst_1 <= FSMout;
      END IF;
    END IF;
  END PROCESS normvalRst_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  -- 
  -- Delays used to synchronize the state metric with valid branch metric data
  counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      syncnt <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF syncnt >= to_unsigned(16#2#, 2) THEN 
          syncnt <= to_unsigned(16#0#, 2);
        ELSE 
          syncnt <= syncnt + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS counter_process;


  
  isCntLimit <= '1' WHEN syncnt >= to_unsigned(16#2#, 2) ELSE
      '0';

  synaccuRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dsyncaccu <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dsyncaccu <= synaccu;
      END IF;
    END IF;
  END PROCESS synaccuRegister_process;


  synaccu <= isCntLimit OR dsyncaccu;

  
  stMetregEnb <= '1' WHEN synaccu > '0' ELSE
      '0';

  outputgen2: FOR k IN 0 TO 63 GENERATE
    nstMet_unsigned(k) <= unsigned(nstMet(k));
  END GENERATE;

  -- State metric register
  stMetRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      stMet <= nc;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF acs_rst_delay = '1' THEN
          stMet <= nc;
        ELSIF stMetregEnb = '1' THEN
          stMet <= nstMet_unsigned;
        END IF;
      END IF;
    END IF;
  END PROCESS stMetRegister_process;


  outputgen1: FOR k IN 0 TO 63 GENERATE
    stMet_1(k) <= std_logic_vector(stMet(k));
  END GENERATE;

  normval_unsigned <= unsigned(normval);

  NormvalRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dnormval <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF normvalRst_1 = '1' THEN
          dnormval <= to_unsigned(16#00#, 5);
        ELSE 
          dnormval <= normval_unsigned;
        END IF;
      END IF;
    END IF;
  END PROCESS NormvalRegister_process;


  -- Branch Metric adjustment adders

  bMet_normed_gen: FOR t_0 IN 0 TO 3 GENERATE
    bMet_normed(t_0) <= resize(acs_in_unsigned(t_0), 5) + dnormval;
  END GENERATE bMet_normed_gen;


  outputgen: FOR k IN 0 TO 3 GENERATE
    bMet_normed_1(k) <= std_logic_vector(bMet_normed(k));
  END GENERATE;

  -- Matching delay from Minimum tree
  acsdec_0 <= acsdec(0);

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_1_reg <= (OTHERS => '0');
      intdelay_1_reg_1 <= (OTHERS => '0');
      intdelay_1_reg_2 <= (OTHERS => '0');
      intdelay_1_reg_3 <= (OTHERS => '0');
      intdelay_1_reg_4 <= (OTHERS => '0');
      intdelay_1_reg_5 <= (OTHERS => '0');
      intdelay_1_reg_6 <= (OTHERS => '0');
      intdelay_1_reg_7 <= (OTHERS => '0');
      intdelay_1_reg_8 <= (OTHERS => '0');
      intdelay_1_reg_9 <= (OTHERS => '0');
      intdelay_1_reg_10 <= (OTHERS => '0');
      intdelay_1_reg_11 <= (OTHERS => '0');
      intdelay_1_reg_12 <= (OTHERS => '0');
      intdelay_1_reg_13 <= (OTHERS => '0');
      intdelay_1_reg_14 <= (OTHERS => '0');
      intdelay_1_reg_15 <= (OTHERS => '0');
      intdelay_1_reg_16 <= (OTHERS => '0');
      intdelay_1_reg_17 <= (OTHERS => '0');
      intdelay_1_reg_18 <= (OTHERS => '0');
      intdelay_1_reg_19 <= (OTHERS => '0');
      intdelay_1_reg_20 <= (OTHERS => '0');
      intdelay_1_reg_21 <= (OTHERS => '0');
      intdelay_1_reg_22 <= (OTHERS => '0');
      intdelay_1_reg_23 <= (OTHERS => '0');
      intdelay_1_reg_24 <= (OTHERS => '0');
      intdelay_1_reg_25 <= (OTHERS => '0');
      intdelay_1_reg_26 <= (OTHERS => '0');
      intdelay_1_reg_27 <= (OTHERS => '0');
      intdelay_1_reg_28 <= (OTHERS => '0');
      intdelay_1_reg_29 <= (OTHERS => '0');
      intdelay_1_reg_30 <= (OTHERS => '0');
      intdelay_1_reg_31 <= (OTHERS => '0');
      intdelay_1_reg_32 <= (OTHERS => '0');
      intdelay_1_reg_33 <= (OTHERS => '0');
      intdelay_1_reg_34 <= (OTHERS => '0');
      intdelay_1_reg_35 <= (OTHERS => '0');
      intdelay_1_reg_36 <= (OTHERS => '0');
      intdelay_1_reg_37 <= (OTHERS => '0');
      intdelay_1_reg_38 <= (OTHERS => '0');
      intdelay_1_reg_39 <= (OTHERS => '0');
      intdelay_1_reg_40 <= (OTHERS => '0');
      intdelay_1_reg_41 <= (OTHERS => '0');
      intdelay_1_reg_42 <= (OTHERS => '0');
      intdelay_1_reg_43 <= (OTHERS => '0');
      intdelay_1_reg_44 <= (OTHERS => '0');
      intdelay_1_reg_45 <= (OTHERS => '0');
      intdelay_1_reg_46 <= (OTHERS => '0');
      intdelay_1_reg_47 <= (OTHERS => '0');
      intdelay_1_reg_48 <= (OTHERS => '0');
      intdelay_1_reg_49 <= (OTHERS => '0');
      intdelay_1_reg_50 <= (OTHERS => '0');
      intdelay_1_reg_51 <= (OTHERS => '0');
      intdelay_1_reg_52 <= (OTHERS => '0');
      intdelay_1_reg_53 <= (OTHERS => '0');
      intdelay_1_reg_54 <= (OTHERS => '0');
      intdelay_1_reg_55 <= (OTHERS => '0');
      intdelay_1_reg_56 <= (OTHERS => '0');
      intdelay_1_reg_57 <= (OTHERS => '0');
      intdelay_1_reg_58 <= (OTHERS => '0');
      intdelay_1_reg_59 <= (OTHERS => '0');
      intdelay_1_reg_60 <= (OTHERS => '0');
      intdelay_1_reg_61 <= (OTHERS => '0');
      intdelay_1_reg_62 <= (OTHERS => '0');
      intdelay_1_reg_63 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        intdelay_1_reg(0) <= acsdec_0;
        intdelay_1_reg(1 TO 7) <= intdelay_1_reg(0 TO 6);
        intdelay_1_reg_1(0) <= acsdec_1;
        intdelay_1_reg_1(1 TO 7) <= intdelay_1_reg_1(0 TO 6);
        intdelay_1_reg_2(0) <= acsdec_2;
        intdelay_1_reg_2(1 TO 7) <= intdelay_1_reg_2(0 TO 6);
        intdelay_1_reg_3(0) <= acsdec_3;
        intdelay_1_reg_3(1 TO 7) <= intdelay_1_reg_3(0 TO 6);
        intdelay_1_reg_4(0) <= acsdec_4;
        intdelay_1_reg_4(1 TO 7) <= intdelay_1_reg_4(0 TO 6);
        intdelay_1_reg_5(0) <= acsdec_5;
        intdelay_1_reg_5(1 TO 7) <= intdelay_1_reg_5(0 TO 6);
        intdelay_1_reg_6(0) <= acsdec_6;
        intdelay_1_reg_6(1 TO 7) <= intdelay_1_reg_6(0 TO 6);
        intdelay_1_reg_7(0) <= acsdec_7;
        intdelay_1_reg_7(1 TO 7) <= intdelay_1_reg_7(0 TO 6);
        intdelay_1_reg_8(0) <= acsdec_8;
        intdelay_1_reg_8(1 TO 7) <= intdelay_1_reg_8(0 TO 6);
        intdelay_1_reg_9(0) <= acsdec_9;
        intdelay_1_reg_9(1 TO 7) <= intdelay_1_reg_9(0 TO 6);
        intdelay_1_reg_10(0) <= acsdec_10;
        intdelay_1_reg_10(1 TO 7) <= intdelay_1_reg_10(0 TO 6);
        intdelay_1_reg_11(0) <= acsdec_11;
        intdelay_1_reg_11(1 TO 7) <= intdelay_1_reg_11(0 TO 6);
        intdelay_1_reg_12(0) <= acsdec_12;
        intdelay_1_reg_12(1 TO 7) <= intdelay_1_reg_12(0 TO 6);
        intdelay_1_reg_13(0) <= acsdec_13;
        intdelay_1_reg_13(1 TO 7) <= intdelay_1_reg_13(0 TO 6);
        intdelay_1_reg_14(0) <= acsdec_14;
        intdelay_1_reg_14(1 TO 7) <= intdelay_1_reg_14(0 TO 6);
        intdelay_1_reg_15(0) <= acsdec_15;
        intdelay_1_reg_15(1 TO 7) <= intdelay_1_reg_15(0 TO 6);
        intdelay_1_reg_16(0) <= acsdec_16;
        intdelay_1_reg_16(1 TO 7) <= intdelay_1_reg_16(0 TO 6);
        intdelay_1_reg_17(0) <= acsdec_17;
        intdelay_1_reg_17(1 TO 7) <= intdelay_1_reg_17(0 TO 6);
        intdelay_1_reg_18(0) <= acsdec_18;
        intdelay_1_reg_18(1 TO 7) <= intdelay_1_reg_18(0 TO 6);
        intdelay_1_reg_19(0) <= acsdec_19;
        intdelay_1_reg_19(1 TO 7) <= intdelay_1_reg_19(0 TO 6);
        intdelay_1_reg_20(0) <= acsdec_20;
        intdelay_1_reg_20(1 TO 7) <= intdelay_1_reg_20(0 TO 6);
        intdelay_1_reg_21(0) <= acsdec_21;
        intdelay_1_reg_21(1 TO 7) <= intdelay_1_reg_21(0 TO 6);
        intdelay_1_reg_22(0) <= acsdec_22;
        intdelay_1_reg_22(1 TO 7) <= intdelay_1_reg_22(0 TO 6);
        intdelay_1_reg_23(0) <= acsdec_23;
        intdelay_1_reg_23(1 TO 7) <= intdelay_1_reg_23(0 TO 6);
        intdelay_1_reg_24(0) <= acsdec_24;
        intdelay_1_reg_24(1 TO 7) <= intdelay_1_reg_24(0 TO 6);
        intdelay_1_reg_25(0) <= acsdec_25;
        intdelay_1_reg_25(1 TO 7) <= intdelay_1_reg_25(0 TO 6);
        intdelay_1_reg_26(0) <= acsdec_26;
        intdelay_1_reg_26(1 TO 7) <= intdelay_1_reg_26(0 TO 6);
        intdelay_1_reg_27(0) <= acsdec_27;
        intdelay_1_reg_27(1 TO 7) <= intdelay_1_reg_27(0 TO 6);
        intdelay_1_reg_28(0) <= acsdec_28;
        intdelay_1_reg_28(1 TO 7) <= intdelay_1_reg_28(0 TO 6);
        intdelay_1_reg_29(0) <= acsdec_29;
        intdelay_1_reg_29(1 TO 7) <= intdelay_1_reg_29(0 TO 6);
        intdelay_1_reg_30(0) <= acsdec_30;
        intdelay_1_reg_30(1 TO 7) <= intdelay_1_reg_30(0 TO 6);
        intdelay_1_reg_31(0) <= acsdec_31;
        intdelay_1_reg_31(1 TO 7) <= intdelay_1_reg_31(0 TO 6);
        intdelay_1_reg_32(0) <= acsdec_32;
        intdelay_1_reg_32(1 TO 7) <= intdelay_1_reg_32(0 TO 6);
        intdelay_1_reg_33(0) <= acsdec_33;
        intdelay_1_reg_33(1 TO 7) <= intdelay_1_reg_33(0 TO 6);
        intdelay_1_reg_34(0) <= acsdec_34;
        intdelay_1_reg_34(1 TO 7) <= intdelay_1_reg_34(0 TO 6);
        intdelay_1_reg_35(0) <= acsdec_35;
        intdelay_1_reg_35(1 TO 7) <= intdelay_1_reg_35(0 TO 6);
        intdelay_1_reg_36(0) <= acsdec_36;
        intdelay_1_reg_36(1 TO 7) <= intdelay_1_reg_36(0 TO 6);
        intdelay_1_reg_37(0) <= acsdec_37;
        intdelay_1_reg_37(1 TO 7) <= intdelay_1_reg_37(0 TO 6);
        intdelay_1_reg_38(0) <= acsdec_38;
        intdelay_1_reg_38(1 TO 7) <= intdelay_1_reg_38(0 TO 6);
        intdelay_1_reg_39(0) <= acsdec_39;
        intdelay_1_reg_39(1 TO 7) <= intdelay_1_reg_39(0 TO 6);
        intdelay_1_reg_40(0) <= acsdec_40;
        intdelay_1_reg_40(1 TO 7) <= intdelay_1_reg_40(0 TO 6);
        intdelay_1_reg_41(0) <= acsdec_41;
        intdelay_1_reg_41(1 TO 7) <= intdelay_1_reg_41(0 TO 6);
        intdelay_1_reg_42(0) <= acsdec_42;
        intdelay_1_reg_42(1 TO 7) <= intdelay_1_reg_42(0 TO 6);
        intdelay_1_reg_43(0) <= acsdec_43;
        intdelay_1_reg_43(1 TO 7) <= intdelay_1_reg_43(0 TO 6);
        intdelay_1_reg_44(0) <= acsdec_44;
        intdelay_1_reg_44(1 TO 7) <= intdelay_1_reg_44(0 TO 6);
        intdelay_1_reg_45(0) <= acsdec_45;
        intdelay_1_reg_45(1 TO 7) <= intdelay_1_reg_45(0 TO 6);
        intdelay_1_reg_46(0) <= acsdec_46;
        intdelay_1_reg_46(1 TO 7) <= intdelay_1_reg_46(0 TO 6);
        intdelay_1_reg_47(0) <= acsdec_47;
        intdelay_1_reg_47(1 TO 7) <= intdelay_1_reg_47(0 TO 6);
        intdelay_1_reg_48(0) <= acsdec_48;
        intdelay_1_reg_48(1 TO 7) <= intdelay_1_reg_48(0 TO 6);
        intdelay_1_reg_49(0) <= acsdec_49;
        intdelay_1_reg_49(1 TO 7) <= intdelay_1_reg_49(0 TO 6);
        intdelay_1_reg_50(0) <= acsdec_50;
        intdelay_1_reg_50(1 TO 7) <= intdelay_1_reg_50(0 TO 6);
        intdelay_1_reg_51(0) <= acsdec_51;
        intdelay_1_reg_51(1 TO 7) <= intdelay_1_reg_51(0 TO 6);
        intdelay_1_reg_52(0) <= acsdec_52;
        intdelay_1_reg_52(1 TO 7) <= intdelay_1_reg_52(0 TO 6);
        intdelay_1_reg_53(0) <= acsdec_53;
        intdelay_1_reg_53(1 TO 7) <= intdelay_1_reg_53(0 TO 6);
        intdelay_1_reg_54(0) <= acsdec_54;
        intdelay_1_reg_54(1 TO 7) <= intdelay_1_reg_54(0 TO 6);
        intdelay_1_reg_55(0) <= acsdec_55;
        intdelay_1_reg_55(1 TO 7) <= intdelay_1_reg_55(0 TO 6);
        intdelay_1_reg_56(0) <= acsdec_56;
        intdelay_1_reg_56(1 TO 7) <= intdelay_1_reg_56(0 TO 6);
        intdelay_1_reg_57(0) <= acsdec_57;
        intdelay_1_reg_57(1 TO 7) <= intdelay_1_reg_57(0 TO 6);
        intdelay_1_reg_58(0) <= acsdec_58;
        intdelay_1_reg_58(1 TO 7) <= intdelay_1_reg_58(0 TO 6);
        intdelay_1_reg_59(0) <= acsdec_59;
        intdelay_1_reg_59(1 TO 7) <= intdelay_1_reg_59(0 TO 6);
        intdelay_1_reg_60(0) <= acsdec_60;
        intdelay_1_reg_60(1 TO 7) <= intdelay_1_reg_60(0 TO 6);
        intdelay_1_reg_61(0) <= acsdec_61;
        intdelay_1_reg_61(1 TO 7) <= intdelay_1_reg_61(0 TO 6);
        intdelay_1_reg_62(0) <= acsdec_62;
        intdelay_1_reg_62(1 TO 7) <= intdelay_1_reg_62(0 TO 6);
        intdelay_1_reg_63(0) <= acsdec_63;
        intdelay_1_reg_63(1 TO 7) <= intdelay_1_reg_63(0 TO 6);
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  intdelay_out_1 <= intdelay_1_reg(7);
  intdelay_out_2 <= intdelay_1_reg_1(7);
  intdelay_out_3 <= intdelay_1_reg_2(7);
  intdelay_out_4 <= intdelay_1_reg_3(7);
  intdelay_out_5 <= intdelay_1_reg_4(7);
  intdelay_out_6 <= intdelay_1_reg_5(7);
  intdelay_out_7 <= intdelay_1_reg_6(7);
  intdelay_out_8 <= intdelay_1_reg_7(7);
  intdelay_out_9 <= intdelay_1_reg_8(7);
  intdelay_out_10 <= intdelay_1_reg_9(7);
  intdelay_out_11 <= intdelay_1_reg_10(7);
  intdelay_out_12 <= intdelay_1_reg_11(7);
  intdelay_out_13 <= intdelay_1_reg_12(7);
  intdelay_out_14 <= intdelay_1_reg_13(7);
  intdelay_out_15 <= intdelay_1_reg_14(7);
  intdelay_out_16 <= intdelay_1_reg_15(7);
  intdelay_out_17 <= intdelay_1_reg_16(7);
  intdelay_out_18 <= intdelay_1_reg_17(7);
  intdelay_out_19 <= intdelay_1_reg_18(7);
  intdelay_out_20 <= intdelay_1_reg_19(7);
  intdelay_out_21 <= intdelay_1_reg_20(7);
  intdelay_out_22 <= intdelay_1_reg_21(7);
  intdelay_out_23 <= intdelay_1_reg_22(7);
  intdelay_out_24 <= intdelay_1_reg_23(7);
  intdelay_out_25 <= intdelay_1_reg_24(7);
  intdelay_out_26 <= intdelay_1_reg_25(7);
  intdelay_out_27 <= intdelay_1_reg_26(7);
  intdelay_out_28 <= intdelay_1_reg_27(7);
  intdelay_out_29 <= intdelay_1_reg_28(7);
  intdelay_out_30 <= intdelay_1_reg_29(7);
  intdelay_out_31 <= intdelay_1_reg_30(7);
  intdelay_out_32 <= intdelay_1_reg_31(7);
  intdelay_out_33 <= intdelay_1_reg_32(7);
  intdelay_out_34 <= intdelay_1_reg_33(7);
  intdelay_out_35 <= intdelay_1_reg_34(7);
  intdelay_out_36 <= intdelay_1_reg_35(7);
  intdelay_out_37 <= intdelay_1_reg_36(7);
  intdelay_out_38 <= intdelay_1_reg_37(7);
  intdelay_out_39 <= intdelay_1_reg_38(7);
  intdelay_out_40 <= intdelay_1_reg_39(7);
  intdelay_out_41 <= intdelay_1_reg_40(7);
  intdelay_out_42 <= intdelay_1_reg_41(7);
  intdelay_out_43 <= intdelay_1_reg_42(7);
  intdelay_out_44 <= intdelay_1_reg_43(7);
  intdelay_out_45 <= intdelay_1_reg_44(7);
  intdelay_out_46 <= intdelay_1_reg_45(7);
  intdelay_out_47 <= intdelay_1_reg_46(7);
  intdelay_out_48 <= intdelay_1_reg_47(7);
  intdelay_out_49 <= intdelay_1_reg_48(7);
  intdelay_out_50 <= intdelay_1_reg_49(7);
  intdelay_out_51 <= intdelay_1_reg_50(7);
  intdelay_out_52 <= intdelay_1_reg_51(7);
  intdelay_out_53 <= intdelay_1_reg_52(7);
  intdelay_out_54 <= intdelay_1_reg_53(7);
  intdelay_out_55 <= intdelay_1_reg_54(7);
  intdelay_out_56 <= intdelay_1_reg_55(7);
  intdelay_out_57 <= intdelay_1_reg_56(7);
  intdelay_out_58 <= intdelay_1_reg_57(7);
  intdelay_out_59 <= intdelay_1_reg_58(7);
  intdelay_out_60 <= intdelay_1_reg_59(7);
  intdelay_out_61 <= intdelay_1_reg_60(7);
  intdelay_out_62 <= intdelay_1_reg_61(7);
  intdelay_out_63 <= intdelay_1_reg_62(7);
  intdelay_out_64 <= intdelay_1_reg_63(7);

  acsdec_1 <= acsdec(1);

  acsdec_2 <= acsdec(2);

  acsdec_3 <= acsdec(3);

  acsdec_4 <= acsdec(4);

  acsdec_5 <= acsdec(5);

  acsdec_6 <= acsdec(6);

  acsdec_7 <= acsdec(7);

  acsdec_8 <= acsdec(8);

  acsdec_9 <= acsdec(9);

  acsdec_10 <= acsdec(10);

  acsdec_11 <= acsdec(11);

  acsdec_12 <= acsdec(12);

  acsdec_13 <= acsdec(13);

  acsdec_14 <= acsdec(14);

  acsdec_15 <= acsdec(15);

  acsdec_16 <= acsdec(16);

  acsdec_17 <= acsdec(17);

  acsdec_18 <= acsdec(18);

  acsdec_19 <= acsdec(19);

  acsdec_20 <= acsdec(20);

  acsdec_21 <= acsdec(21);

  acsdec_22 <= acsdec(22);

  acsdec_23 <= acsdec(23);

  acsdec_24 <= acsdec(24);

  acsdec_25 <= acsdec(25);

  acsdec_26 <= acsdec(26);

  acsdec_27 <= acsdec(27);

  acsdec_28 <= acsdec(28);

  acsdec_29 <= acsdec(29);

  acsdec_30 <= acsdec(30);

  acsdec_31 <= acsdec(31);

  acsdec_32 <= acsdec(32);

  acsdec_33 <= acsdec(33);

  acsdec_34 <= acsdec(34);

  acsdec_35 <= acsdec(35);

  acsdec_36 <= acsdec(36);

  acsdec_37 <= acsdec(37);

  acsdec_38 <= acsdec(38);

  acsdec_39 <= acsdec(39);

  acsdec_40 <= acsdec(40);

  acsdec_41 <= acsdec(41);

  acsdec_42 <= acsdec(42);

  acsdec_43 <= acsdec(43);

  acsdec_44 <= acsdec(44);

  acsdec_45 <= acsdec(45);

  acsdec_46 <= acsdec(46);

  acsdec_47 <= acsdec(47);

  acsdec_48 <= acsdec(48);

  acsdec_49 <= acsdec(49);

  acsdec_50 <= acsdec(50);

  acsdec_51 <= acsdec(51);

  acsdec_52 <= acsdec(52);

  acsdec_53 <= acsdec(53);

  acsdec_54 <= acsdec(54);

  acsdec_55 <= acsdec(55);

  acsdec_56 <= acsdec(56);

  acsdec_57 <= acsdec(57);

  acsdec_58 <= acsdec(58);

  acsdec_59 <= acsdec(59);

  acsdec_60 <= acsdec(60);

  acsdec_61 <= acsdec(61);

  acsdec_62 <= acsdec(62);

  acsdec_63 <= acsdec(63);

  dec(0) <= intdelay_out_1;
  dec(1) <= intdelay_out_2;
  dec(2) <= intdelay_out_3;
  dec(3) <= intdelay_out_4;
  dec(4) <= intdelay_out_5;
  dec(5) <= intdelay_out_6;
  dec(6) <= intdelay_out_7;
  dec(7) <= intdelay_out_8;
  dec(8) <= intdelay_out_9;
  dec(9) <= intdelay_out_10;
  dec(10) <= intdelay_out_11;
  dec(11) <= intdelay_out_12;
  dec(12) <= intdelay_out_13;
  dec(13) <= intdelay_out_14;
  dec(14) <= intdelay_out_15;
  dec(15) <= intdelay_out_16;
  dec(16) <= intdelay_out_17;
  dec(17) <= intdelay_out_18;
  dec(18) <= intdelay_out_19;
  dec(19) <= intdelay_out_20;
  dec(20) <= intdelay_out_21;
  dec(21) <= intdelay_out_22;
  dec(22) <= intdelay_out_23;
  dec(23) <= intdelay_out_24;
  dec(24) <= intdelay_out_25;
  dec(25) <= intdelay_out_26;
  dec(26) <= intdelay_out_27;
  dec(27) <= intdelay_out_28;
  dec(28) <= intdelay_out_29;
  dec(29) <= intdelay_out_30;
  dec(30) <= intdelay_out_31;
  dec(31) <= intdelay_out_32;
  dec(32) <= intdelay_out_33;
  dec(33) <= intdelay_out_34;
  dec(34) <= intdelay_out_35;
  dec(35) <= intdelay_out_36;
  dec(36) <= intdelay_out_37;
  dec(37) <= intdelay_out_38;
  dec(38) <= intdelay_out_39;
  dec(39) <= intdelay_out_40;
  dec(40) <= intdelay_out_41;
  dec(41) <= intdelay_out_42;
  dec(42) <= intdelay_out_43;
  dec(43) <= intdelay_out_44;
  dec(44) <= intdelay_out_45;
  dec(45) <= intdelay_out_46;
  dec(46) <= intdelay_out_47;
  dec(47) <= intdelay_out_48;
  dec(48) <= intdelay_out_49;
  dec(49) <= intdelay_out_50;
  dec(50) <= intdelay_out_51;
  dec(51) <= intdelay_out_52;
  dec(52) <= intdelay_out_53;
  dec(53) <= intdelay_out_54;
  dec(54) <= intdelay_out_55;
  dec(55) <= intdelay_out_56;
  dec(56) <= intdelay_out_57;
  dec(57) <= intdelay_out_58;
  dec(58) <= intdelay_out_59;
  dec(59) <= intdelay_out_60;
  dec(60) <= intdelay_out_61;
  dec(61) <= intdelay_out_62;
  dec(62) <= intdelay_out_63;
  dec(63) <= intdelay_out_64;

  idx <= idx_tmp;

END rtl;

