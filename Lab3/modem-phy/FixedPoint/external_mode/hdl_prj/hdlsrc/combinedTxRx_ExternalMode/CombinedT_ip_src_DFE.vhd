-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_ExternalMode\CombinedT_ip_src_DFE.vhd
-- Created: 2018-02-01 13:20:09
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_DFE
-- Source Path: combinedTxRx_ExternalMode/Combined TX and RX/Receiver HDL/Frame Recover/Equalization and Demodulation/DFE/DFE
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_DFE IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        training_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        training_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        EQmu                              :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Enable_out4                       :   IN    std_logic;
        eqOut_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        eqOut_im                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        err_re                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        err_im                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        start                             :   OUT   std_logic
        );
END CombinedT_ip_src_DFE;


ARCHITECTURE rtl OF CombinedT_ip_src_DFE IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_DotProduct
    PORT( in1_re                          :   IN    vector_of_std_logic_vector16(0 TO 2);  -- sfix16_En15 [3]
          in1_im                          :   IN    vector_of_std_logic_vector16(0 TO 2);  -- sfix16_En15 [3]
          in2_re                          :   IN    vector_of_std_logic_vector16(0 TO 2);  -- sfix16_En15 [3]
          in2_im                          :   IN    vector_of_std_logic_vector16(0 TO 2);  -- sfix16_En15 [3]
          out1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En18
          out1_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En18
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Map_Symbol
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          In1_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          training_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          training_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          reset_1                         :   IN    std_logic;
          Enable_out4                     :   IN    std_logic;
          d_re                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          d_im                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_DotProduct_block
    PORT( in1_re                          :   IN    vector_of_std_logic_vector16(0 TO 4);  -- sfix16_En14 [5]
          in1_im                          :   IN    vector_of_std_logic_vector16(0 TO 4);  -- sfix16_En14 [5]
          in2_re                          :   IN    vector_of_std_logic_vector16(0 TO 4);  -- sfix16_En14 [5]
          in2_im                          :   IN    vector_of_std_logic_vector16(0 TO 4);  -- sfix16_En14 [5]
          out1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          out1_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_DotProduct
    USE ENTITY work.CombinedT_ip_src_DotProduct(rtl);

  FOR ALL : CombinedT_ip_src_Map_Symbol
    USE ENTITY work.CombinedT_ip_src_Map_Symbol(rtl);

  FOR ALL : CombinedT_ip_src_DotProduct_block
    USE ENTITY work.CombinedT_ip_src_DotProduct_block(rtl);

  -- Constants
  CONSTANT nc                             : vector_of_signed16(0 TO 4) := 
    (to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#4000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16));  -- sfix16 [5]

  -- Signals
  SIGNAL Enable_out4_1                    : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL resetTagFrom1_out1               : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay_data_so_DFE_can_reset1_out1 : std_logic;
  SIGNAL training_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL training_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_iv_re     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_iv_im     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_toDel_re  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_toDel_im  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay_To_Reference_Tap_delOut_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_delOut_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_toDel_re_1 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_toDel_im_1 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay_To_Reference_Tap_delOut_re_1 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_delOut_im_1 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_out1_re   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_out1_im   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_out1_re_1 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay_To_Reference_Tap_out1_im_1 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reset_2                          : std_logic;
  SIGNAL EQmu_signed                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL Pipeline_Delay1_out1             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Reciprocal_out1                  : unsigned(15 DOWNTO 0);  -- ufix16_En22
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Pipeline_Delay2_out1             : unsigned(15 DOWNTO 0);  -- ufix16_En22
  SIGNAL Pipeline_Delay2_out1_1           : unsigned(15 DOWNTO 0);  -- ufix16_En22
  SIGNAL enb_gated_6                      : std_logic;
  SIGNAL enb_gated_7                      : std_logic;
  SIGNAL enb_gated_8                      : std_logic;
  SIGNAL enb_gated_9                      : std_logic;
  SIGNAL enb_gated_10                     : std_logic;
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap0_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap0_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap0_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap0_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap0_last_value_re        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap0_last_value_im        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap1_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap1_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap1_last_value_re        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap1_last_value_im        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap2_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap2_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap2_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap2_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap2_last_value_re        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap2_last_value_im        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap3_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap3_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap3_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap3_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap3_last_value_re        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap3_last_value_im        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap4_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap4_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap4_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap4_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap4_last_value_re        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_tap4_last_value_im        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL InputBuffer_out1_re              : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL InputBuffer_out1_im              : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Constant3_out1_re                : vector_of_signed16(0 TO 4);  -- sfix16_En4 [5]
  SIGNAL Constant3_out1_im                : vector_of_signed16(0 TO 4);  -- sfix16_En4 [5]
  SIGNAL Constant3_out1_dtc_re            : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Constant3_out1_dtc_im            : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL InputBuffer_out1_re_1            : vector_of_std_logic_vector16(0 TO 4);  -- ufix16 [5]
  SIGNAL InputBuffer_out1_im_1            : vector_of_std_logic_vector16(0 TO 4);  -- ufix16 [5]
  SIGNAL enb_gated_11                     : std_logic;
  SIGNAL resetTagFrom_out1                : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL enb_gated_12                     : std_logic;
  SIGNAL enb_gated_13                     : std_logic;
  SIGNAL enb_gated_14                     : std_logic;
  SIGNAL Constant2_out1_re                : vector_of_signed16(0 TO 2);  -- sfix16_En4 [3]
  SIGNAL Constant2_out1_im                : vector_of_signed16(0 TO 2);  -- sfix16_En4 [3]
  SIGNAL Constant2_out1_dtc_re            : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Constant2_out1_dtc_im            : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Dot_Product1_out1_im             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dot_Product1_out1_im_signed      : signed(15 DOWNTO 0);  -- sfix16_En18
  SIGNAL Decision_Buffer_out1_im          : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Decision_Buffer_out1_im_1        : vector_of_std_logic_vector16(0 TO 2);  -- ufix16 [3]
  SIGNAL Decision_Buffer_out1_re          : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Decision_Buffer_out1_re_1        : vector_of_std_logic_vector16(0 TO 2);  -- ufix16 [3]
  SIGNAL Backward_Taps_out1_im            : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Backward_Taps_out1_im_1          : vector_of_std_logic_vector16(0 TO 2);  -- ufix16 [3]
  SIGNAL Map_Symbol_out1_tap2_im          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap1_im          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap0_im          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_re_signed        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_im_signed        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap0_re          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap0_im_1        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap0_re_1        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap0_last_value_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap0_last_value_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap1_re          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap1_im_1        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap1_re_1        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap1_last_value_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap1_last_value_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap2_re          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap2_im_1        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap2_re_1        : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap2_last_value_re : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Map_Symbol_out1_tap2_last_value_im : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product1_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL Product1_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL Product3_mul_temp                : vector_of_signed32(0 TO 2);  -- sfix32_En37 [3]
  SIGNAL Product3_sub_cast                : vector_of_signed16(0 TO 2);  -- sfix16_En21 [3]
  SIGNAL Product3_mul_temp_1              : vector_of_signed32(0 TO 2);  -- sfix32_En37 [3]
  SIGNAL Product3_sub_cast_1              : vector_of_signed16(0 TO 2);  -- sfix16_En21 [3]
  SIGNAL Product3_mul_temp_2              : vector_of_signed32(0 TO 2);  -- sfix32_En37 [3]
  SIGNAL Product3_add_cast                : vector_of_signed16(0 TO 2);  -- sfix16_En21 [3]
  SIGNAL Product3_mul_temp_3              : vector_of_signed32(0 TO 2);  -- sfix32_En37 [3]
  SIGNAL Product3_add_cast_1              : vector_of_signed16(0 TO 2);  -- sfix16_En21 [3]
  SIGNAL Product3_out1_re                 : vector_of_signed16(0 TO 2);  -- sfix16_En21 [3]
  SIGNAL Product3_out1_im                 : vector_of_signed16(0 TO 2);  -- sfix16_En21 [3]
  SIGNAL Backward_Taps_out1_re            : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Add1_sub_cast                    : vector_of_signed23(0 TO 2);  -- sfix23_En21 [3]
  SIGNAL Add1_sub_cast_1                  : vector_of_signed23(0 TO 2);  -- sfix23_En21 [3]
  SIGNAL Add1_sub_temp                    : vector_of_signed23(0 TO 2);  -- sfix23_En21 [3]
  SIGNAL Add1_sub_cast_2                  : vector_of_signed23(0 TO 2);  -- sfix23_En21 [3]
  SIGNAL Add1_sub_cast_3                  : vector_of_signed23(0 TO 2);  -- sfix23_En21 [3]
  SIGNAL Add1_sub_temp_1                  : vector_of_signed23(0 TO 2);  -- sfix23_En21 [3]
  SIGNAL Add1_out1_re                     : vector_of_signed16(0 TO 2);  -- sfix16_En19 [3]
  SIGNAL Add1_out1_im                     : vector_of_signed16(0 TO 2);  -- sfix16_En19 [3]
  SIGNAL Add1_out1_dtc_re                 : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Add1_out1_dtc_im                 : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Switch_out1_re                   : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Switch_out1_im                   : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Backward_Taps_out1_re_1          : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Backward_Taps_out1_im_2          : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Backward_Taps_out1_last_value_re : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Backward_Taps_out1_last_value_im : vector_of_signed16(0 TO 2);  -- sfix16_En15 [3]
  SIGNAL Backward_Taps_out1_re_2          : vector_of_std_logic_vector16(0 TO 2);  -- ufix16 [3]
  SIGNAL Dot_Product1_out1_re             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dot_Product1_out1_re_signed      : signed(15 DOWNTO 0);  -- sfix16_En18
  SIGNAL Dot_Product_out1_im              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dot_Product_out1_im_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Forward_Taps_out1_im             : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Forward_Taps_out1_im_1           : vector_of_std_logic_vector16(0 TO 4);  -- ufix16 [5]
  SIGNAL Map_Symbol_out1_im               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subtract2_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Subtract2_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Map_Symbol_out1_re               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subtract_sub_cast                : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Subtract_sub_cast_1              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Subtract_sub_temp                : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Subtract_sub_cast_2              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Subtract_sub_cast_3              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Subtract_sub_temp_1              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Subtract_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Subtract_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL conj_cast                        : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL conj_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Math_Function_out1_re            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Math_Function_out1_im            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En37
  SIGNAL Product1_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En37
  SIGNAL Product1_cast_2                  : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Product1_mul_temp_1              : signed(32 DOWNTO 0);  -- sfix33_En37
  SIGNAL Product1_add_cast                : signed(31 DOWNTO 0);  -- sfix32_En37
  SIGNAL Product1_add_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL Product2_mul_temp                : vector_of_signed32(0 TO 4);  -- sfix32_En36 [5]
  SIGNAL Product2_sub_cast                : vector_of_signed16(0 TO 4);  -- sfix16_En22 [5]
  SIGNAL Product2_mul_temp_1              : vector_of_signed32(0 TO 4);  -- sfix32_En36 [5]
  SIGNAL Product2_sub_cast_1              : vector_of_signed16(0 TO 4);  -- sfix16_En22 [5]
  SIGNAL Product2_mul_temp_2              : vector_of_signed32(0 TO 4);  -- sfix32_En36 [5]
  SIGNAL Product2_add_cast                : vector_of_signed16(0 TO 4);  -- sfix16_En22 [5]
  SIGNAL Product2_mul_temp_3              : vector_of_signed32(0 TO 4);  -- sfix32_En36 [5]
  SIGNAL Product2_add_cast_1              : vector_of_signed16(0 TO 4);  -- sfix16_En22 [5]
  SIGNAL Product2_out1_re                 : vector_of_signed16(0 TO 4);  -- sfix16_En22 [5]
  SIGNAL Product2_out1_im                 : vector_of_signed16(0 TO 4);  -- sfix16_En22 [5]
  SIGNAL Forward_Taps_out1_re             : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Add_add_cast                     : vector_of_signed25(0 TO 4);  -- sfix25_En22 [5]
  SIGNAL Add_add_cast_1                   : vector_of_signed25(0 TO 4);  -- sfix25_En22 [5]
  SIGNAL Add_add_temp                     : vector_of_signed25(0 TO 4);  -- sfix25_En22 [5]
  SIGNAL Add_add_cast_2                   : vector_of_signed25(0 TO 4);  -- sfix25_En22 [5]
  SIGNAL Add_add_cast_3                   : vector_of_signed25(0 TO 4);  -- sfix25_En22 [5]
  SIGNAL Add_add_temp_1                   : vector_of_signed25(0 TO 4);  -- sfix25_En22 [5]
  SIGNAL Add_out1_re                      : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Add_out1_im                      : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Switch2_out1_re                  : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Switch2_out1_im                  : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Forward_Taps_out1_re_1           : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Forward_Taps_out1_im_2           : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Forward_Taps_out1_last_value_re  : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Forward_Taps_out1_last_value_im  : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Forward_Taps_out1_re_2           : vector_of_std_logic_vector16(0 TO 4);  -- ufix16 [5]
  SIGNAL Dot_Product_out1_re              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dot_Product_out1_re_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Subtract2_sub_cast               : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Subtract2_sub_cast_1             : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Subtract2_sub_temp               : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Subtract2_sub_cast_2             : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Subtract2_sub_cast_3             : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Subtract2_sub_temp_1             : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL enb_gated_15                     : std_logic;
  SIGNAL Delay_To_Reference_Tap2_reg      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay_To_Reference_Tap2_out1     : std_logic;

BEGIN
  -- FeedForward Taps
  -- 
  -- Decision Feedback Taps

  u_DotProd_linear_inst : CombinedT_ip_src_DotProduct
    PORT MAP( in1_re => Backward_Taps_out1_re_2,  -- sfix16_En15 [3]
              in1_im => Backward_Taps_out1_im_1,  -- sfix16_En15 [3]
              in2_re => Decision_Buffer_out1_re_1,  -- sfix16_En15 [3]
              in2_im => Decision_Buffer_out1_im_1,  -- sfix16_En15 [3]
              out1_re => Dot_Product1_out1_re,  -- sfix16_En18
              out1_im => Dot_Product1_out1_im  -- sfix16_En18
              );

  u_Map_Symbol : CombinedT_ip_src_Map_Symbol
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1_re => std_logic_vector(Subtract2_out1_re),  -- sfix16_En14
              In1_im => std_logic_vector(Subtract2_out1_im),  -- sfix16_En14
              training_re => std_logic_vector(Delay_To_Reference_Tap_out1_re_1),  -- sfix16_En15
              training_im => std_logic_vector(Delay_To_Reference_Tap_out1_im_1),  -- sfix16_En15
              reset_1 => reset_2,
              Enable_out4 => Enable_out4_1,
              d_re => Map_Symbol_out1_re,  -- sfix16_En15
              d_im => Map_Symbol_out1_im  -- sfix16_En15
              );

  u_DotProd_linear_inst1 : CombinedT_ip_src_DotProduct_block
    PORT MAP( in1_re => Forward_Taps_out1_re_2,  -- sfix16_En14 [5]
              in1_im => Forward_Taps_out1_im_1,  -- sfix16_En14 [5]
              in2_re => InputBuffer_out1_re_1,  -- sfix16_En14 [5]
              in2_im => InputBuffer_out1_im_1,  -- sfix16_En14 [5]
              out1_re => Dot_Product_out1_re,  -- sfix16_En14
              out1_im => Dot_Product_out1_im  -- sfix16_En14
              );

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enable_out4_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Enable_out4_1 <= Enable_out4;
      END IF;
    END IF;
  END PROCESS reduced_process;


  enb_gated <= Enable_out4_1 AND enb;

  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resetTagFrom1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resetTagFrom1_out1 <= reset_1;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  
  switch_compare_1 <= '1' WHEN resetTagFrom1_out1 > '0' ELSE
      '0';

  enb_gated_1 <= Enable_out4 AND enb;

  Delay_data_so_DFE_can_reset1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_data_so_DFE_can_reset1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay_data_so_DFE_can_reset1_out1 <= reset_1;
      END IF;
    END IF;
  END PROCESS Delay_data_so_DFE_can_reset1_process;


  training_re_signed <= signed(training_re);

  training_im_signed <= signed(training_im);

  Delay_To_Reference_Tap_iv_re <= to_signed(16#0000#, 16);
  Delay_To_Reference_Tap_iv_im <= to_signed(16#0000#, 16);

  
  Delay_To_Reference_Tap_toDel_re <= training_re_signed WHEN Delay_data_so_DFE_can_reset1_out1 = '0' ELSE
      Delay_To_Reference_Tap_iv_re;
  
  Delay_To_Reference_Tap_toDel_im <= training_im_signed WHEN Delay_data_so_DFE_can_reset1_out1 = '0' ELSE
      Delay_To_Reference_Tap_iv_im;

  enb_gated_2 <= Enable_out4 AND enb;

  Delay_To_Reference_Tap_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_To_Reference_Tap_delOut_re <= to_signed(16#0000#, 16);
      Delay_To_Reference_Tap_delOut_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_2 = '1' THEN
        Delay_To_Reference_Tap_delOut_re <= Delay_To_Reference_Tap_toDel_re;
        Delay_To_Reference_Tap_delOut_im <= Delay_To_Reference_Tap_toDel_im;
      END IF;
    END IF;
  END PROCESS Delay_To_Reference_Tap_lowered_process;


  
  Delay_To_Reference_Tap_toDel_re_1 <= Delay_To_Reference_Tap_delOut_re WHEN Delay_data_so_DFE_can_reset1_out1 = '0' ELSE
      Delay_To_Reference_Tap_iv_re;
  
  Delay_To_Reference_Tap_toDel_im_1 <= Delay_To_Reference_Tap_delOut_im WHEN Delay_data_so_DFE_can_reset1_out1 = '0' ELSE
      Delay_To_Reference_Tap_iv_im;

  enb_gated_3 <= Enable_out4 AND enb;

  Delay_To_Reference_Tap_lowered_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_To_Reference_Tap_delOut_re_1 <= to_signed(16#0000#, 16);
      Delay_To_Reference_Tap_delOut_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_3 = '1' THEN
        Delay_To_Reference_Tap_delOut_re_1 <= Delay_To_Reference_Tap_toDel_re_1;
        Delay_To_Reference_Tap_delOut_im_1 <= Delay_To_Reference_Tap_toDel_im_1;
      END IF;
    END IF;
  END PROCESS Delay_To_Reference_Tap_lowered_1_process;


  
  Delay_To_Reference_Tap_out1_re <= Delay_To_Reference_Tap_delOut_re_1 WHEN Delay_data_so_DFE_can_reset1_out1 = '0' ELSE
      Delay_To_Reference_Tap_iv_re;
  
  Delay_To_Reference_Tap_out1_im <= Delay_To_Reference_Tap_delOut_im_1 WHEN Delay_data_so_DFE_can_reset1_out1 = '0' ELSE
      Delay_To_Reference_Tap_iv_im;

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_To_Reference_Tap_out1_re_1 <= to_signed(16#0000#, 16);
      Delay_To_Reference_Tap_out1_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_To_Reference_Tap_out1_re_1 <= Delay_To_Reference_Tap_out1_re;
        Delay_To_Reference_Tap_out1_im_1 <= Delay_To_Reference_Tap_out1_im;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reset_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reset_2 <= reset_1;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  EQmu_signed <= signed(EQmu);

  enb_gated_4 <= Enable_out4 AND enb;

  Pipeline_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay1_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_4 = '1' THEN
        Pipeline_Delay1_out1 <= EQmu_signed;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay1_process;


  Reciprocal_output : PROCESS (Pipeline_Delay1_out1)
    VARIABLE c : signed(23 DOWNTO 0);
    VARIABLE div_temp : signed(23 DOWNTO 0);
  BEGIN
    IF Pipeline_Delay1_out1 = to_signed(16#0000#, 16) THEN 
      c := to_signed(16#7FFFFF#, 24);
    ELSE 
      div_temp := to_signed(16#400000#, 24) / Pipeline_Delay1_out1;
      c := div_temp;
    END IF;
    IF (c(23) = '0') AND (c(22 DOWNTO 16) /= "0000000") THEN 
      Reciprocal_out1 <= X"FFFF";
    ELSIF c(23) = '1' THEN 
      Reciprocal_out1 <= X"0000";
    ELSE 
      Reciprocal_out1 <= unsigned(c(15 DOWNTO 0));
    END IF;
  END PROCESS Reciprocal_output;


  enb_gated_5 <= Enable_out4 AND enb;

  Pipeline_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay2_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_5 = '1' THEN
        Pipeline_Delay2_out1 <= Reciprocal_out1;
      END IF;
    END IF;
  END PROCESS Pipeline_Delay2_process;


  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pipeline_Delay2_out1_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pipeline_Delay2_out1_1 <= Pipeline_Delay2_out1;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  enb_gated_6 <= Enable_out4_1 AND enb;

  enb_gated_7 <= Enable_out4_1 AND enb;

  enb_gated_8 <= Enable_out4_1 AND enb;

  enb_gated_9 <= Enable_out4_1 AND enb;

  enb_gated_10 <= Enable_out4_1 AND enb;

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  InputBuffer_tap0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap0_re <= to_signed(16#0000#, 16);
      dataIn_tap0_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_10 = '1' THEN
        dataIn_tap0_re <= dataIn_re_signed;
        dataIn_tap0_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS InputBuffer_tap0_process;


  out0_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap0_last_value_re <= to_signed(16#0000#, 16);
      dataIn_tap0_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_10 = '1' THEN
        dataIn_tap0_last_value_re <= dataIn_tap0_re_1;
        dataIn_tap0_last_value_im <= dataIn_tap0_im_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  dataIn_tap0_re_1 <= dataIn_tap0_last_value_re WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap0_re;
  
  dataIn_tap0_im_1 <= dataIn_tap0_last_value_im WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap0_im;

  InputBuffer_tap1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap1_re <= to_signed(16#0000#, 16);
      dataIn_tap1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_9 = '1' THEN
        dataIn_tap1_re <= dataIn_tap0_re_1;
        dataIn_tap1_im <= dataIn_tap0_im_1;
      END IF;
    END IF;
  END PROCESS InputBuffer_tap1_process;


  out0_bypass_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap1_last_value_re <= to_signed(16#0000#, 16);
      dataIn_tap1_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_9 = '1' THEN
        dataIn_tap1_last_value_re <= dataIn_tap1_re_1;
        dataIn_tap1_last_value_im <= dataIn_tap1_im_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_1_process;


  
  dataIn_tap1_re_1 <= dataIn_tap1_last_value_re WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap1_re;
  
  dataIn_tap1_im_1 <= dataIn_tap1_last_value_im WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap1_im;

  InputBuffer_tap2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap2_re <= to_signed(16#0000#, 16);
      dataIn_tap2_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_8 = '1' THEN
        dataIn_tap2_re <= dataIn_tap1_re_1;
        dataIn_tap2_im <= dataIn_tap1_im_1;
      END IF;
    END IF;
  END PROCESS InputBuffer_tap2_process;


  out0_bypass_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap2_last_value_re <= to_signed(16#0000#, 16);
      dataIn_tap2_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_8 = '1' THEN
        dataIn_tap2_last_value_re <= dataIn_tap2_re_1;
        dataIn_tap2_last_value_im <= dataIn_tap2_im_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_2_process;


  
  dataIn_tap2_re_1 <= dataIn_tap2_last_value_re WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap2_re;
  
  dataIn_tap2_im_1 <= dataIn_tap2_last_value_im WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap2_im;

  InputBuffer_tap3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap3_re <= to_signed(16#0000#, 16);
      dataIn_tap3_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_7 = '1' THEN
        dataIn_tap3_re <= dataIn_tap2_re_1;
        dataIn_tap3_im <= dataIn_tap2_im_1;
      END IF;
    END IF;
  END PROCESS InputBuffer_tap3_process;


  out0_bypass_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap3_last_value_re <= to_signed(16#0000#, 16);
      dataIn_tap3_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_7 = '1' THEN
        dataIn_tap3_last_value_re <= dataIn_tap3_re_1;
        dataIn_tap3_last_value_im <= dataIn_tap3_im_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_3_process;


  
  dataIn_tap3_re_1 <= dataIn_tap3_last_value_re WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap3_re;
  
  dataIn_tap3_im_1 <= dataIn_tap3_last_value_im WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap3_im;

  InputBuffer_tap4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap4_re <= to_signed(16#0000#, 16);
      dataIn_tap4_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_6 = '1' THEN
        dataIn_tap4_re <= dataIn_tap3_re_1;
        dataIn_tap4_im <= dataIn_tap3_im_1;
      END IF;
    END IF;
  END PROCESS InputBuffer_tap4_process;


  out0_bypass_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_tap4_last_value_re <= to_signed(16#0000#, 16);
      dataIn_tap4_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_6 = '1' THEN
        dataIn_tap4_last_value_re <= dataIn_tap4_re_1;
        dataIn_tap4_last_value_im <= dataIn_tap4_im_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_4_process;


  
  dataIn_tap4_re_1 <= dataIn_tap4_last_value_re WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap4_re;
  
  dataIn_tap4_im_1 <= dataIn_tap4_last_value_im WHEN Enable_out4_1 = '0' ELSE
      dataIn_tap4_im;

  InputBuffer_out1_re(0) <= dataIn_tap4_re_1;
  InputBuffer_out1_re(1) <= dataIn_tap3_re_1;
  InputBuffer_out1_re(2) <= dataIn_tap2_re_1;
  InputBuffer_out1_re(3) <= dataIn_tap1_re_1;
  InputBuffer_out1_re(4) <= dataIn_tap0_re_1;

  InputBuffer_out1_im(0) <= dataIn_tap4_im_1;
  InputBuffer_out1_im(1) <= dataIn_tap3_im_1;
  InputBuffer_out1_im(2) <= dataIn_tap2_im_1;
  InputBuffer_out1_im(3) <= dataIn_tap1_im_1;
  InputBuffer_out1_im(4) <= dataIn_tap0_im_1;

  Constant3_out1_re(0) <= to_signed(16#0000#, 16);
  Constant3_out1_im(0) <= to_signed(16#0000#, 16);
  Constant3_out1_re(1) <= to_signed(16#0000#, 16);
  Constant3_out1_im(1) <= to_signed(16#0000#, 16);
  Constant3_out1_re(2) <= to_signed(16#0010#, 16);
  Constant3_out1_im(2) <= to_signed(16#0000#, 16);
  Constant3_out1_re(3) <= to_signed(16#0000#, 16);
  Constant3_out1_im(3) <= to_signed(16#0000#, 16);
  Constant3_out1_re(4) <= to_signed(16#0000#, 16);
  Constant3_out1_im(4) <= to_signed(16#0000#, 16);


  Constant3_out1_dtc_im_gen: FOR ii IN 0 TO 4 GENERATE
    Constant3_out1_dtc_re(ii) <= Constant3_out1_re(ii)(5 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
    Constant3_out1_dtc_im(ii) <= Constant3_out1_im(ii)(5 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  END GENERATE Constant3_out1_dtc_im_gen;


  outputgen7: FOR k IN 0 TO 4 GENERATE
    InputBuffer_out1_re_1(k) <= std_logic_vector(InputBuffer_out1_re(k));
  END GENERATE;

  outputgen6: FOR k IN 0 TO 4 GENERATE
    InputBuffer_out1_im_1(k) <= std_logic_vector(InputBuffer_out1_im(k));
  END GENERATE;

  enb_gated_11 <= Enable_out4_1 AND enb;

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resetTagFrom_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resetTagFrom_out1 <= reset_1;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  
  switch_compare_1_1 <= '1' WHEN resetTagFrom_out1 > '0' ELSE
      '0';

  enb_gated_12 <= Enable_out4_1 AND enb;

  enb_gated_13 <= Enable_out4_1 AND enb;

  enb_gated_14 <= Enable_out4_1 AND enb;

  Constant2_out1_re(0) <= to_signed(16#0000#, 16);
  Constant2_out1_im(0) <= to_signed(16#0000#, 16);
  Constant2_out1_re(1) <= to_signed(16#0000#, 16);
  Constant2_out1_im(1) <= to_signed(16#0000#, 16);
  Constant2_out1_re(2) <= to_signed(16#0000#, 16);
  Constant2_out1_im(2) <= to_signed(16#0000#, 16);


  Constant2_out1_dtc_im_gen: FOR ii1 IN 0 TO 2 GENERATE
    Constant2_out1_dtc_re(ii1) <= Constant2_out1_re(ii1)(4 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
    Constant2_out1_dtc_im(ii1) <= Constant2_out1_im(ii1)(4 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  END GENERATE Constant2_out1_dtc_im_gen;


  Dot_Product1_out1_im_signed <= signed(Dot_Product1_out1_im);

  outputgen5: FOR k IN 0 TO 2 GENERATE
    Decision_Buffer_out1_im_1(k) <= std_logic_vector(Decision_Buffer_out1_im(k));
  END GENERATE;

  outputgen4: FOR k IN 0 TO 2 GENERATE
    Decision_Buffer_out1_re_1(k) <= std_logic_vector(Decision_Buffer_out1_re(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 2 GENERATE
    Backward_Taps_out1_im_1(k) <= std_logic_vector(Backward_Taps_out1_im(k));
  END GENERATE;

  Decision_Buffer_out1_im(0) <= Map_Symbol_out1_tap2_im;
  Decision_Buffer_out1_im(1) <= Map_Symbol_out1_tap1_im;
  Decision_Buffer_out1_im(2) <= Map_Symbol_out1_tap0_im;

  Decision_Buffer_tap0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Map_Symbol_out1_tap0_re <= to_signed(16#0000#, 16);
      Map_Symbol_out1_tap0_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_14 = '1' THEN
        Map_Symbol_out1_tap0_re <= Map_Symbol_out1_re_signed;
        Map_Symbol_out1_tap0_im_1 <= Map_Symbol_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Decision_Buffer_tap0_process;


  out0_bypass_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Map_Symbol_out1_tap0_last_value_re <= to_signed(16#0000#, 16);
      Map_Symbol_out1_tap0_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_14 = '1' THEN
        Map_Symbol_out1_tap0_last_value_re <= Map_Symbol_out1_tap0_re_1;
        Map_Symbol_out1_tap0_last_value_im <= Map_Symbol_out1_tap0_im;
      END IF;
    END IF;
  END PROCESS out0_bypass_5_process;


  
  Map_Symbol_out1_tap0_re_1 <= Map_Symbol_out1_tap0_last_value_re WHEN Enable_out4_1 = '0' ELSE
      Map_Symbol_out1_tap0_re;
  
  Map_Symbol_out1_tap0_im <= Map_Symbol_out1_tap0_last_value_im WHEN Enable_out4_1 = '0' ELSE
      Map_Symbol_out1_tap0_im_1;

  Decision_Buffer_tap1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Map_Symbol_out1_tap1_re <= to_signed(16#0000#, 16);
      Map_Symbol_out1_tap1_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_13 = '1' THEN
        Map_Symbol_out1_tap1_re <= Map_Symbol_out1_tap0_re_1;
        Map_Symbol_out1_tap1_im_1 <= Map_Symbol_out1_tap0_im;
      END IF;
    END IF;
  END PROCESS Decision_Buffer_tap1_process;


  out0_bypass_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Map_Symbol_out1_tap1_last_value_re <= to_signed(16#0000#, 16);
      Map_Symbol_out1_tap1_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_13 = '1' THEN
        Map_Symbol_out1_tap1_last_value_re <= Map_Symbol_out1_tap1_re_1;
        Map_Symbol_out1_tap1_last_value_im <= Map_Symbol_out1_tap1_im;
      END IF;
    END IF;
  END PROCESS out0_bypass_6_process;


  
  Map_Symbol_out1_tap1_re_1 <= Map_Symbol_out1_tap1_last_value_re WHEN Enable_out4_1 = '0' ELSE
      Map_Symbol_out1_tap1_re;
  
  Map_Symbol_out1_tap1_im <= Map_Symbol_out1_tap1_last_value_im WHEN Enable_out4_1 = '0' ELSE
      Map_Symbol_out1_tap1_im_1;

  Decision_Buffer_tap2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Map_Symbol_out1_tap2_re <= to_signed(16#0000#, 16);
      Map_Symbol_out1_tap2_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_12 = '1' THEN
        Map_Symbol_out1_tap2_re <= Map_Symbol_out1_tap1_re_1;
        Map_Symbol_out1_tap2_im_1 <= Map_Symbol_out1_tap1_im;
      END IF;
    END IF;
  END PROCESS Decision_Buffer_tap2_process;


  out0_bypass_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Map_Symbol_out1_tap2_last_value_re <= to_signed(16#0000#, 16);
      Map_Symbol_out1_tap2_last_value_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_12 = '1' THEN
        Map_Symbol_out1_tap2_last_value_re <= Map_Symbol_out1_tap2_re_1;
        Map_Symbol_out1_tap2_last_value_im <= Map_Symbol_out1_tap2_im;
      END IF;
    END IF;
  END PROCESS out0_bypass_7_process;


  
  Map_Symbol_out1_tap2_re_1 <= Map_Symbol_out1_tap2_last_value_re WHEN Enable_out4_1 = '0' ELSE
      Map_Symbol_out1_tap2_re;
  
  Map_Symbol_out1_tap2_im <= Map_Symbol_out1_tap2_last_value_im WHEN Enable_out4_1 = '0' ELSE
      Map_Symbol_out1_tap2_im_1;

  Decision_Buffer_out1_re(0) <= Map_Symbol_out1_tap2_re_1;
  Decision_Buffer_out1_re(1) <= Map_Symbol_out1_tap1_re_1;
  Decision_Buffer_out1_re(2) <= Map_Symbol_out1_tap0_re_1;


  Product3_out1_im_gen: FOR t_0 IN 0 TO 2 GENERATE
    Product3_mul_temp(t_0) <= Product1_out1_re * Decision_Buffer_out1_re(t_0);
    Product3_sub_cast(t_0) <= Product3_mul_temp(t_0)(31 DOWNTO 16);
    Product3_mul_temp_1(t_0) <= Product1_out1_im * Decision_Buffer_out1_im(t_0);
    Product3_sub_cast_1(t_0) <= Product3_mul_temp_1(t_0)(31 DOWNTO 16);
    Product3_out1_re(t_0) <= Product3_sub_cast(t_0) - Product3_sub_cast_1(t_0);
    Product3_mul_temp_2(t_0) <= Product1_out1_im * Decision_Buffer_out1_re(t_0);
    Product3_add_cast(t_0) <= Product3_mul_temp_2(t_0)(31 DOWNTO 16);
    Product3_mul_temp_3(t_0) <= Product1_out1_re * Decision_Buffer_out1_im(t_0);
    Product3_add_cast_1(t_0) <= Product3_mul_temp_3(t_0)(31 DOWNTO 16);
    Product3_out1_im(t_0) <= Product3_add_cast(t_0) + Product3_add_cast_1(t_0);
  END GENERATE Product3_out1_im_gen;



  Add1_out1_im_gen: FOR t_01 IN 0 TO 2 GENERATE
    Add1_sub_cast(t_01) <= resize(Backward_Taps_out1_re(t_01) & '0' & '0' & '0' & '0' & '0' & '0', 23);
    Add1_sub_cast_1(t_01) <= resize(Product3_out1_re(t_01), 23);
    Add1_sub_temp(t_01) <= Add1_sub_cast(t_01) - Add1_sub_cast_1(t_01);
    Add1_out1_re(t_01) <= Add1_sub_temp(t_01)(17 DOWNTO 2);
    Add1_sub_cast_2(t_01) <= resize(Backward_Taps_out1_im(t_01) & '0' & '0' & '0' & '0' & '0' & '0', 23);
    Add1_sub_cast_3(t_01) <= resize(Product3_out1_im(t_01), 23);
    Add1_sub_temp_1(t_01) <= Add1_sub_cast_2(t_01) - Add1_sub_cast_3(t_01);
    Add1_out1_im(t_01) <= Add1_sub_temp_1(t_01)(17 DOWNTO 2);
  END GENERATE Add1_out1_im_gen;



  Add1_out1_dtc_im_gen: FOR ii2 IN 0 TO 2 GENERATE
    Add1_out1_dtc_re(ii2) <= resize(Add1_out1_re(ii2)(15 DOWNTO 4), 16);
    Add1_out1_dtc_im(ii2) <= resize(Add1_out1_im(ii2)(15 DOWNTO 4), 16);
  END GENERATE Add1_out1_dtc_im_gen;


  
  Switch_out1_re <= Add1_out1_dtc_re WHEN switch_compare_1_1 = '0' ELSE
      Constant2_out1_dtc_re;
  
  Switch_out1_im <= Add1_out1_dtc_im WHEN switch_compare_1_1 = '0' ELSE
      Constant2_out1_dtc_im;

  Backward_Taps_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Backward_Taps_out1_re_1 <= (OTHERS => to_signed(16#0000#, 16));
      Backward_Taps_out1_im_2 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_11 = '1' THEN
        Backward_Taps_out1_re_1 <= Switch_out1_re;
        Backward_Taps_out1_im_2 <= Switch_out1_im;
      END IF;
    END IF;
  END PROCESS Backward_Taps_process;


  out0_bypass_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Backward_Taps_out1_last_value_re <= (OTHERS => to_signed(16#0000#, 16));
      Backward_Taps_out1_last_value_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_11 = '1' THEN
        Backward_Taps_out1_last_value_re <= Backward_Taps_out1_re;
        Backward_Taps_out1_last_value_im <= Backward_Taps_out1_im;
      END IF;
    END IF;
  END PROCESS out0_bypass_8_process;


  
  Backward_Taps_out1_re <= Backward_Taps_out1_last_value_re WHEN Enable_out4_1 = '0' ELSE
      Backward_Taps_out1_re_1;
  
  Backward_Taps_out1_im <= Backward_Taps_out1_last_value_im WHEN Enable_out4_1 = '0' ELSE
      Backward_Taps_out1_im_2;

  outputgen2: FOR k IN 0 TO 2 GENERATE
    Backward_Taps_out1_re_2(k) <= std_logic_vector(Backward_Taps_out1_re(k));
  END GENERATE;

  Dot_Product1_out1_re_signed <= signed(Dot_Product1_out1_re);

  Dot_Product_out1_im_signed <= signed(Dot_Product_out1_im);

  outputgen1: FOR k IN 0 TO 4 GENERATE
    Forward_Taps_out1_im_1(k) <= std_logic_vector(Forward_Taps_out1_im(k));
  END GENERATE;

  Map_Symbol_out1_im_signed <= signed(Map_Symbol_out1_im);

  Map_Symbol_out1_re_signed <= signed(Map_Symbol_out1_re);

  Subtract_sub_cast <= resize(Map_Symbol_out1_re_signed, 18);
  Subtract_sub_cast_1 <= resize(Subtract2_out1_re & '0', 18);
  Subtract_sub_temp <= Subtract_sub_cast - Subtract_sub_cast_1;
  Subtract_out1_re <= Subtract_sub_temp(15 DOWNTO 0);
  Subtract_sub_cast_2 <= resize(Map_Symbol_out1_im_signed, 18);
  Subtract_sub_cast_3 <= resize(Subtract2_out1_im & '0', 18);
  Subtract_sub_temp_1 <= Subtract_sub_cast_2 - Subtract_sub_cast_3;
  Subtract_out1_im <= Subtract_sub_temp_1(15 DOWNTO 0);

  Math_Function_out1_re <= Subtract_out1_re;
  conj_cast <= resize(Subtract_out1_im, 17);
  conj_cast_1 <=  - (conj_cast);
  
  Math_Function_out1_im <= X"7FFF" WHEN (conj_cast_1(16) = '0') AND (conj_cast_1(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_1(16) = '1') AND (conj_cast_1(15) /= '1') ELSE
      conj_cast_1(15 DOWNTO 0);

  Product1_cast <= signed(resize(Pipeline_Delay2_out1_1, 17));
  Product1_mul_temp <= Math_Function_out1_re * Product1_cast;
  Product1_cast_1 <= Product1_mul_temp(31 DOWNTO 0);
  Product1_out1_re <= Product1_cast_1(30 DOWNTO 15);
  Product1_cast_2 <= signed(resize(Pipeline_Delay2_out1_1, 17));
  Product1_mul_temp_1 <= Math_Function_out1_im * Product1_cast_2;
  Product1_add_cast <= Product1_mul_temp_1(31 DOWNTO 0);
  Product1_add_cast_1 <= Product1_add_cast(30 DOWNTO 15);
  Product1_out1_im <= Product1_add_cast_1 + to_signed(16#0000#, 16);


  Product2_out1_im_gen: FOR t_02 IN 0 TO 4 GENERATE
    Product2_mul_temp(t_02) <= Product1_out1_re * InputBuffer_out1_re(t_02);
    Product2_sub_cast(t_02) <= Product2_mul_temp(t_02)(29 DOWNTO 14);
    Product2_mul_temp_1(t_02) <= Product1_out1_im * InputBuffer_out1_im(t_02);
    Product2_sub_cast_1(t_02) <= Product2_mul_temp_1(t_02)(29 DOWNTO 14);
    Product2_out1_re(t_02) <= Product2_sub_cast(t_02) - Product2_sub_cast_1(t_02);
    Product2_mul_temp_2(t_02) <= Product1_out1_im * InputBuffer_out1_re(t_02);
    Product2_add_cast(t_02) <= Product2_mul_temp_2(t_02)(29 DOWNTO 14);
    Product2_mul_temp_3(t_02) <= Product1_out1_re * InputBuffer_out1_im(t_02);
    Product2_add_cast_1(t_02) <= Product2_mul_temp_3(t_02)(29 DOWNTO 14);
    Product2_out1_im(t_02) <= Product2_add_cast(t_02) + Product2_add_cast_1(t_02);
  END GENERATE Product2_out1_im_gen;



  Add_out1_im_gen: FOR t_03 IN 0 TO 4 GENERATE
    Add_add_cast(t_03) <= resize(Product2_out1_re(t_03), 25);
    Add_add_cast_1(t_03) <= resize(Forward_Taps_out1_re(t_03) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
    Add_add_temp(t_03) <= Add_add_cast(t_03) + Add_add_cast_1(t_03);
    Add_out1_re(t_03) <= Add_add_temp(t_03)(23 DOWNTO 8);
    Add_add_cast_2(t_03) <= resize(Product2_out1_im(t_03), 25);
    Add_add_cast_3(t_03) <= resize(Forward_Taps_out1_im(t_03) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
    Add_add_temp_1(t_03) <= Add_add_cast_2(t_03) + Add_add_cast_3(t_03);
    Add_out1_im(t_03) <= Add_add_temp_1(t_03)(23 DOWNTO 8);
  END GENERATE Add_out1_im_gen;


  
  Switch2_out1_re <= Add_out1_re WHEN switch_compare_1 = '0' ELSE
      Constant3_out1_dtc_re;
  
  Switch2_out1_im <= Add_out1_im WHEN switch_compare_1 = '0' ELSE
      Constant3_out1_dtc_im;

  Forward_Taps_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Forward_Taps_out1_re_1 <= nc;
      Forward_Taps_out1_im_2 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Forward_Taps_out1_re_1 <= Switch2_out1_re;
        Forward_Taps_out1_im_2 <= Switch2_out1_im;
      END IF;
    END IF;
  END PROCESS Forward_Taps_process;


  out0_bypass_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Forward_Taps_out1_last_value_re <= (OTHERS => to_signed(16#0000#, 16));
      Forward_Taps_out1_last_value_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Forward_Taps_out1_last_value_re <= Forward_Taps_out1_re;
        Forward_Taps_out1_last_value_im <= Forward_Taps_out1_im;
      END IF;
    END IF;
  END PROCESS out0_bypass_9_process;


  
  Forward_Taps_out1_re <= Forward_Taps_out1_last_value_re WHEN Enable_out4_1 = '0' ELSE
      Forward_Taps_out1_re_1;
  
  Forward_Taps_out1_im <= Forward_Taps_out1_last_value_im WHEN Enable_out4_1 = '0' ELSE
      Forward_Taps_out1_im_2;

  outputgen: FOR k IN 0 TO 4 GENERATE
    Forward_Taps_out1_re_2(k) <= std_logic_vector(Forward_Taps_out1_re(k));
  END GENERATE;

  Dot_Product_out1_re_signed <= signed(Dot_Product_out1_re);

  Subtract2_sub_cast <= resize(Dot_Product_out1_re_signed & '0' & '0' & '0' & '0', 21);
  Subtract2_sub_cast_1 <= resize(Dot_Product1_out1_re_signed, 21);
  Subtract2_sub_temp <= Subtract2_sub_cast - Subtract2_sub_cast_1;
  Subtract2_out1_re <= Subtract2_sub_temp(19 DOWNTO 4);
  Subtract2_sub_cast_2 <= resize(Dot_Product_out1_im_signed & '0' & '0' & '0' & '0', 21);
  Subtract2_sub_cast_3 <= resize(Dot_Product1_out1_im_signed, 21);
  Subtract2_sub_temp_1 <= Subtract2_sub_cast_2 - Subtract2_sub_cast_3;
  Subtract2_out1_im <= Subtract2_sub_temp_1(19 DOWNTO 4);

  eqOut_re <= std_logic_vector(Subtract2_out1_re);

  eqOut_im <= std_logic_vector(Subtract2_out1_im);

  err_re <= std_logic_vector(Math_Function_out1_re);

  err_im <= std_logic_vector(Math_Function_out1_im);

  enb_gated_15 <= Enable_out4 AND enb;

  Delay_To_Reference_Tap2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_To_Reference_Tap2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_15 = '1' THEN
        Delay_To_Reference_Tap2_reg(0) <= reset_1;
        Delay_To_Reference_Tap2_reg(1 TO 2) <= Delay_To_Reference_Tap2_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay_To_Reference_Tap2_process;

  Delay_To_Reference_Tap2_out1 <= Delay_To_Reference_Tap2_reg(2);

  start <= Delay_To_Reference_Tap2_out1;

END rtl;

