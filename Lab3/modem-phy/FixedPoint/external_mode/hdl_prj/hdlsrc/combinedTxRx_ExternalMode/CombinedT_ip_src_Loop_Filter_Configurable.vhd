-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_ExternalMode\CombinedT_ip_src_Loop_Filter_Configurable.vhd
-- Created: 2018-02-01 13:20:09
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Loop_Filter_Configurable
-- Source Path: combinedTxRx_ExternalMode/Combined TX and RX/Receiver HDL/Frame Recover/Frequency Recovery/Loop Filter 
-- Configurabl
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Loop_Filter_Configurable IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        e                                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        LoopBW                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        Enable_out4                       :   IN    std_logic;
        v                                 :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En20
        );
END CombinedT_ip_src_Loop_Filter_Configurable;


ARCHITECTURE rtl OF CombinedT_ip_src_Loop_Filter_Configurable IS

  -- Constants
  CONSTANT Direct_Lookup_Table_n_D_table_data : vector_of_unsigned16(0 TO 127) := 
    (to_unsigned(16#04DF#, 16), to_unsigned(16#098F#, 16), to_unsigned(16#0E13#, 16), to_unsigned(16#126D#, 16),
     to_unsigned(16#16A0#, 16), to_unsigned(16#1AAD#, 16), to_unsigned(16#1E96#, 16), to_unsigned(16#225D#, 16),
     to_unsigned(16#2603#, 16), to_unsigned(16#298B#, 16), to_unsigned(16#2CF5#, 16), to_unsigned(16#3044#, 16),
     to_unsigned(16#3377#, 16), to_unsigned(16#3691#, 16), to_unsigned(16#3992#, 16), to_unsigned(16#3C7D#, 16),
     to_unsigned(16#3F50#, 16), to_unsigned(16#420E#, 16), to_unsigned(16#44B8#, 16), to_unsigned(16#474E#, 16),
     to_unsigned(16#49D1#, 16), to_unsigned(16#4C42#, 16), to_unsigned(16#4EA1#, 16), to_unsigned(16#50F0#, 16),
     to_unsigned(16#532E#, 16), to_unsigned(16#555D#, 16), to_unsigned(16#577D#, 16), to_unsigned(16#598F#, 16),
     to_unsigned(16#5B93#, 16), to_unsigned(16#5D89#, 16), to_unsigned(16#5F73#, 16), to_unsigned(16#6150#, 16),
     to_unsigned(16#6321#, 16), to_unsigned(16#64E7#, 16), to_unsigned(16#66A1#, 16), to_unsigned(16#6851#, 16),
     to_unsigned(16#69F6#, 16), to_unsigned(16#6B91#, 16), to_unsigned(16#6D22#, 16), to_unsigned(16#6EAA#, 16),
     to_unsigned(16#7029#, 16), to_unsigned(16#719F#, 16), to_unsigned(16#730C#, 16), to_unsigned(16#7471#, 16),
     to_unsigned(16#75CE#, 16), to_unsigned(16#7723#, 16), to_unsigned(16#7870#, 16), to_unsigned(16#79B7#, 16),
     to_unsigned(16#7AF6#, 16), to_unsigned(16#7C2E#, 16), to_unsigned(16#7D5F#, 16), to_unsigned(16#7E8A#, 16),
     to_unsigned(16#7FAE#, 16), to_unsigned(16#80CD#, 16), to_unsigned(16#81E5#, 16), to_unsigned(16#82F7#, 16),
     to_unsigned(16#8404#, 16), to_unsigned(16#850C#, 16), to_unsigned(16#860D#, 16), to_unsigned(16#870A#, 16),
     to_unsigned(16#8802#, 16), to_unsigned(16#88F4#, 16), to_unsigned(16#89E2#, 16), to_unsigned(16#8ACB#, 16),
     to_unsigned(16#8BB0#, 16), to_unsigned(16#8C90#, 16), to_unsigned(16#8D6C#, 16), to_unsigned(16#8E43#, 16),
     to_unsigned(16#8F17#, 16), to_unsigned(16#8FE6#, 16), to_unsigned(16#90B1#, 16), to_unsigned(16#9179#, 16),
     to_unsigned(16#923D#, 16), to_unsigned(16#92FD#, 16), to_unsigned(16#93B9#, 16), to_unsigned(16#9473#, 16),
     to_unsigned(16#9528#, 16), to_unsigned(16#95DB#, 16), to_unsigned(16#968A#, 16), to_unsigned(16#9736#, 16),
     to_unsigned(16#97DE#, 16), to_unsigned(16#9884#, 16), to_unsigned(16#9927#, 16), to_unsigned(16#99C7#, 16),
     to_unsigned(16#9A64#, 16), to_unsigned(16#9AFE#, 16), to_unsigned(16#9B96#, 16), to_unsigned(16#9C2B#, 16),
     to_unsigned(16#9CBD#, 16), to_unsigned(16#9D4D#, 16), to_unsigned(16#9DDA#, 16), to_unsigned(16#9E65#, 16),
     to_unsigned(16#9EED#, 16), to_unsigned(16#9F74#, 16), to_unsigned(16#9FF7#, 16), to_unsigned(16#A079#, 16),
     to_unsigned(16#A0F8#, 16), to_unsigned(16#A176#, 16), to_unsigned(16#A1F1#, 16), to_unsigned(16#A26A#, 16),
     to_unsigned(16#A2E1#, 16), to_unsigned(16#A356#, 16), to_unsigned(16#A3C9#, 16), to_unsigned(16#A43A#, 16),
     to_unsigned(16#A4A9#, 16), to_unsigned(16#A517#, 16), to_unsigned(16#A582#, 16), to_unsigned(16#A5EC#, 16),
     to_unsigned(16#A654#, 16), to_unsigned(16#A6BB#, 16), to_unsigned(16#A720#, 16), to_unsigned(16#A783#, 16),
     to_unsigned(16#A7E4#, 16), to_unsigned(16#A844#, 16), to_unsigned(16#A8A3#, 16), to_unsigned(16#A900#, 16),
     to_unsigned(16#A95B#, 16), to_unsigned(16#A9B5#, 16), to_unsigned(16#AA0D#, 16), to_unsigned(16#AA64#, 16),
     to_unsigned(16#AABA#, 16), to_unsigned(16#AB0E#, 16), to_unsigned(16#AB61#, 16), to_unsigned(16#ABB3#, 16),
     to_unsigned(16#AC03#, 16), to_unsigned(16#AC52#, 16), to_unsigned(16#ACA0#, 16), to_unsigned(16#ACED#, 16));  -- ufix16 [128]
  CONSTANT Direct_Lookup_Table_n_D_1_table_data : vector_of_unsigned16(0 TO 127) := 
    (to_unsigned(16#000C#, 16), to_unsigned(16#002F#, 16), to_unsigned(16#0069#, 16), to_unsigned(16#00B7#, 16),
     to_unsigned(16#0119#, 16), to_unsigned(16#018D#, 16), to_unsigned(16#0213#, 16), to_unsigned(16#02AA#, 16),
     to_unsigned(16#0351#, 16), to_unsigned(16#0407#, 16), to_unsigned(16#04CC#, 16), to_unsigned(16#059E#, 16),
     to_unsigned(16#067D#, 16), to_unsigned(16#0768#, 16), to_unsigned(16#0860#, 16), to_unsigned(16#0962#, 16),
     to_unsigned(16#0A70#, 16), to_unsigned(16#0B88#, 16), to_unsigned(16#0CA9#, 16), to_unsigned(16#0DD4#, 16),
     to_unsigned(16#0F08#, 16), to_unsigned(16#1045#, 16), to_unsigned(16#1189#, 16), to_unsigned(16#12D6#, 16),
     to_unsigned(16#142A#, 16), to_unsigned(16#1586#, 16), to_unsigned(16#16E8#, 16), to_unsigned(16#1851#, 16),
     to_unsigned(16#19C0#, 16), to_unsigned(16#1B36#, 16), to_unsigned(16#1CB1#, 16), to_unsigned(16#1E32#, 16),
     to_unsigned(16#1FB9#, 16), to_unsigned(16#2144#, 16), to_unsigned(16#22D5#, 16), to_unsigned(16#246A#, 16),
     to_unsigned(16#2604#, 16), to_unsigned(16#27A3#, 16), to_unsigned(16#2946#, 16), to_unsigned(16#2AED#, 16),
     to_unsigned(16#2C97#, 16), to_unsigned(16#2E46#, 16), to_unsigned(16#2FF9#, 16), to_unsigned(16#31AE#, 16),
     to_unsigned(16#3368#, 16), to_unsigned(16#3524#, 16), to_unsigned(16#36E4#, 16), to_unsigned(16#38A7#, 16),
     to_unsigned(16#3A6D#, 16), to_unsigned(16#3C35#, 16), to_unsigned(16#3E00#, 16), to_unsigned(16#3FCE#, 16),
     to_unsigned(16#419F#, 16), to_unsigned(16#4372#, 16), to_unsigned(16#4547#, 16), to_unsigned(16#471E#, 16),
     to_unsigned(16#48F8#, 16), to_unsigned(16#4AD4#, 16), to_unsigned(16#4CB2#, 16), to_unsigned(16#4E92#, 16),
     to_unsigned(16#5073#, 16), to_unsigned(16#5257#, 16), to_unsigned(16#543C#, 16), to_unsigned(16#5623#, 16),
     to_unsigned(16#580C#, 16), to_unsigned(16#59F6#, 16), to_unsigned(16#5BE2#, 16), to_unsigned(16#5DCF#, 16),
     to_unsigned(16#5FBD#, 16), to_unsigned(16#61AD#, 16), to_unsigned(16#639E#, 16), to_unsigned(16#6591#, 16),
     to_unsigned(16#6785#, 16), to_unsigned(16#697A#, 16), to_unsigned(16#6B70#, 16), to_unsigned(16#6D67#, 16),
     to_unsigned(16#6F5F#, 16), to_unsigned(16#7158#, 16), to_unsigned(16#7352#, 16), to_unsigned(16#754D#, 16),
     to_unsigned(16#7749#, 16), to_unsigned(16#7946#, 16), to_unsigned(16#7B44#, 16), to_unsigned(16#7D42#, 16),
     to_unsigned(16#7F41#, 16), to_unsigned(16#8141#, 16), to_unsigned(16#8342#, 16), to_unsigned(16#8543#, 16),
     to_unsigned(16#8745#, 16), to_unsigned(16#8948#, 16), to_unsigned(16#8B4B#, 16), to_unsigned(16#8D4F#, 16),
     to_unsigned(16#8F53#, 16), to_unsigned(16#9158#, 16), to_unsigned(16#935D#, 16), to_unsigned(16#9563#, 16),
     to_unsigned(16#9769#, 16), to_unsigned(16#996F#, 16), to_unsigned(16#9B76#, 16), to_unsigned(16#9D7E#, 16),
     to_unsigned(16#9F85#, 16), to_unsigned(16#A18E#, 16), to_unsigned(16#A396#, 16), to_unsigned(16#A59F#, 16),
     to_unsigned(16#A7A8#, 16), to_unsigned(16#A9B1#, 16), to_unsigned(16#ABBA#, 16), to_unsigned(16#ADC4#, 16),
     to_unsigned(16#AFCE#, 16), to_unsigned(16#B1D8#, 16), to_unsigned(16#B3E3#, 16), to_unsigned(16#B5ED#, 16),
     to_unsigned(16#B7F8#, 16), to_unsigned(16#BA03#, 16), to_unsigned(16#BC0E#, 16), to_unsigned(16#BE19#, 16),
     to_unsigned(16#C024#, 16), to_unsigned(16#C22F#, 16), to_unsigned(16#C43B#, 16), to_unsigned(16#C646#, 16),
     to_unsigned(16#C852#, 16), to_unsigned(16#CA5D#, 16), to_unsigned(16#CC69#, 16), to_unsigned(16#CE75#, 16),
     to_unsigned(16#D080#, 16), to_unsigned(16#D28C#, 16), to_unsigned(16#D497#, 16), to_unsigned(16#D6A3#, 16));  -- ufix16 [128]

  -- Signals
  SIGNAL e_signed                         : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL LoopBW_signed                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL Direct_Lookup_Table_n_D_out1     : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL Product_cast                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product_mul_temp                 : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Product_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Direct_Lookup_Table_n_D_1_out1   : unsigned(15 DOWNTO 0);  -- ufix16_En20
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En20
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Product1_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Sum2_out1                        : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Add2_out1                        : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion_out1        : signed(24 DOWNTO 0);  -- sfix25_En20

BEGIN
  -- This inflation is necessary
  -- 
  -- Proportional-plus-Integrator Loop Filter,
  -- Infinite DC Response to guarantee convergence

  e_signed <= signed(e);

  LoopBW_signed <= signed(LoopBW);

  Direct_Lookup_Table_n_D_out1 <= Direct_Lookup_Table_n_D_table_data(to_integer(LoopBW_signed));

  Product_cast <= signed(resize(Direct_Lookup_Table_n_D_out1, 17));
  Product_mul_temp <= e_signed * Product_cast;
  Product_cast_1 <= Product_mul_temp(31 DOWNTO 0);
  Product_out1 <= Product_cast_1(30 DOWNTO 15);

  Direct_Lookup_Table_n_D_1_out1 <= Direct_Lookup_Table_n_D_1_table_data(to_integer(LoopBW_signed));

  Product1_cast <= signed(resize(Direct_Lookup_Table_n_D_1_out1, 17));
  Product1_mul_temp <= e_signed * Product1_cast;
  Product1_cast_1 <= Product1_mul_temp(31 DOWNTO 0);
  Product1_out1 <= resize(Product1_cast_1(31 DOWNTO 20), 16);

  enb_gated <= Enable_out4 AND enb;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Add1_out1 <= Delay_out1 + Product1_out1;

  Sum2_out1 <= Product_out1 + Add1_out1;

  enb_gated_1 <= Enable_out4 AND enb;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay3_out1 <= Sum2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  enb_gated_2 <= Enable_out4 AND enb;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_2 = '1' THEN
        Delay4_out1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Add2_out1 <= Delay3_out1 + Delay4_out1;

  Data_Type_Conversion_out1 <= Add2_out1(14 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  v <= std_logic_vector(Data_Type_Conversion_out1);

END rtl;

