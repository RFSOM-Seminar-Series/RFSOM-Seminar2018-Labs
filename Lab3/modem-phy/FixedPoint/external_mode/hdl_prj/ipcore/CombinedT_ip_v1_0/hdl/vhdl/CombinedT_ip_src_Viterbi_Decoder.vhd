-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_ExternalMode\CombinedT_ip_src_Viterbi_Decoder.vhd
-- Created: 2018-02-01 13:20:10
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Viterbi_Decoder
-- Source Path: combinedTxRx_ExternalMode/Combined TX and RX/Receiver HDL/Viterbi Decode/Viterbi Decoder
-- Hierarchy Level: 3
-- 
-- Top level of Viterbi Decoder, consists of three basic components: Branch Metric, ACS,and Traceback 
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Viterbi_Decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Viterbi_Decoder_in                :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
        Viterbi_Decoder_rst               :   IN    std_logic;
        decoded                           :   OUT   std_logic
        );
END CombinedT_ip_src_Viterbi_Decoder;


ARCHITECTURE rtl OF CombinedT_ip_src_Viterbi_Decoder IS

  -- Component Declarations
  COMPONENT CombinedT_ip_src_BranchMetric
    PORT( din                             :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          bMet                            :   OUT   vector_of_std_logic_vector2(0 TO 3)  -- ufix2 [4]
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_ACS
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          acs_in                          :   IN    vector_of_std_logic_vector2(0 TO 3);  -- ufix2 [4]
          acs_rst                         :   IN    std_logic;
          dec                             :   OUT   std_logic_vector(0 TO 63);  -- ufix1 [64]
          idx                             :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
          );
  END COMPONENT;

  COMPONENT CombinedT_ip_src_Traceback
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dec                             :   IN    std_logic_vector(0 TO 63);  -- ufix1 [64]
          idx                             :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          tb_rst                          :   IN    std_logic;
          decoded                         :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CombinedT_ip_src_BranchMetric
    USE ENTITY work.CombinedT_ip_src_BranchMetric(rtl);

  FOR ALL : CombinedT_ip_src_ACS
    USE ENTITY work.CombinedT_ip_src_ACS(rtl);

  FOR ALL : CombinedT_ip_src_Traceback
    USE ENTITY work.CombinedT_ip_src_Traceback(rtl);

  -- Signals
  SIGNAL regin                            : std_logic_vector(0 TO 1);  -- boolean [2]
  SIGNAL bMet                             : vector_of_std_logic_vector2(0 TO 3);  -- ufix2 [4]
  SIGNAL bMet_unsigned                    : vector_of_unsigned2(0 TO 3);  -- ufix2 [4]
  SIGNAL regBMet                          : vector_of_unsigned2(0 TO 3);  -- ufix2 [4]
  SIGNAL regBMet_1                        : vector_of_std_logic_vector2(0 TO 3);  -- ufix2 [4]
  SIGNAL dec                              : std_logic_vector(0 TO 63);  -- ufix1 [64]
  SIGNAL idx                              : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL idx_unsigned                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL regdec                           : std_logic_vector(0 TO 63);  -- ufix1 [64]
  SIGNAL regidx                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL decoded_1                        : std_logic;  -- ufix1
  SIGNAL outreg                           : std_logic;  -- ufix1

BEGIN
  u_BMet_inst : CombinedT_ip_src_BranchMetric
    PORT MAP( din => regin,  -- boolean [2]
              bMet => bMet  -- ufix2 [4]
              );

  u_ACS_inst : CombinedT_ip_src_ACS
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              acs_in => regBMet_1,  -- ufix2 [4]
              acs_rst => Viterbi_Decoder_rst,
              dec => dec,  -- ufix1 [64]
              idx => idx  -- ufix6
              );

  u_Traceback_inst : CombinedT_ip_src_Traceback
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dec => regdec,  -- ufix1 [64]
              idx => std_logic_vector(regidx),  -- ufix6
              tb_rst => Viterbi_Decoder_rst,
              decoded => decoded_1  -- ufix1
              );

  -- Input Register
  InputRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      regin <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        regin <= Viterbi_Decoder_in;
      END IF;
    END IF;
  END PROCESS InputRegister_process;


  outputgen1: FOR k IN 0 TO 3 GENERATE
    bMet_unsigned(k) <= unsigned(bMet(k));
  END GENERATE;

  -- Branch Metric output Register
  BMetRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      regBMet <= (OTHERS => to_unsigned(16#0#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        regBMet <= bMet_unsigned;
      END IF;
    END IF;
  END PROCESS BMetRegister_process;


  outputgen: FOR k IN 0 TO 3 GENERATE
    regBMet_1(k) <= std_logic_vector(regBMet(k));
  END GENERATE;

  idx_unsigned <= unsigned(idx);

  -- ACS dec output Register
  decRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      regdec <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        regdec <= dec;
      END IF;
    END IF;
  END PROCESS decRegister_process;


  -- ACS idx output Register
  idxRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      regidx <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        regidx <= idx_unsigned;
      END IF;
    END IF;
  END PROCESS idxRegister_process;


  -- Viterbi Decoder output Register
  DecoderoutputRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      outreg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        outreg <= decoded_1;
      END IF;
    END IF;
  END PROCESS DecoderoutputRegister_process;


  -- Output data type conversion
  
  decoded <= '1' WHEN outreg /= '0' ELSE
      '0';

END rtl;

