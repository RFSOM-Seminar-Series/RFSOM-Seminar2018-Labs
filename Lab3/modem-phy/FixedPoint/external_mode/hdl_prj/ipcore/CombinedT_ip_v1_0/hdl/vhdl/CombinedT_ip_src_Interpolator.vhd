-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\combinedTxRx_ExternalMode\CombinedT_ip_src_Interpolator.vhd
-- Created: 2018-02-01 13:20:09
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CombinedT_ip_src_Interpolator
-- Source Path: combinedTxRx_ExternalMode/Combined TX and RX/Receiver HDL/Frame Recover/Gardner Timing Recovery/Interpolator
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CombinedT_ip_src_Combined_TX_and_RX_pkg.ALL;

ENTITY CombinedT_ip_src_Interpolator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        In1_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        mu                                :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15_En14
        Enable_out2                       :   IN    std_logic;
        Out1_re                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        Out1_im                           :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
        );
END CombinedT_ip_src_Interpolator;


ARCHITECTURE rtl OF CombinedT_ip_src_Interpolator IS

  -- Signals
  SIGNAL In1_re_signed                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL In1_im_signed                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL PLD3_out1_re                     : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL PLD3_out1_im                     : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL PLD4_out1_re                     : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL PLD4_out1_im                     : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Constant1_out1                   : signed(1 DOWNTO 0);  -- sfix2_En2
  SIGNAL Product_mul_temp                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_mul_temp_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_add_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL enb_gated_6                      : std_logic;
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add3_stage2_sub_cast             : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_stage2_sub_cast_1           : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_stage2_sub_cast_2           : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_stage2_sub_cast_3           : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_op_stage2_re                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_op_stage2_im                : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_stage3_add_cast             : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_stage3_add_cast_1           : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_out1_re                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add3_out1_im                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add4_add_cast                    : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add4_add_cast_1                  : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add4_add_cast_2                  : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add4_add_cast_3                  : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add4_out1_re                     : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add4_out1_im                     : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add5_add_cast                    : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Add5_add_cast_1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Add5_add_cast_2                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Add5_add_cast_3                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Add5_out1_re                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Add5_out1_im                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL enb_gated_7                      : std_logic;
  SIGNAL PLD_out1_re                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL PLD_out1_im                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Add_out1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add_out1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add1_add_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add1_add_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add1_add_cast_2                  : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add1_add_cast_3                  : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add1_out1_re                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add1_out1_im                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add2_sub_cast                    : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add2_sub_cast_1                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add2_sub_cast_2                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add2_sub_cast_3                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add2_out1_re                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add2_out1_im                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL enb_gated_8                      : std_logic;
  SIGNAL PLD1_out1_re                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL PLD1_out1_im                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL mu_unsigned                      : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL enb_gated_9                      : std_logic;
  SIGNAL PLD2_out1                        : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL Product2_cast                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_mul_temp                : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Product2_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product2_cast_2                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_mul_temp_1              : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Product2_add_cast                : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product2_add_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product2_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product2_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Add7_add_cast                    : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_add_cast_1                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_add_cast_2                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_add_cast_3                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_out1_re                     : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_out1_im                     : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL enb_gated_10                     : std_logic;
  SIGNAL PLD5_out1_re                     : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL PLD5_out1_im                     : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL enb_gated_11                     : std_logic;
  SIGNAL PLD6_out1                        : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL Product1_cast                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp                : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Product1_cast_1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp_1              : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Product1_out1_re                 : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Product1_out1_im                 : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Add9_add_cast                    : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Add9_add_cast_1                  : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Add9_add_temp                    : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Add9_add_cast_2                  : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Add9_add_cast_3                  : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Add9_add_temp_1                  : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Add9_out1_re                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Add9_out1_im                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL enb_gated_12                     : std_logic;
  SIGNAL PLD7_reg_re                      : vector_of_signed16(0 TO 1);  -- sfix16_En10 [2]
  SIGNAL PLD7_reg_im                      : vector_of_signed16(0 TO 1);  -- sfix16_En10 [2]
  SIGNAL PLD7_out1_re                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL PLD7_out1_im                     : signed(15 DOWNTO 0);  -- sfix16_En10

BEGIN
  -- Pipeline Delays
  -- 
  -- Pipeline Delays
  -- 
  -- Pipeline Delays

  In1_re_signed <= signed(In1_re);

  In1_im_signed <= signed(In1_im);

  enb_gated <= Enable_out2 AND enb;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#0000#, 16);
      Delay3_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay3_out1_re <= In1_re_signed;
        Delay3_out1_im <= In1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  enb_gated_1 <= Enable_out2 AND enb;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_re <= to_signed(16#0000#, 16);
      Delay4_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay4_out1_re <= Delay3_out1_re;
        Delay4_out1_im <= Delay3_out1_im;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  enb_gated_2 <= Enable_out2 AND enb;

  PLD3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD3_out1_re <= to_signed(16#0000#, 16);
      PLD3_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_2 = '1' THEN
        PLD3_out1_re <= Delay4_out1_re;
        PLD3_out1_im <= Delay4_out1_im;
      END IF;
    END IF;
  END PROCESS PLD3_process;


  enb_gated_3 <= Enable_out2 AND enb;

  PLD4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD4_out1_re <= to_signed(16#0000#, 16);
      PLD4_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_3 = '1' THEN
        PLD4_out1_re <= PLD3_out1_re;
        PLD4_out1_im <= PLD3_out1_im;
      END IF;
    END IF;
  END PROCESS PLD4_process;


  Constant1_out1 <= to_signed(-16#2#, 2);

  Product_mul_temp <= In1_re_signed * Constant1_out1;
  Product_out1_re <= Product_mul_temp(16 DOWNTO 1);
  Product_mul_temp_1 <= In1_im_signed * Constant1_out1;
  Product_add_cast <= Product_mul_temp_1(16 DOWNTO 1);
  Product_out1_im <= Product_add_cast + to_signed(16#0000#, 16);

  enb_gated_4 <= Enable_out2 AND enb;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_re <= to_signed(16#0000#, 16);
      Delay_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_4 = '1' THEN
        Delay_out1_re <= Product_out1_re;
        Delay_out1_im <= Product_out1_im;
      END IF;
    END IF;
  END PROCESS Delay_process;


  enb_gated_5 <= Enable_out2 AND enb;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(16#0000#, 16);
      Delay1_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_5 = '1' THEN
        Delay1_out1_re <= Delay_out1_re;
        Delay1_out1_im <= Delay_out1_im;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  enb_gated_6 <= Enable_out2 AND enb;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_re <= to_signed(16#0000#, 16);
      Delay2_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_6 = '1' THEN
        Delay2_out1_re <= Delay1_out1_re;
        Delay2_out1_im <= Delay1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Add3_stage2_sub_cast <= resize(Product_out1_re, 18);
  Add3_stage2_sub_cast_1 <= resize(Delay_out1_re, 18);
  Add3_op_stage2_re <= Add3_stage2_sub_cast - Add3_stage2_sub_cast_1;
  Add3_stage2_sub_cast_2 <= resize(Product_out1_im, 18);
  Add3_stage2_sub_cast_3 <= resize(Delay_out1_im, 18);
  Add3_op_stage2_im <= Add3_stage2_sub_cast_2 - Add3_stage2_sub_cast_3;

  Add3_stage3_add_cast <= resize(Delay3_out1_re & '0', 18);
  Add3_out1_re <= Add3_op_stage2_re + Add3_stage3_add_cast;
  Add3_stage3_add_cast_1 <= resize(Delay3_out1_im & '0', 18);
  Add3_out1_im <= Add3_op_stage2_im + Add3_stage3_add_cast_1;

  Add4_add_cast <= resize(Delay1_out1_re, 19);
  Add4_add_cast_1 <= resize(Add3_out1_re, 19);
  Add4_out1_re <= Add4_add_cast + Add4_add_cast_1;
  Add4_add_cast_2 <= resize(Delay1_out1_im, 19);
  Add4_add_cast_3 <= resize(Add3_out1_im, 19);
  Add4_out1_im <= Add4_add_cast_2 + Add4_add_cast_3;

  Add5_add_cast <= resize(Delay2_out1_re, 20);
  Add5_add_cast_1 <= resize(Add4_out1_re, 20);
  Add5_out1_re <= Add5_add_cast + Add5_add_cast_1;
  Add5_add_cast_2 <= resize(Delay2_out1_im, 20);
  Add5_add_cast_3 <= resize(Add4_out1_im, 20);
  Add5_out1_im <= Add5_add_cast_2 + Add5_add_cast_3;

  enb_gated_7 <= Enable_out2 AND enb;

  PLD_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD_out1_re <= to_signed(16#00000#, 20);
      PLD_out1_im <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_7 = '1' THEN
        PLD_out1_re <= Add5_out1_re;
        PLD_out1_im <= Add5_out1_im;
      END IF;
    END IF;
  END PROCESS PLD_process;


  Add_out1_re <= Delay_out1_re - Product_out1_re;
  Add_out1_im <= Delay_out1_im - Product_out1_im;

  Add1_add_cast <= resize(Delay1_out1_re, 17);
  Add1_add_cast_1 <= resize(Add_out1_re, 17);
  Add1_out1_re <= Add1_add_cast + Add1_add_cast_1;
  Add1_add_cast_2 <= resize(Delay1_out1_im, 17);
  Add1_add_cast_3 <= resize(Add_out1_im, 17);
  Add1_out1_im <= Add1_add_cast_2 + Add1_add_cast_3;

  Add2_sub_cast <= resize(Add1_out1_re, 18);
  Add2_sub_cast_1 <= resize(Delay2_out1_re, 18);
  Add2_out1_re <= Add2_sub_cast - Add2_sub_cast_1;
  Add2_sub_cast_2 <= resize(Add1_out1_im, 18);
  Add2_sub_cast_3 <= resize(Delay2_out1_im, 18);
  Add2_out1_im <= Add2_sub_cast_2 - Add2_sub_cast_3;

  enb_gated_8 <= Enable_out2 AND enb;

  PLD1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD1_out1_re <= to_signed(16#00000#, 18);
      PLD1_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_8 = '1' THEN
        PLD1_out1_re <= Add2_out1_re;
        PLD1_out1_im <= Add2_out1_im;
      END IF;
    END IF;
  END PROCESS PLD1_process;


  mu_unsigned <= unsigned(mu);

  enb_gated_9 <= Enable_out2 AND enb;

  PLD2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD2_out1 <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_9 = '1' THEN
        PLD2_out1 <= mu_unsigned;
      END IF;
    END IF;
  END PROCESS PLD2_process;


  Product2_cast <= signed(resize(PLD2_out1, 16));
  Product2_mul_temp <= PLD1_out1_re * Product2_cast;
  Product2_cast_1 <= Product2_mul_temp(32 DOWNTO 0);
  Product2_out1_re <= resize(Product2_cast_1(32 DOWNTO 18), 16);
  Product2_cast_2 <= signed(resize(PLD2_out1, 16));
  Product2_mul_temp_1 <= PLD1_out1_im * Product2_cast_2;
  Product2_add_cast <= Product2_mul_temp_1(32 DOWNTO 0);
  Product2_add_cast_1 <= resize(Product2_add_cast(32 DOWNTO 18), 16);
  Product2_out1_im <= Product2_add_cast_1 + to_signed(16#0000#, 16);

  Add7_add_cast <= resize(PLD_out1_re, 21);
  Add7_add_cast_1 <= resize(Product2_out1_re & '0' & '0' & '0' & '0', 21);
  Add7_out1_re <= Add7_add_cast + Add7_add_cast_1;
  Add7_add_cast_2 <= resize(PLD_out1_im, 21);
  Add7_add_cast_3 <= resize(Product2_out1_im & '0' & '0' & '0' & '0', 21);
  Add7_out1_im <= Add7_add_cast_2 + Add7_add_cast_3;

  enb_gated_10 <= Enable_out2 AND enb;

  PLD5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD5_out1_re <= to_signed(16#000000#, 21);
      PLD5_out1_im <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_10 = '1' THEN
        PLD5_out1_re <= Add7_out1_re;
        PLD5_out1_im <= Add7_out1_im;
      END IF;
    END IF;
  END PROCESS PLD5_process;


  enb_gated_11 <= Enable_out2 AND enb;

  PLD6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD6_out1 <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_11 = '1' THEN
        PLD6_out1 <= PLD2_out1;
      END IF;
    END IF;
  END PROCESS PLD6_process;


  Product1_cast <= signed(resize(PLD6_out1, 16));
  Product1_mul_temp <= PLD5_out1_re * Product1_cast;
  Product1_out1_re <= Product1_mul_temp(35 DOWNTO 0);
  Product1_cast_1 <= signed(resize(PLD6_out1, 16));
  Product1_mul_temp_1 <= PLD5_out1_im * Product1_cast_1;
  Product1_out1_im <= Product1_mul_temp_1(35 DOWNTO 0);

  Add9_add_cast <= resize(PLD4_out1_re & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 37);
  Add9_add_cast_1 <= resize(Product1_out1_re, 37);
  Add9_add_temp <= Add9_add_cast + Add9_add_cast_1;
  Add9_out1_re <= Add9_add_temp(33 DOWNTO 18);
  Add9_add_cast_2 <= resize(PLD4_out1_im & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 37);
  Add9_add_cast_3 <= resize(Product1_out1_im, 37);
  Add9_add_temp_1 <= Add9_add_cast_2 + Add9_add_cast_3;
  Add9_out1_im <= Add9_add_temp_1(33 DOWNTO 18);

  enb_gated_12 <= Enable_out2 AND enb;

  PLD7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PLD7_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      PLD7_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_12 = '1' THEN
        PLD7_reg_im(0) <= Add9_out1_im;
        PLD7_reg_im(1) <= PLD7_reg_im(0);
        PLD7_reg_re(0) <= Add9_out1_re;
        PLD7_reg_re(1) <= PLD7_reg_re(0);
      END IF;
    END IF;
  END PROCESS PLD7_process;

  PLD7_out1_re <= PLD7_reg_re(1);
  PLD7_out1_im <= PLD7_reg_im(1);

  Out1_re <= std_logic_vector(PLD7_out1_re);

  Out1_im <= std_logic_vector(PLD7_out1_im);

END rtl;

